{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/h-square-solid.svg","path":"images/h-square-solid.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"318260c0787a8f2b2ef48511524cac21397a2399","modified":1568130196348},{"_id":"source/CNAME","hash":"730639969874c820dd67cf0b0dec8f28162ffb9c","modified":1559749602530},{"_id":"themes/hexo-theme-next/.DS_Store","hash":"6f6d76fe30ed91935fd4c4a2d3e5e0257fc0b4d6","modified":1559814620516},{"_id":"themes/hexo-theme-next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1559740417606},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1559740417606},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1559740417606},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1559740417607},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1559740417607},{"_id":"themes/hexo-theme-next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1559740417621},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1559740417622},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1559740417622},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1559740417623},{"_id":"themes/hexo-theme-next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1559740417623},{"_id":"themes/hexo-theme-next/bower.json","hash":"1f820f8f0b2fc0590a0c5405a0b2d945ac0d2cd8","modified":1559740417625},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1559740417626},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1559740417645},{"_id":"themes/hexo-theme-next/_config.yml","hash":"b40524bf08d6d1a3a4fbbdefdcf2b126dc37ce5f","modified":1559741649350},{"_id":"themes/hexo-theme-next/package.json","hash":"d1fc59c32d27178d53f9d2c479443ed682e5bd91","modified":1559740417707},{"_id":"source/categories/index.md","hash":"6b2fd462155a0fa9ac3d50d7e0888903b256e611","modified":1559640377091},{"_id":"source/_posts/.DS_Store","hash":"64694a2cb5b1a798f0c39cb369eaa7e83759b167","modified":1562253923445},{"_id":"source/_posts/Block深度软文.md","hash":"f1b2a217c29ea4da59c5318d7e269f0be164ff28","modified":1559715566923},{"_id":"source/_posts/CustomTabBar.md","hash":"039ed6d58c128f244896c5405b04a8b52b2287e3","modified":1560407441317},{"_id":"source/_posts/PSOF.md","hash":"2041566a7e62944626aa5d1581b545c8be628ee2","modified":1562252672770},{"_id":"source/_posts/PaintCode让Logo飞出屏幕.md","hash":"ae191c5ccdfb57e579fb9c0698de65a027efd129","modified":1559715603506},{"_id":"source/_posts/SSGenerate.md","hash":"94ac092cc90bd0b407220cddc68d54277e92feb2","modified":1559818082691},{"_id":"source/_posts/Shadowsocks.md","hash":"38e1a1ef8c8d3754207b7e0797eebbd0402da4a6","modified":1559794056881},{"_id":"source/_posts/SparkseedTerms &PrivacyPolicy.md","hash":"d3f3cc0dd6061319c2375f0fcd2ffc0b09f152d6","modified":1559715630299},{"_id":"source/_posts/Ubuntu VNC Gnome.md","hash":"98bc1d8cdac34b872d74478f902be00cd8e67773","modified":1559817821759},{"_id":"source/_posts/github-hexo提交到百度谷歌搜索引擎.md","hash":"9f990241adba3401d92e93a98aa56c9d1c836b6f","modified":1559715580950},{"_id":"source/_posts/iOS IJKPlayer RTMP播放器的集成.md","hash":"082df868bd02c1dee1de2bf84307db83fd88799a","modified":1559715592645},{"_id":"source/_posts/iOS国际化.md","hash":"4b0f7b79b9729a661b754f43d5424d29227d1b5f","modified":1559817751149},{"_id":"source/_posts/为你的库添加cocoapods支持.md","hash":"138d34c523b1cfd5c16e76eefcd253fbb45ee106","modified":1559715552428},{"_id":"source/_posts/内功修炼篇--runtime.md","hash":"ca9378e336e3e4525898beefd7d65c9718a2b491","modified":1559715508391},{"_id":"source/_posts/实现Webview的看图模式.md","hash":"a380b091422d3f2baac472b577e131704c45f0b9","modified":1559715536208},{"_id":"source/_posts/非对称RSA加密.md","hash":"85b8b6aa46b572ae3e17c7c95863379532b2ebaf","modified":1561170960311},{"_id":"source/tags/index.md","hash":"956d9608f88e8330dcfc5eb11d174b526d1ecdf2","modified":1559640354528},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1559740417569},{"_id":"themes/hexo-theme-next/.git/config","hash":"e78135eac1ede2f3ca79747839db482790e54b3c","modified":1559740417584},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1559740351040},{"_id":"themes/hexo-theme-next/.git/index","hash":"a7c7582a35465a2bea7bd86800ee0470f7245655","modified":1559740417835},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"30c2d36bb84656f1f6ffea7dbaeda34c078368c8","modified":1559740417563},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1559740417608},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"7ce6cdc8adcbfda68fcbcc54c8b9fd3434a37993","modified":1559740417608},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1559740417609},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3239625bb2573e61f7bcce27a74882a9ff7021e9","modified":1559740417614},{"_id":"themes/hexo-theme-next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1559740417614},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1559740417615},{"_id":"themes/hexo-theme-next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1559740417616},{"_id":"themes/hexo-theme-next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1559740417617},{"_id":"themes/hexo-theme-next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1559740417618},{"_id":"themes/hexo-theme-next/.github/release-drafter.yml","hash":"c9fdbbdf712327a8ae1ed5972973a75802e245bc","modified":1559740417618},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1559740417619},{"_id":"themes/hexo-theme-next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1559740417619},{"_id":"themes/hexo-theme-next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1559740417620},{"_id":"themes/hexo-theme-next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1559740417620},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1559740417627},{"_id":"themes/hexo-theme-next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1559740417627},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1559740417628},{"_id":"themes/hexo-theme-next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1559740417629},{"_id":"themes/hexo-theme-next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1559740417629},{"_id":"themes/hexo-theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1559740417630},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1559740417630},{"_id":"themes/hexo-theme-next/docs/MATH.md","hash":"026d2cff73c22a30ea39c50783557ff4913aceac","modified":1559740417631},{"_id":"themes/hexo-theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1559740417632},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1559740417646},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1559740417647},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1559740417647},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1559740417648},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"cd41db832af5e399590b70a5227cfe0b0e98e101","modified":1559740417648},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1559740417649},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1559740417649},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1559740417650},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1559740417652},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1559740417651},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1559740417652},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1559740417652},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1559740417653},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1559740417653},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1559740417656},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1559740417656},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1559740417655},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1559740417654},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1559740417657},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1559740417657},{"_id":"themes/hexo-theme-next/source/.DS_Store","hash":"bc6887c58be3fbedbb6c6dfe2a96a0cc9c78569c","modified":1559742047057},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1559740417709},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1559740417711},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1559740417660},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1559740417705},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1559740417832},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1559740417706},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1559740417705},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1559740417706},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1559740417706},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1559740417707},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1559740417832},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1559740417832},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1559740417707},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559740417786},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1559740351046},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1559740351042},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1559740351062},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1559740351063},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1559740351045},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1559740351064},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1559740351044},{"_id":"themes/hexo-theme-next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1559740351048},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1559740351057},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1559740351066},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1559740351039},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"9f088ccc283a06235e1052c0801594e4eb899b96","modified":1559740417578},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1559740417610},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1559740417611},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1559740417611},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1559740417613},{"_id":"themes/hexo-theme-next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1559740417633},{"_id":"themes/hexo-theme-next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1559740417634},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1559740417635},{"_id":"themes/hexo-theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1559740417636},{"_id":"themes/hexo-theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1559740417637},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1559740417638},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"650fcb9135b6f09d48e866c19e0dbccd831367f1","modified":1559740417639},{"_id":"themes/hexo-theme-next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1559740417640},{"_id":"themes/hexo-theme-next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1559740417642},{"_id":"themes/hexo-theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1559740417642},{"_id":"themes/hexo-theme-next/docs/zh-CN/MATH.md","hash":"83feca62190abcca0332915ffe0eefe582573085","modified":1559740417643},{"_id":"themes/hexo-theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1559740417644},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"cdd7a8bdcf4a83ff4c74ee6c95c6bcc0b8c1831c","modified":1559740417644},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1559740417786},{"_id":"themes/hexo-theme-next/source/images/.DS_Store","hash":"d5a98f88b17fdae0bdf86e84f58ff8dd46f37b92","modified":1559642850843},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1559627219874},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1559627219874},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1559627219875},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1559627219877},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1559627219878},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1559627219881},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1559627219882},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1559627219882},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1559627219882},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"7ced38cdaf218dc1ebd6f2a28ae408f47255eaf3","modified":1559630127921},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"c426b214ca4ebfa8d3ba83ed31d912701d8babec","modified":1559630054666},{"_id":"themes/hexo-theme-next/source/images/h-square-solid.svg","hash":"be183b9a4c7090ee699bae2cc497333c00b3f840","modified":1559629773402},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559627219883},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1559627219884},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559627219885},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1559627219885},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1559627219885},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1559627219886},{"_id":"themes/hexo-theme-next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1559740417708},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1559740417708},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1559740417709},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1559740417711},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1559740417711},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1559740417712},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1559740417712},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1559740417713},{"_id":"themes/hexo-theme-next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1559740417713},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1559740417713},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1559740417714},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1559740417714},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1559740417715},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1559740417715},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1559740417716},{"_id":"themes/hexo-theme-next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1559740417799},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1559740417799},{"_id":"themes/hexo-theme-next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1559740417800},{"_id":"themes/hexo-theme-next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1559740417800},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1559740417801},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1559740417802},{"_id":"themes/hexo-theme-next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1559740417802},{"_id":"themes/hexo-theme-next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1559740417805},{"_id":"themes/hexo-theme-next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1559740417805},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1559740417805},{"_id":"themes/hexo-theme-next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1559740417659},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1559740417660},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1559740417660},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1559740417662},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"c6ca1a3d89660e8d09dd75cf98d032f3cb3b79b4","modified":1559740417663},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1559740417663},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1559740417664},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"589f545333e21a8c7823bce89ab45cf1eb7db6e2","modified":1559740417665},{"_id":"themes/hexo-theme-next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1559740417665},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1559740417675},{"_id":"themes/hexo-theme-next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1559740417677},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1559740417685},{"_id":"themes/hexo-theme-next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1559740417685},{"_id":"themes/hexo-theme-next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1559740417686},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1559740417686},{"_id":"themes/hexo-theme-next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1559740417689},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1559740417689},{"_id":"themes/hexo-theme-next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1559740417696},{"_id":"themes/hexo-theme-next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1559740417696},{"_id":"themes/hexo-theme-next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1559740417696},{"_id":"themes/hexo-theme-next/layout/_third-party/copy-code.swig","hash":"a7126355227236f9433615edfd89e86fd51ed676","modified":1559740417700},{"_id":"themes/hexo-theme-next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1559740417702},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1559740417702},{"_id":"themes/hexo-theme-next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1559740417702},{"_id":"themes/hexo-theme-next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1559740417703},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.swig","hash":"7757bd285732e857996b99af9d917953589fac5e","modified":1559740417703},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1559740417703},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1559740417704},{"_id":"themes/hexo-theme-next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1559740417705},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559740417762},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559740417762},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559740417763},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559740417784},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559740417785},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"02242a0753138b06a8e3e14863b617c8113d2d0b","modified":1559740417577},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1559740417761},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1559740417761},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1559740417763},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1559740417763},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1559740417783},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1559740417783},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1559740417784},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1559740417785},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1559740417804},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1559740417804},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1559740417807},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1559740417807},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1559740417808},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1559740417810},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1559740417811},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1559740417828},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1559740417828},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1559740417829},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1559740417661},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1559740417662},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1559740417667},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1559740417668},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.swig","hash":"36eae78a4d7160a1c5e59ca3f7333f00b43d359b","modified":1559740417668},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1559740417670},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1559740417671},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1559740417672},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1559740417673},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1559740417674},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1559740417674},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1559740417678},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1559740417679},{"_id":"themes/hexo-theme-next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1559740417680},{"_id":"themes/hexo-theme-next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1559740417681},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1559740417682},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1559740417682},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1559740417682},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1559740417683},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1559740417684},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1559740417684},{"_id":"themes/hexo-theme-next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1559740417685},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1559740417687},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1559740417687},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1559740417688},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1559740417688},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1559740417689},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1559740417690},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1559740417690},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1559740417691},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1559740417691},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1559740417691},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"3d01fa6edc0ad73f81813613f2e8a610777f1852","modified":1559740417692},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1559740417692},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"9fa1ca7059243197d8fbbd35108c36629a254570","modified":1559740417693},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1559740417694},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1559740417694},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1559740417694},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1559740417694},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1559740417695},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1559740417695},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1559740417696},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"1a00b1b78c429721d6477c2d8f6f68f005285cc8","modified":1559740417697},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.swig","hash":"074a995cd630f56fc4a3135173515c86f2cb34b6","modified":1559740417697},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1559740417697},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1559740417698},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1559740417698},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1559740417699},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1559740417699},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1559740417701},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1559740417701},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1559740417702},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1559740417704},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1559740417704},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1559740417705},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"9f088ccc283a06235e1052c0801594e4eb899b96","modified":1559740417579},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1559740417569},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1559740417716},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1559740417717},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1559740417717},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1559740417718},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1559740417718},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1559740417727},{"_id":"themes/hexo-theme-next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1559740417733},{"_id":"themes/hexo-theme-next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1559740417734},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1559740417755},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1559740417756},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1559740417757},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"9a190ef2f49bdbf69604b48ad1dc7197895ee9b6","modified":1559740417758},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1559740417758},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1559740417759},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1559740417759},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1559740417764},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1559740417766},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1559740417768},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1559740417769},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1559740417770},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1559740417771},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1559740417771},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1559740417772},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1559740417776},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1559740417776},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1559740417776},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1559740417776},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1559740417777},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1559740417778},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1559740417779},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1559740417780},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1559740417780},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1559740417780},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1559740417780},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1559740417813},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1559740417813},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1559740417814},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1559740417824},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-a99215197568c8345a49f0b2bbde0c4d973b8650.idx","hash":"18efa21142c5687aaba757293bd5b1cb554f6927","modified":1559740417480},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1559740417822},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1559740417823},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1559740417827},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"9f088ccc283a06235e1052c0801594e4eb899b96","modified":1559740417568},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1559740417719},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1559740417720},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1559740417720},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1559740417721},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1559740417721},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1559740417721},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1559740417722},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1559740417722},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1559740417723},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1559740417723},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1559740417724},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1559740417724},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1559740417725},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1559740417725},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1559740417725},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1559740417726},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1559740417726},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1559740417727},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1559740417727},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1559740417728},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1559740417728},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1559740417729},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1559740417729},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1559740417729},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1559740417729},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1559740417730},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1559740417730},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1559740417730},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1559740417731},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1559740417732},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1559740417732},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1559740417732},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1559740417733},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1559740417734},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1559740417734},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1559740417735},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1559740417735},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1559740417736},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1559740417736},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1559740417737},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1559740417737},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1559740417738},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1559740417739},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1559740417740},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1559740417740},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1559740417741},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1559740417741},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1559740417743},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1559740417744},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"6e4400d6704dee076434726b7a03ac464eb7bcb4","modified":1559740417745},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1559740417746},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1559740417747},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1559740417747},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1559740417748},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1559740417749},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1559740417750},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1559740417751},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1559740417751},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1559740417752},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1559740417753},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1559740417754},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1559740417774},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1559740417775},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1559740417777},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1559740417818},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"a61bf8593442b29dff7d588bcf6d5609eeeca2a0","modified":1559642830989},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-a99215197568c8345a49f0b2bbde0c4d973b8650.pack","hash":"ad48c52b0d3c291ac9444c7f352682294a24e883","modified":1559740417472},{"_id":"public/categories/index.html","hash":"072ce2fd7d2cbebeff1b65f328b7819f64732be3","modified":1568130962878},{"_id":"public/tags/index.html","hash":"1337cad678a361223968697c32bd7fcb9099b547","modified":1568130962878},{"_id":"public/RSA/index.html","hash":"46e81075e573279aeadc9877ec0610af551e2528","modified":1568130962880},{"_id":"public/iOS-localization/index.html","hash":"03b25fff271b48dd1b1ce1b76d11c7348b694fd2","modified":1568130962880},{"_id":"public/CustomTabBar/index.html","hash":"c2c912e7e968f4201c6ef457c8ddd977225cb120","modified":1568130962880},{"_id":"public/ubuntu-vnc-gnome/index.html","hash":"3cdd9968afc96e4003ade6bdae8f3087aa8a9d19","modified":1568130962880},{"_id":"public/SSGenerate/index.html","hash":"e264f4e1ff7a8e83487626b9d412aaebaf6d790b","modified":1568130962880},{"_id":"public/PSOF/index.html","hash":"886555c6948f62877caa87fb9d011d1300d8c294","modified":1568130962880},{"_id":"public/PSOF&TermsPrivacyPolicy/index.html","hash":"ca60c37b02b1699abb4ef9f1e47ce33a9cba1bd4","modified":1568130962880},{"_id":"public/Shadowsocks/index.html","hash":"53f58484eff48519200bda74e3fb656e800cddc2","modified":1568130962880},{"_id":"public/WebviewPictureMode/index.html","hash":"c9ca7ad020cbebcd391570d23c4628e43dfa0498","modified":1568130962880},{"_id":"public/Block/index.html","hash":"83f328aeeabc183f23dadc69cee31aa234975b80","modified":1568130962880},{"_id":"public/PaintCode/index.html","hash":"74e843f2a3ac53d6ef30d0b91fe5077008bad3fd","modified":1568130962880},{"_id":"public/runtime/index.html","hash":"94c1dd4e39ea28a09dda4301bc42a5829e29855e","modified":1568130962881},{"_id":"public/github&hexo/index.html","hash":"89f71fb1077c8b272da99e266a864272d2e73b8f","modified":1568130962881},{"_id":"public/cocoapods/index.html","hash":"f84b326273316c4a0c328478ca4bbffa91d8bb11","modified":1568130962881},{"_id":"public/iOSIJKPlayer/index.html","hash":"f8c90d1e6f243169f89052160026f7152e84b7a5","modified":1568130962881},{"_id":"public/index.html","hash":"8d77421db7a5ca7d6001e99332a8dfb32c2ca282","modified":1568130962881},{"_id":"public/page/2/index.html","hash":"1e83ba6b58cf8107dae822945a0506de3a0f3bf2","modified":1568130962881},{"_id":"public/archives/index.html","hash":"367af599665e78c1da44bff1570640abe71b5b18","modified":1568130962881},{"_id":"public/archives/page/2/index.html","hash":"cb141ed3a5fd52d024f150fff6a0c386e9d576b7","modified":1568130962881},{"_id":"public/archives/2016/index.html","hash":"10fe6ca6013a9a49e113fb299f68edc5b2b2d04a","modified":1568130962881},{"_id":"public/archives/2016/12/index.html","hash":"c8cd35ef5d1f09ab3bd58cf078a9e87434cc6bc1","modified":1568130962881},{"_id":"public/archives/2017/index.html","hash":"2dc97141615c1ceb7eb0293709dc9a6d65ef15f8","modified":1568130962878},{"_id":"public/archives/2017/02/index.html","hash":"e6a2edf29b42a12b2c2cd2605611c28ed76768df","modified":1568130962879},{"_id":"public/archives/2018/index.html","hash":"7af65ffb3da4cbd7ced808feefacb5544220c34c","modified":1568130962879},{"_id":"public/archives/2018/03/index.html","hash":"753b975a6c54862c6ad0c6baee2982b7acfbe098","modified":1568130962879},{"_id":"public/archives/2018/08/index.html","hash":"99e6923c19c921d916abddb60de7f6753f867fe7","modified":1568130962879},{"_id":"public/archives/2019/index.html","hash":"c22f6cf1be95712a9bdb33e92c04857f10319623","modified":1568130962879},{"_id":"public/archives/2019/06/index.html","hash":"3840e6c11567ffbd93563f89d57314dc7ce0f712","modified":1568130962879},{"_id":"public/tags/iOS/index.html","hash":"785f94b012ba217b863ff360a9f2af545d98c314","modified":1568130962879},{"_id":"public/tags/TabBar/index.html","hash":"ea5c2ab6107d57432137472ffbd87013dda7203f","modified":1568130962879},{"_id":"public/tags/iPhone-X/index.html","hash":"73b01c781bf88424e7edc006551ea59e8a41956e","modified":1568130962879},{"_id":"public/tags/PSOF/index.html","hash":"8888fa720d32c5a0931a072d5373626e05e6ba84","modified":1568130962879},{"_id":"public/tags/Shadowsocks/index.html","hash":"dfc23cdd9741b3d13a8a319438c3fa90c1a4d899","modified":1568130962879},{"_id":"public/tags/Ubuntu/index.html","hash":"30db02cb6abec8eef1856040e6ff6659506e9f90","modified":1568130962879},{"_id":"public/tags/linux/index.html","hash":"6aea38470577817d1c50ad2a808c1df2e2a96ffd","modified":1568130962879},{"_id":"public/tags/Gnome/index.html","hash":"8adda8879eeea93c9230b9a30c9a12b213c3c1e1","modified":1568130962879},{"_id":"public/tags/VNC/index.html","hash":"7540ee956204a981e10c2353e77384ee06f07e73","modified":1568130962879},{"_id":"public/tags/RSA/index.html","hash":"9665087809db78419c126f7ff7a0e5bc4984e36d","modified":1568130962879},{"_id":"public/tags/base64/index.html","hash":"2077ea25779853a60e2a2110eb5715e20b0e1e0d","modified":1568130962879},{"_id":"public/tags/MD5/index.html","hash":"97c5269f8b9745024bfd35523d6d8b1cdaa85b8a","modified":1568130962879},{"_id":"public/tags/非对称加密/index.html","hash":"4108210d1613209a5962905d3b646c3bd45399bd","modified":1568130962879},{"_id":"public/live2dw/assets/exp/f00.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1568130038765},{"_id":"public/live2dw/assets/moc/z16.256/texture_00.png","hash":"19f22619c246067d519aa1e6e477497cc4342414","modified":1568130038765},{"_id":"public/live2dw/assets/moc/z16.512/texture_00.png","hash":"251b9f944fb1575c01a62b8a9d7522fe76954b3b","modified":1568130038765},{"_id":"public/live2dw/assets/z16.model.json","hash":"e69f3d2ecc9bf51b3972ad9df8f6aaa31956910c","modified":1568130038765},{"_id":"public/live2dw/assets/mtn/idle.mtn","hash":"f6b879d9f1d096509a7edbc971b8fdd9697932e9","modified":1568130038765},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1568130038765},{"_id":"public/live2dw/assets/z16.physics.json","hash":"67f13f60030d7e4c7f824c001ab5254ce4b9bafd","modified":1568130038765},{"_id":"public/live2dw/assets/moc/z16.moc","hash":"6b0241e80e94664d694b43ad05333960de2550c1","modified":1568130038769},{"_id":"public/live2dw/assets/moc/z16.1024/texture_00.png","hash":"c4f7c067d7d37601490554438ab801fce1feb92d","modified":1568130038772},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1568130038776},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1568130038778},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1568130038786}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2019-06-04T09:24:51.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-06-04 17:24:51\ntype: categories\n---\n","updated":"2019-06-04T09:26:17.091Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck05d9e4e0000js4agct06hbe","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"tags","date":"2019-06-04T09:24:40.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-06-04 17:24:40\ntype: tags\n---\n","updated":"2019-06-04T09:25:54.528Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck05d9e4n0002js4ac9v3qolx","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"CustomTabBar","urlPath":"CustomTabBar","date":"2019-06-12T16:00:00.000Z","updated":"2019-06-12T16:00:00.000Z","_content":"\n### CustomTabBarController\n\n* viewDidLoad\n\n```swift\noverride func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let tabBar = CustomTabBar()\n        tabBar.delegate = self\n        self.setValue(tabBar, forKeyPath: \"tabBar\") \n        \n        let vc1 = ViewController()\n        let nvc1: UINavigationController = NavigationViewController(rootViewController: vc1)\n        ...\n        ...\n             \n        \n        \n        let normalDict: NSDictionary = [NSAttributedStringKey.foregroundColor: UIColor.white, NSAttributedStringKey.font : UIFont.boldSystemFont(ofSize: 10)]\n        let selectedDict: NSDictionary = [NSAttributedStringKey.foregroundColor: UIColor.white, NSAttributedStringKey.font : UIFont.boldSystemFont(ofSize: 10)]\n\n        let tabbarItem1 = UITabBarItem(title: NSLocalizedString(\"xx\", comment: \"\"), image: UIImage(named: \"xx.png\"), selectedImage: UIImage(named: \"xx.png\"))\n        psdetailTabbar.setTitleTextAttributes((normalDict as! [NSAttributedStringKey : Any]), for: .normal)\n        psdetailTabbar.setTitleTextAttributes((selectedDict as! [NSAttributedStringKey : Any]), for: .selected)\n        ...\n        ...\n        \n        \n        \n        nvc1.tabBarItem = tabbarItem1\n        ...\n        ...\n        \n        \n        \n        self.viewControllers = [nvc1,...]\n        \n        for vc in (self.viewControllers?.enumerated())! {\n            let nvc = vc.element as! NavigationViewController\n            nvc.navigationBar.barTintColor = UIColor.white\n            nvc.viewControllers.first?.view.backgroundColor = UIColor.white\n            let bgView = UIImageView(frame: UIScreen.main.bounds)\n            bgView.image = UIImage(named: \"home_bg\")\n            nvc.viewControllers.first?.view.addSubview(bgView)\n        }\n        \n        for item in (self.tabBar.items?.enumerated())! {\n            //item.element.imageInsets = UIEdgeInsetsMake(7, 0, -7, 0)\n            item.element.image = item.element.image?.withRenderingMode(.alwaysOriginal)\n            item.element.selectedImage = item.element.selectedImage?.withRenderingMode(.alwaysOriginal)\n            \n        }\n  }\n```\n\n<!-- more -->\n\n### CustomTabBar\n\n* init\n\n```swift\noverride init(frame: CGRect) {\n        super.init(frame: frame)\n        let btn = CustomButton()\n        self.addSubview(btn)\n        btn.addTarget(self, action: #selector(clickPublish), for: .touchUpInside)\n        self.publishButton = btn\n        self.barTintColor = UIColor.navBgColor()\n}\n```\n\n* layoutSubviews\n\n```swift\n  override func layoutSubviews() {\n        super.layoutSubviews()\n\n        let buttonW = barWidth / 5\n        let buttonH = barHeight\n        let buttonY = 0\n        var buttonIndex: CGFloat = 0\n        \n        self.publishButton.frame = CGRect(x: 0, y: 0, width: buttonW, height: buttonH)\n        self.publishButton.center = CGPoint(x: buttonW * 0.5, y: barHeight * 0.5)\n        \n        for view in self.subviews.enumerated() {\n            if !view.element.isKind(of: NSClassFromString(\"UITabBarButton\")!){\n                continue\n            }\n            let buttonX = buttonW * ((buttonIndex >= 0) ? (buttonIndex + 1) : buttonIndex)\n            if UIDevice.current.modelName == \"iPhone X\" || UIDevice.current.modelName == \"iPhone XS\" || UIDevice.current.modelName == \"iPhone XS Max\" || UIDevice.current.modelName == \"iPhone XR\" {\n                view.element.frame = CGRect(x: buttonX, y: CGFloat(buttonY), width: buttonW, height: 49)\n            }else {\n                view.element.frame = CGRect(x: buttonX, y: CGFloat(buttonY), width: buttonW, height: buttonH)\n            }\n            buttonIndex += 1\n        }\n    }\n```\n### CustomButton\n\n* init\n\n```swift\noverride init(frame: CGRect) {\n        super.init(frame: frame)\n        self.titleLabel?.textAlignment = .center\n        self.titleLabel?.font = UIFont.boldSystemFont(ofSize: 10)\n        self.setImage(UIImage(named: \"tabbar_home_unselected\"), for: .normal)\n        self.setTitle(NSLocalizedString(\"xx\", comment: \"\"), for: .normal)\n        self.setTitleColor(UIColor.shadowTextColor(), for: .normal)\n    }\n```\n* titleRect\n\n```swift\noverride func titleRect(forContentRect contentRect: CGRect) -> CGRect {\n        let space = CGFloat(2)\n        \n        let titleW = contentRect.width\n        let titleH = CGFloat(12)\n        let titleX = 0\n        let titleY = CGFloat(49) - space - titleH\n        return CGRect(x: CGFloat(titleX), y: titleY, width: titleW, height: titleH)\n    }\n```\n\n* imageRect\n\n```swift\noverride func imageRect(forContentRect contentRect: CGRect) -> CGRect {\n        let space = CGFloat(5)\n        \n        let imageH = CGFloat(24.5)\n        let imageW = imageH\n        let imageX = (contentRect.width - imageH)/2\n        let imageY = space\n        return CGRect(x: imageX, y: imageY, width: imageW, height: imageH)\n    }\n```\n\n\n\n\n\n","source":"_posts/CustomTabBar.md","raw":"---\n\ntitle: CustomTabBar\nurlPath: CustomTabBar\ndate: 2019-06-13\nupdated: 2019-06-13\ntag: [iOS, TabBar, iPhone X]\n\n---\n\n### CustomTabBarController\n\n* viewDidLoad\n\n```swift\noverride func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let tabBar = CustomTabBar()\n        tabBar.delegate = self\n        self.setValue(tabBar, forKeyPath: \"tabBar\") \n        \n        let vc1 = ViewController()\n        let nvc1: UINavigationController = NavigationViewController(rootViewController: vc1)\n        ...\n        ...\n             \n        \n        \n        let normalDict: NSDictionary = [NSAttributedStringKey.foregroundColor: UIColor.white, NSAttributedStringKey.font : UIFont.boldSystemFont(ofSize: 10)]\n        let selectedDict: NSDictionary = [NSAttributedStringKey.foregroundColor: UIColor.white, NSAttributedStringKey.font : UIFont.boldSystemFont(ofSize: 10)]\n\n        let tabbarItem1 = UITabBarItem(title: NSLocalizedString(\"xx\", comment: \"\"), image: UIImage(named: \"xx.png\"), selectedImage: UIImage(named: \"xx.png\"))\n        psdetailTabbar.setTitleTextAttributes((normalDict as! [NSAttributedStringKey : Any]), for: .normal)\n        psdetailTabbar.setTitleTextAttributes((selectedDict as! [NSAttributedStringKey : Any]), for: .selected)\n        ...\n        ...\n        \n        \n        \n        nvc1.tabBarItem = tabbarItem1\n        ...\n        ...\n        \n        \n        \n        self.viewControllers = [nvc1,...]\n        \n        for vc in (self.viewControllers?.enumerated())! {\n            let nvc = vc.element as! NavigationViewController\n            nvc.navigationBar.barTintColor = UIColor.white\n            nvc.viewControllers.first?.view.backgroundColor = UIColor.white\n            let bgView = UIImageView(frame: UIScreen.main.bounds)\n            bgView.image = UIImage(named: \"home_bg\")\n            nvc.viewControllers.first?.view.addSubview(bgView)\n        }\n        \n        for item in (self.tabBar.items?.enumerated())! {\n            //item.element.imageInsets = UIEdgeInsetsMake(7, 0, -7, 0)\n            item.element.image = item.element.image?.withRenderingMode(.alwaysOriginal)\n            item.element.selectedImage = item.element.selectedImage?.withRenderingMode(.alwaysOriginal)\n            \n        }\n  }\n```\n\n<!-- more -->\n\n### CustomTabBar\n\n* init\n\n```swift\noverride init(frame: CGRect) {\n        super.init(frame: frame)\n        let btn = CustomButton()\n        self.addSubview(btn)\n        btn.addTarget(self, action: #selector(clickPublish), for: .touchUpInside)\n        self.publishButton = btn\n        self.barTintColor = UIColor.navBgColor()\n}\n```\n\n* layoutSubviews\n\n```swift\n  override func layoutSubviews() {\n        super.layoutSubviews()\n\n        let buttonW = barWidth / 5\n        let buttonH = barHeight\n        let buttonY = 0\n        var buttonIndex: CGFloat = 0\n        \n        self.publishButton.frame = CGRect(x: 0, y: 0, width: buttonW, height: buttonH)\n        self.publishButton.center = CGPoint(x: buttonW * 0.5, y: barHeight * 0.5)\n        \n        for view in self.subviews.enumerated() {\n            if !view.element.isKind(of: NSClassFromString(\"UITabBarButton\")!){\n                continue\n            }\n            let buttonX = buttonW * ((buttonIndex >= 0) ? (buttonIndex + 1) : buttonIndex)\n            if UIDevice.current.modelName == \"iPhone X\" || UIDevice.current.modelName == \"iPhone XS\" || UIDevice.current.modelName == \"iPhone XS Max\" || UIDevice.current.modelName == \"iPhone XR\" {\n                view.element.frame = CGRect(x: buttonX, y: CGFloat(buttonY), width: buttonW, height: 49)\n            }else {\n                view.element.frame = CGRect(x: buttonX, y: CGFloat(buttonY), width: buttonW, height: buttonH)\n            }\n            buttonIndex += 1\n        }\n    }\n```\n### CustomButton\n\n* init\n\n```swift\noverride init(frame: CGRect) {\n        super.init(frame: frame)\n        self.titleLabel?.textAlignment = .center\n        self.titleLabel?.font = UIFont.boldSystemFont(ofSize: 10)\n        self.setImage(UIImage(named: \"tabbar_home_unselected\"), for: .normal)\n        self.setTitle(NSLocalizedString(\"xx\", comment: \"\"), for: .normal)\n        self.setTitleColor(UIColor.shadowTextColor(), for: .normal)\n    }\n```\n* titleRect\n\n```swift\noverride func titleRect(forContentRect contentRect: CGRect) -> CGRect {\n        let space = CGFloat(2)\n        \n        let titleW = contentRect.width\n        let titleH = CGFloat(12)\n        let titleX = 0\n        let titleY = CGFloat(49) - space - titleH\n        return CGRect(x: CGFloat(titleX), y: titleY, width: titleW, height: titleH)\n    }\n```\n\n* imageRect\n\n```swift\noverride func imageRect(forContentRect contentRect: CGRect) -> CGRect {\n        let space = CGFloat(5)\n        \n        let imageH = CGFloat(24.5)\n        let imageW = imageH\n        let imageX = (contentRect.width - imageH)/2\n        let imageY = space\n        return CGRect(x: imageX, y: imageY, width: imageW, height: imageH)\n    }\n```\n\n\n\n\n\n","slug":"CustomTabBar","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck05d9e4h0001js4a7k2y1v9r","content":"<h3 id=\"CustomTabBarController\"><a href=\"#CustomTabBarController\" class=\"headerlink\" title=\"CustomTabBarController\"></a>CustomTabBarController</h3><ul>\n<li>viewDidLoad</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> tabBar = <span class=\"type\">CustomTabBar</span>()</span><br><span class=\"line\">        tabBar.delegate = <span class=\"keyword\">self</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setValue(tabBar, forKeyPath: <span class=\"string\">\"tabBar\"</span>) </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> vc1 = <span class=\"type\">ViewController</span>()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nvc1: <span class=\"type\">UINavigationController</span> = <span class=\"type\">NavigationViewController</span>(rootViewController: vc1)</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ...</span><br><span class=\"line\">             </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> normalDict: <span class=\"type\">NSDictionary</span> = [<span class=\"type\">NSAttributedStringKey</span>.foregroundColor: <span class=\"type\">UIColor</span>.white, <span class=\"type\">NSAttributedStringKey</span>.font : <span class=\"type\">UIFont</span>.boldSystemFont(ofSize: <span class=\"number\">10</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> selectedDict: <span class=\"type\">NSDictionary</span> = [<span class=\"type\">NSAttributedStringKey</span>.foregroundColor: <span class=\"type\">UIColor</span>.white, <span class=\"type\">NSAttributedStringKey</span>.font : <span class=\"type\">UIFont</span>.boldSystemFont(ofSize: <span class=\"number\">10</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> tabbarItem1 = <span class=\"type\">UITabBarItem</span>(title: <span class=\"type\">NSLocalizedString</span>(<span class=\"string\">\"xx\"</span>, comment: <span class=\"string\">\"\"</span>), image: <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"xx.png\"</span>), selectedImage: <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"xx.png\"</span>))</span><br><span class=\"line\">        psdetailTabbar.setTitleTextAttributes((normalDict <span class=\"keyword\">as</span>! [<span class=\"type\">NSAttributedStringKey</span> : <span class=\"type\">Any</span>]), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">        psdetailTabbar.setTitleTextAttributes((selectedDict <span class=\"keyword\">as</span>! [<span class=\"type\">NSAttributedStringKey</span> : <span class=\"type\">Any</span>]), <span class=\"keyword\">for</span>: .selected)</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        nvc1.tabBarItem = tabbarItem1</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.viewControllers = [nvc1,...]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> vc <span class=\"keyword\">in</span> (<span class=\"keyword\">self</span>.viewControllers?.enumerated())! &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> nvc = vc.element <span class=\"keyword\">as</span>! <span class=\"type\">NavigationViewController</span></span><br><span class=\"line\">            nvc.navigationBar.barTintColor = <span class=\"type\">UIColor</span>.white</span><br><span class=\"line\">            nvc.viewControllers.first?.view.backgroundColor = <span class=\"type\">UIColor</span>.white</span><br><span class=\"line\">            <span class=\"keyword\">let</span> bgView = <span class=\"type\">UIImageView</span>(frame: <span class=\"type\">UIScreen</span>.main.bounds)</span><br><span class=\"line\">            bgView.image = <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"home_bg\"</span>)</span><br><span class=\"line\">            nvc.viewControllers.first?.view.addSubview(bgView)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> (<span class=\"keyword\">self</span>.tabBar.items?.enumerated())! &#123;</span><br><span class=\"line\">            <span class=\"comment\">//item.element.imageInsets = UIEdgeInsetsMake(7, 0, -7, 0)</span></span><br><span class=\"line\">            item.element.image = item.element.image?.withRenderingMode(.alwaysOriginal)</span><br><span class=\"line\">            item.element.selectedImage = item.element.selectedImage?.withRenderingMode(.alwaysOriginal)</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h3 id=\"CustomTabBar\"><a href=\"#CustomTabBar\" class=\"headerlink\" title=\"CustomTabBar\"></a>CustomTabBar</h3><ul>\n<li>init</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(frame: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> btn = <span class=\"type\">CustomButton</span>()</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.addSubview(btn)</span><br><span class=\"line\">        btn.addTarget(<span class=\"keyword\">self</span>, action: #selector(clickPublish), <span class=\"keyword\">for</span>: .touchUpInside)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.publishButton = btn</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.barTintColor = <span class=\"type\">UIColor</span>.navBgColor()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>layoutSubviews</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">layoutSubviews</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.layoutSubviews()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> buttonW = barWidth / <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> buttonH = barHeight</span><br><span class=\"line\">      <span class=\"keyword\">let</span> buttonY = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> buttonIndex: <span class=\"type\">CGFloat</span> = <span class=\"number\">0</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">self</span>.publishButton.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: buttonW, height: buttonH)</span><br><span class=\"line\">      <span class=\"keyword\">self</span>.publishButton.center = <span class=\"type\">CGPoint</span>(x: buttonW * <span class=\"number\">0.5</span>, y: barHeight * <span class=\"number\">0.5</span>)</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">for</span> view <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.subviews.enumerated() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> !view.element.isKind(of: <span class=\"type\">NSClassFromString</span>(<span class=\"string\">\"UITabBarButton\"</span>)!)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">continue</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> buttonX = buttonW * ((buttonIndex &gt;= <span class=\"number\">0</span>) ? (buttonIndex + <span class=\"number\">1</span>) : buttonIndex)</span><br><span class=\"line\">          <span class=\"keyword\">if</span> <span class=\"type\">UIDevice</span>.current.modelName == <span class=\"string\">\"iPhone X\"</span> || <span class=\"type\">UIDevice</span>.current.modelName == <span class=\"string\">\"iPhone XS\"</span> || <span class=\"type\">UIDevice</span>.current.modelName == <span class=\"string\">\"iPhone XS Max\"</span> || <span class=\"type\">UIDevice</span>.current.modelName == <span class=\"string\">\"iPhone XR\"</span> &#123;</span><br><span class=\"line\">              view.element.frame = <span class=\"type\">CGRect</span>(x: buttonX, y: <span class=\"type\">CGFloat</span>(buttonY), width: buttonW, height: <span class=\"number\">49</span>)</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              view.element.frame = <span class=\"type\">CGRect</span>(x: buttonX, y: <span class=\"type\">CGFloat</span>(buttonY), width: buttonW, height: buttonH)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          buttonIndex += <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CustomButton\"><a href=\"#CustomButton\" class=\"headerlink\" title=\"CustomButton\"></a>CustomButton</h3><ul>\n<li>init</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(frame: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.titleLabel?.textAlignment = .center</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.titleLabel?.font = <span class=\"type\">UIFont</span>.boldSystemFont(ofSize: <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setImage(<span class=\"type\">UIImage</span>(named: <span class=\"string\">\"tabbar_home_unselected\"</span>), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setTitle(<span class=\"type\">NSLocalizedString</span>(<span class=\"string\">\"xx\"</span>, comment: <span class=\"string\">\"\"</span>), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setTitleColor(<span class=\"type\">UIColor</span>.shadowTextColor(), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>titleRect</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">titleRect</span><span class=\"params\">(forContentRect contentRect: CGRect)</span></span> -&gt; <span class=\"type\">CGRect</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> space = <span class=\"type\">CGFloat</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> titleW = contentRect.width</span><br><span class=\"line\">        <span class=\"keyword\">let</span> titleH = <span class=\"type\">CGFloat</span>(<span class=\"number\">12</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> titleX = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> titleY = <span class=\"type\">CGFloat</span>(<span class=\"number\">49</span>) - space - titleH</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">CGRect</span>(x: <span class=\"type\">CGFloat</span>(titleX), y: titleY, width: titleW, height: titleH)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>imageRect</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">imageRect</span><span class=\"params\">(forContentRect contentRect: CGRect)</span></span> -&gt; <span class=\"type\">CGRect</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> space = <span class=\"type\">CGFloat</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> imageH = <span class=\"type\">CGFloat</span>(<span class=\"number\">24.5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> imageW = imageH</span><br><span class=\"line\">        <span class=\"keyword\">let</span> imageX = (contentRect.width - imageH)/<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> imageY = space</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">CGRect</span>(x: imageX, y: imageY, width: imageW, height: imageH)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":4686,"excerpt":"<h3 id=\"CustomTabBarController\"><a href=\"#CustomTabBarController\" class=\"headerlink\" title=\"CustomTabBarController\"></a>CustomTabBarController</h3><ul>\n<li>viewDidLoad</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> tabBar = <span class=\"type\">CustomTabBar</span>()</span><br><span class=\"line\">        tabBar.delegate = <span class=\"keyword\">self</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setValue(tabBar, forKeyPath: <span class=\"string\">\"tabBar\"</span>) </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> vc1 = <span class=\"type\">ViewController</span>()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nvc1: <span class=\"type\">UINavigationController</span> = <span class=\"type\">NavigationViewController</span>(rootViewController: vc1)</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ...</span><br><span class=\"line\">             </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> normalDict: <span class=\"type\">NSDictionary</span> = [<span class=\"type\">NSAttributedStringKey</span>.foregroundColor: <span class=\"type\">UIColor</span>.white, <span class=\"type\">NSAttributedStringKey</span>.font : <span class=\"type\">UIFont</span>.boldSystemFont(ofSize: <span class=\"number\">10</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> selectedDict: <span class=\"type\">NSDictionary</span> = [<span class=\"type\">NSAttributedStringKey</span>.foregroundColor: <span class=\"type\">UIColor</span>.white, <span class=\"type\">NSAttributedStringKey</span>.font : <span class=\"type\">UIFont</span>.boldSystemFont(ofSize: <span class=\"number\">10</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> tabbarItem1 = <span class=\"type\">UITabBarItem</span>(title: <span class=\"type\">NSLocalizedString</span>(<span class=\"string\">\"xx\"</span>, comment: <span class=\"string\">\"\"</span>), image: <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"xx.png\"</span>), selectedImage: <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"xx.png\"</span>))</span><br><span class=\"line\">        psdetailTabbar.setTitleTextAttributes((normalDict <span class=\"keyword\">as</span>! [<span class=\"type\">NSAttributedStringKey</span> : <span class=\"type\">Any</span>]), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">        psdetailTabbar.setTitleTextAttributes((selectedDict <span class=\"keyword\">as</span>! [<span class=\"type\">NSAttributedStringKey</span> : <span class=\"type\">Any</span>]), <span class=\"keyword\">for</span>: .selected)</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        nvc1.tabBarItem = tabbarItem1</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.viewControllers = [nvc1,...]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> vc <span class=\"keyword\">in</span> (<span class=\"keyword\">self</span>.viewControllers?.enumerated())! &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> nvc = vc.element <span class=\"keyword\">as</span>! <span class=\"type\">NavigationViewController</span></span><br><span class=\"line\">            nvc.navigationBar.barTintColor = <span class=\"type\">UIColor</span>.white</span><br><span class=\"line\">            nvc.viewControllers.first?.view.backgroundColor = <span class=\"type\">UIColor</span>.white</span><br><span class=\"line\">            <span class=\"keyword\">let</span> bgView = <span class=\"type\">UIImageView</span>(frame: <span class=\"type\">UIScreen</span>.main.bounds)</span><br><span class=\"line\">            bgView.image = <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"home_bg\"</span>)</span><br><span class=\"line\">            nvc.viewControllers.first?.view.addSubview(bgView)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> (<span class=\"keyword\">self</span>.tabBar.items?.enumerated())! &#123;</span><br><span class=\"line\">            <span class=\"comment\">//item.element.imageInsets = UIEdgeInsetsMake(7, 0, -7, 0)</span></span><br><span class=\"line\">            item.element.image = item.element.image?.withRenderingMode(.alwaysOriginal)</span><br><span class=\"line\">            item.element.selectedImage = item.element.selectedImage?.withRenderingMode(.alwaysOriginal)</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"CustomTabBar\"><a href=\"#CustomTabBar\" class=\"headerlink\" title=\"CustomTabBar\"></a>CustomTabBar</h3><ul>\n<li>init</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(frame: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> btn = <span class=\"type\">CustomButton</span>()</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.addSubview(btn)</span><br><span class=\"line\">        btn.addTarget(<span class=\"keyword\">self</span>, action: #selector(clickPublish), <span class=\"keyword\">for</span>: .touchUpInside)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.publishButton = btn</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.barTintColor = <span class=\"type\">UIColor</span>.navBgColor()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>layoutSubviews</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">layoutSubviews</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.layoutSubviews()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> buttonW = barWidth / <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> buttonH = barHeight</span><br><span class=\"line\">      <span class=\"keyword\">let</span> buttonY = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> buttonIndex: <span class=\"type\">CGFloat</span> = <span class=\"number\">0</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">self</span>.publishButton.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: buttonW, height: buttonH)</span><br><span class=\"line\">      <span class=\"keyword\">self</span>.publishButton.center = <span class=\"type\">CGPoint</span>(x: buttonW * <span class=\"number\">0.5</span>, y: barHeight * <span class=\"number\">0.5</span>)</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">for</span> view <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.subviews.enumerated() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> !view.element.isKind(of: <span class=\"type\">NSClassFromString</span>(<span class=\"string\">\"UITabBarButton\"</span>)!)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">continue</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> buttonX = buttonW * ((buttonIndex &gt;= <span class=\"number\">0</span>) ? (buttonIndex + <span class=\"number\">1</span>) : buttonIndex)</span><br><span class=\"line\">          <span class=\"keyword\">if</span> <span class=\"type\">UIDevice</span>.current.modelName == <span class=\"string\">\"iPhone X\"</span> || <span class=\"type\">UIDevice</span>.current.modelName == <span class=\"string\">\"iPhone XS\"</span> || <span class=\"type\">UIDevice</span>.current.modelName == <span class=\"string\">\"iPhone XS Max\"</span> || <span class=\"type\">UIDevice</span>.current.modelName == <span class=\"string\">\"iPhone XR\"</span> &#123;</span><br><span class=\"line\">              view.element.frame = <span class=\"type\">CGRect</span>(x: buttonX, y: <span class=\"type\">CGFloat</span>(buttonY), width: buttonW, height: <span class=\"number\">49</span>)</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              view.element.frame = <span class=\"type\">CGRect</span>(x: buttonX, y: <span class=\"type\">CGFloat</span>(buttonY), width: buttonW, height: buttonH)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          buttonIndex += <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CustomButton\"><a href=\"#CustomButton\" class=\"headerlink\" title=\"CustomButton\"></a>CustomButton</h3><ul>\n<li>init</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(frame: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.titleLabel?.textAlignment = .center</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.titleLabel?.font = <span class=\"type\">UIFont</span>.boldSystemFont(ofSize: <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setImage(<span class=\"type\">UIImage</span>(named: <span class=\"string\">\"tabbar_home_unselected\"</span>), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setTitle(<span class=\"type\">NSLocalizedString</span>(<span class=\"string\">\"xx\"</span>, comment: <span class=\"string\">\"\"</span>), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setTitleColor(<span class=\"type\">UIColor</span>.shadowTextColor(), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>titleRect</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">titleRect</span><span class=\"params\">(forContentRect contentRect: CGRect)</span></span> -&gt; <span class=\"type\">CGRect</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> space = <span class=\"type\">CGFloat</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> titleW = contentRect.width</span><br><span class=\"line\">        <span class=\"keyword\">let</span> titleH = <span class=\"type\">CGFloat</span>(<span class=\"number\">12</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> titleX = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> titleY = <span class=\"type\">CGFloat</span>(<span class=\"number\">49</span>) - space - titleH</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">CGRect</span>(x: <span class=\"type\">CGFloat</span>(titleX), y: titleY, width: titleW, height: titleH)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>imageRect</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">imageRect</span><span class=\"params\">(forContentRect contentRect: CGRect)</span></span> -&gt; <span class=\"type\">CGRect</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> space = <span class=\"type\">CGFloat</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> imageH = <span class=\"type\">CGFloat</span>(<span class=\"number\">24.5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> imageW = imageH</span><br><span class=\"line\">        <span class=\"keyword\">let</span> imageX = (contentRect.width - imageH)/<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> imageY = space</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">CGRect</span>(x: imageX, y: imageY, width: imageW, height: imageH)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"PSOF","urlPath":"PSOF","date":"2018-08-17T16:00:00.000Z","updated":"2018-08-17T16:00:00.000Z","_content":"\n### \n\n#### Login&Registration\n![登录注册.png](https://upload-images.jianshu.io/upload_images/3286386-beb6bd307723bd96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\n\n![注册.png](https://upload-images.jianshu.io/upload_images/3286386-697b3e5af278097e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![验证.png](https://upload-images.jianshu.io/upload_images/3286386-87aa2ba68a89c4d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![头像.png](https://upload-images.jianshu.io/upload_images/3286386-a2e4ae3efc6c9a83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![用户名.png](https://upload-images.jianshu.io/upload_images/3286386-8034642229677a71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### Home\n![分享主页.png](https://upload-images.jianshu.io/upload_images/3286386-2313ed2c6f8ea3df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![主页.png](https://upload-images.jianshu.io/upload_images/3286386-9f5f8c2bcc5b6b91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### Search\n![推荐.png](https://upload-images.jianshu.io/upload_images/3286386-97d27e4625c63319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### Post\n![图库.png](https://upload-images.jianshu.io/upload_images/3286386-d723fd60c3da0dbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![分享.png](https://upload-images.jianshu.io/upload_images/3286386-bfe17347a5f30555.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![更多工具.png](https://upload-images.jianshu.io/upload_images/3286386-23c3bb10f3d11226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![虚化.png](https://upload-images.jianshu.io/upload_images/3286386-23320e4f6bb405cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![颜色.png](https://upload-images.jianshu.io/upload_images/3286386-ec752d593b3d1d51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![编辑工具.png](https://upload-images.jianshu.io/upload_images/3286386-ab8b230028a506de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![旋转透视等.png](https://upload-images.jianshu.io/upload_images/3286386-22e302a78c92fbe1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![滤镜.png](https://upload-images.jianshu.io/upload_images/3286386-21f1825bcb7ae528.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![其他工具.png](https://upload-images.jianshu.io/upload_images/3286386-68ac11b232aa81b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### Chat\n![聊天界面.png](https://upload-images.jianshu.io/upload_images/3286386-ffa209d23dd8ae03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### My\n![个人主页.png](https://upload-images.jianshu.io/upload_images/3286386-08947989db785d7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![设置.png](https://upload-images.jianshu.io/upload_images/3286386-9da5ef455d1ce330.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![关于自己.png](https://upload-images.jianshu.io/upload_images/3286386-54ca9fcfb9b4d14c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### Screen\n![Screen.png](https://upload-images.jianshu.io/upload_images/3286386-bc18193f29010d22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","source":"_posts/PSOF.md","raw":"---\n\ntitle: PSOF\nurlPath: PSOF\ndate: 2018-08-18\nupdated: 2018-08-18\ntag: [iOS, PSOF]\n\n---\n\n### \n\n#### Login&Registration\n![登录注册.png](https://upload-images.jianshu.io/upload_images/3286386-beb6bd307723bd96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\n\n![注册.png](https://upload-images.jianshu.io/upload_images/3286386-697b3e5af278097e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![验证.png](https://upload-images.jianshu.io/upload_images/3286386-87aa2ba68a89c4d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![头像.png](https://upload-images.jianshu.io/upload_images/3286386-a2e4ae3efc6c9a83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![用户名.png](https://upload-images.jianshu.io/upload_images/3286386-8034642229677a71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### Home\n![分享主页.png](https://upload-images.jianshu.io/upload_images/3286386-2313ed2c6f8ea3df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![主页.png](https://upload-images.jianshu.io/upload_images/3286386-9f5f8c2bcc5b6b91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### Search\n![推荐.png](https://upload-images.jianshu.io/upload_images/3286386-97d27e4625c63319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### Post\n![图库.png](https://upload-images.jianshu.io/upload_images/3286386-d723fd60c3da0dbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![分享.png](https://upload-images.jianshu.io/upload_images/3286386-bfe17347a5f30555.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![更多工具.png](https://upload-images.jianshu.io/upload_images/3286386-23c3bb10f3d11226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![虚化.png](https://upload-images.jianshu.io/upload_images/3286386-23320e4f6bb405cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![颜色.png](https://upload-images.jianshu.io/upload_images/3286386-ec752d593b3d1d51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![编辑工具.png](https://upload-images.jianshu.io/upload_images/3286386-ab8b230028a506de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![旋转透视等.png](https://upload-images.jianshu.io/upload_images/3286386-22e302a78c92fbe1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![滤镜.png](https://upload-images.jianshu.io/upload_images/3286386-21f1825bcb7ae528.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![其他工具.png](https://upload-images.jianshu.io/upload_images/3286386-68ac11b232aa81b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### Chat\n![聊天界面.png](https://upload-images.jianshu.io/upload_images/3286386-ffa209d23dd8ae03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### My\n![个人主页.png](https://upload-images.jianshu.io/upload_images/3286386-08947989db785d7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![设置.png](https://upload-images.jianshu.io/upload_images/3286386-9da5ef455d1ce330.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![关于自己.png](https://upload-images.jianshu.io/upload_images/3286386-54ca9fcfb9b4d14c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### Screen\n![Screen.png](https://upload-images.jianshu.io/upload_images/3286386-bc18193f29010d22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","slug":"PSOF","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck05d9e4o0003js4ac4gxg0kg","content":"<p>### </p>\n<h4 id=\"Login-amp-Registration\"><a href=\"#Login-amp-Registration\" class=\"headerlink\" title=\"Login&amp;Registration\"></a>Login&amp;Registration</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-beb6bd307723bd96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"登录注册.png\"></p>\n<a id=\"more\"></a>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-697b3e5af278097e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"注册.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-87aa2ba68a89c4d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"验证.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-a2e4ae3efc6c9a83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"头像.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-8034642229677a71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"用户名.png\"></p>\n<h4 id=\"Home\"><a href=\"#Home\" class=\"headerlink\" title=\"Home\"></a>Home</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-2313ed2c6f8ea3df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"分享主页.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-9f5f8c2bcc5b6b91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"主页.png\"></p>\n<h4 id=\"Search\"><a href=\"#Search\" class=\"headerlink\" title=\"Search\"></a>Search</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-97d27e4625c63319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"推荐.png\"></p>\n<h4 id=\"Post\"><a href=\"#Post\" class=\"headerlink\" title=\"Post\"></a>Post</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-d723fd60c3da0dbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图库.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-bfe17347a5f30555.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"分享.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-23c3bb10f3d11226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"更多工具.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-23320e4f6bb405cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"虚化.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-ec752d593b3d1d51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"颜色.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-ab8b230028a506de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"编辑工具.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-22e302a78c92fbe1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"旋转透视等.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-21f1825bcb7ae528.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"滤镜.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-68ac11b232aa81b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"其他工具.png\"></p>\n<h4 id=\"Chat\"><a href=\"#Chat\" class=\"headerlink\" title=\"Chat\"></a>Chat</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-ffa209d23dd8ae03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"聊天界面.png\"></p>\n<h4 id=\"My\"><a href=\"#My\" class=\"headerlink\" title=\"My\"></a>My</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-08947989db785d7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"个人主页.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-9da5ef455d1ce330.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-54ca9fcfb9b4d14c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"关于自己.png\"></p>\n<h4 id=\"Screen\"><a href=\"#Screen\" class=\"headerlink\" title=\"Screen\"></a>Screen</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-bc18193f29010d22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen.png\"></p>\n","site":{"data":{}},"length":64,"excerpt":"<p>### </p>\n<h4 id=\"Login-amp-Registration\"><a href=\"#Login-amp-Registration\" class=\"headerlink\" title=\"Login&amp;Registration\"></a>Login&amp;Registration</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-beb6bd307723bd96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"登录注册.png\"></p>","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-697b3e5af278097e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"注册.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-87aa2ba68a89c4d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"验证.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-a2e4ae3efc6c9a83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"头像.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-8034642229677a71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"用户名.png\"></p>\n<h4 id=\"Home\"><a href=\"#Home\" class=\"headerlink\" title=\"Home\"></a>Home</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-2313ed2c6f8ea3df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"分享主页.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-9f5f8c2bcc5b6b91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"主页.png\"></p>\n<h4 id=\"Search\"><a href=\"#Search\" class=\"headerlink\" title=\"Search\"></a>Search</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-97d27e4625c63319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"推荐.png\"></p>\n<h4 id=\"Post\"><a href=\"#Post\" class=\"headerlink\" title=\"Post\"></a>Post</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-d723fd60c3da0dbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图库.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-bfe17347a5f30555.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"分享.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-23c3bb10f3d11226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"更多工具.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-23320e4f6bb405cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"虚化.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-ec752d593b3d1d51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"颜色.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-ab8b230028a506de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"编辑工具.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-22e302a78c92fbe1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"旋转透视等.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-21f1825bcb7ae528.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"滤镜.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-68ac11b232aa81b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"其他工具.png\"></p>\n<h4 id=\"Chat\"><a href=\"#Chat\" class=\"headerlink\" title=\"Chat\"></a>Chat</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-ffa209d23dd8ae03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"聊天界面.png\"></p>\n<h4 id=\"My\"><a href=\"#My\" class=\"headerlink\" title=\"My\"></a>My</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-08947989db785d7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"个人主页.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-9da5ef455d1ce330.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3286386-54ca9fcfb9b4d14c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"关于自己.png\"></p>\n<h4 id=\"Screen\"><a href=\"#Screen\" class=\"headerlink\" title=\"Screen\"></a>Screen</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/3286386-bc18193f29010d22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen.png\"></p>"},{"title":"PaintCode让Logo飞出屏幕","urlPath":"PaintCode","date":"2016-12-24T16:00:00.000Z","updated":"2016-12-24T16:00:00.000Z","_content":"\n## 前言\n相信大家都见过Twitter APP的加载界面，logo飞出屏幕的感觉很是生动，PaintCode这款软件可以自动生成你的图案代码，如图是模仿Twitter的加载界面。\n\n<!-- more -->\n\n## 正文\n### 1、Sketch\n在运用PaintCode之前呢，需要先用到Sketch这款软件，目的是制作SVG格式的文件导入到PaintCode，不多说直接上工具。\n\n>SVG （可缩放矢量图形）\n>\n>SVG可缩放矢量图形（Scalable Vector Graphics）是基于可扩展标记语言（XML），用于描述二维矢量图形的一种图形格式。SVG是W3C(\"World Wide Web ConSortium\" 即 \" 国际互联网标准组织\")在2000年8月制定的一种新的二维矢量图形格式，也是规范中的网络矢量图形标准。SVG严格遵从XML语法，并用文本格式的描述性语言来描述图像内容，因此是一种和图像分辨率无关的矢量图形格式。\n\n首先将原图导入Sketch，如图：\n![Sketch](http://i1.piimg.com/1949/07e8631cffc64b8f.png)\n接着在我们左上角选用insert->vector，我们的钢笔工具，在图片的各个顶点处链接起来，链接完成后就是我们如图的样子：\n![vector](http://i1.piimg.com/1949/4c6bc2c8b63af936.png)\n然后双击我们任意一个顶点的时候，右边一栏会出现如图的工具，我们选用Mirrored将四边做调节以贴合logo的轨迹。\n\n![Mirrored](http://i1.piimg.com/1949/75e43f85f7519211.png)\n\n最后调节后的效果：\n![Sketch](http://i1.piimg.com/1949/f0894929f7418ddf.png)\n最后点击我们的路径，右下角会有Export板，选择SVG格式后保存即可，到此为止Sketch已经完成他的使命了，下面该我们的PaintCode上场了。\n![Export](http://i1.piimg.com/1949/6e45baf127e893af.png)\n\n### 2、PaintCode\nPaintCode的用法很简单，直接将上面保存的SVG图片扔给他就好了，他会自动生成代码，包括swift和oc，直接将生成的代码复制即可。\n![PaintCode](http://i1.piimg.com/1949/4b6efa91bbf790d9.png)\n### 3、xcode\n这时候回到我们的xcode项目中来，我新建了一个继续于UIView的LaunchViewTwitter类作为整个启动界面的版面，又添加了launchView属性，作为显示logo的view。\n\n我先将PaintCode生成的代码放进bezierPath方法中：\n\n    -(UIBezierPath *)bezierPath\n    {\n       //PaintCode生成的代码\n    }\n\n\n接着添加launchView和layer：\n\n    -(void)addLayerToLaunchView\n    {\n    //添加launchView\n    self.launchView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 150, 150)];\n    self.launchView.backgroundColor = [UIColor clearColor];\n    self.launchView.center = self.center;\n    [self addSubview:self.launchView];\n    \n    添加layer\n    CAShapeLayer *layer = [[CAShapeLayer alloc]init];\n    layer.path = [self bezierPath].CGPath;\n    layer.bounds = CGPathGetBoundingBox(layer.path);\n    self.backgroundColor = [UIColor colorWithRed:0.18 green:0.70 blue:0.90 alpha:1.0];\n    layer.position = CGPointMake(self.launchView.bounds.size.width / 2, self.launchView.bounds.size.height/ 2);\n    layer.fillColor = [UIColor whiteColor].CGColor;\n    [self.launchView.layer addSublayer:layer];\n    \n    //执行动画 \n    [self performSelector:@selector(startLaunch) withObject:nil afterDelay:1.0];\n    }\n为launchView添加动画：\n\n    - (void)startLaunch\n    {\n    [UIView animateWithDuration:1 animations:^{\n    //先缩小launchView\n        self.launchView.transform = CGAffineTransformMakeScale(0.5, 0.5);\n        \n    } completion:^(BOOL finished) {\n        [UIView animateWithDuration:1 animations:^{\n        \n        //在无线放大launchView\n            self.launchView.transform = CGAffineTransformMakeScale(50, 50);\n            self.launchView.alpha = 0;\n        } completion:^(BOOL finished) {\n        \n        //最后移除\n            [self.launchView removeFromSuperview];\n            [self removeFromSuperview];\n        }];;\n    }];\n    }\n此时加载LaunchViewTwitter的类就写完了，回到我们主控制器，添加继承与LaunchViewTwitter的launchView属性，在viewDidAppear方法中，加载动画类：\n\n    - (void)launchAnimation\n    {\n    //获取到LaunchScreen控制器(不要忘记id)\n    UIViewController *viewController = [[UIStoryboard storyboardWithName:@\"LaunchScreen\" bundle:nil] instantiateViewControllerWithIdentifier:@\"LaunchScreen\"];\n    \n    //获取LaunchScreen的view\n    UIView *launchView = viewController.view;\n    UIWindow *mainWindow = [UIApplication sharedApplication].keyWindow;\n    launchView.frame = [UIApplication sharedApplication].keyWindow.frame;\n    [mainWindow addSubview:launchView];\n    \n    //添加launchView类\n    self.launchView = [[LaunchViewTwitter alloc]initWithFrame:[UIScreen mainScreen].bounds];\n    [self.launchView addLayerToLaunchView];\n    [launchView addSubview:self.launchView];\n    \n    //最后移除\n    [UIView animateWithDuration:0.5f delay:2.5f options:UIViewAnimationOptionBeginFromCurrentState animations:^{\n        launchView.alpha = 0.0f;\n    } completion:^(BOOL finished) {\n        [launchView removeFromSuperview];\n    }];\n    }\n到这里加载界面就做完了，就是我们前言的demo动画。\n### 4、写在最后\n确实在UI/UE如此丰富的今天，很多时候一些人性化或者较有设计感的界面或动画会大幅度的提升用户的好感度，毕竟人人看脸的时代，我们的APP也绝不例外，快去让自己的APP更加充满活力吧。另外文中的测试demo[在这里](https://github.com/henvyluk/PaintCode)同时如果有什么不清楚的欢迎留言或者到我的[github](https://github.com/henvyluk)讨论。\n\n\n最后祝大家晚安，老样子送上一首歌曲[【张国荣--心跳呼吸正常】](http://music.163.com/#/song?id=186490)","source":"_posts/PaintCode让Logo飞出屏幕.md","raw":"---\ntitle: PaintCode让Logo飞出屏幕\nurlPath: PaintCode\ndate: 2016-12-25 \nupdated: 2016-12-25\n---\n\n## 前言\n相信大家都见过Twitter APP的加载界面，logo飞出屏幕的感觉很是生动，PaintCode这款软件可以自动生成你的图案代码，如图是模仿Twitter的加载界面。\n\n<!-- more -->\n\n## 正文\n### 1、Sketch\n在运用PaintCode之前呢，需要先用到Sketch这款软件，目的是制作SVG格式的文件导入到PaintCode，不多说直接上工具。\n\n>SVG （可缩放矢量图形）\n>\n>SVG可缩放矢量图形（Scalable Vector Graphics）是基于可扩展标记语言（XML），用于描述二维矢量图形的一种图形格式。SVG是W3C(\"World Wide Web ConSortium\" 即 \" 国际互联网标准组织\")在2000年8月制定的一种新的二维矢量图形格式，也是规范中的网络矢量图形标准。SVG严格遵从XML语法，并用文本格式的描述性语言来描述图像内容，因此是一种和图像分辨率无关的矢量图形格式。\n\n首先将原图导入Sketch，如图：\n![Sketch](http://i1.piimg.com/1949/07e8631cffc64b8f.png)\n接着在我们左上角选用insert->vector，我们的钢笔工具，在图片的各个顶点处链接起来，链接完成后就是我们如图的样子：\n![vector](http://i1.piimg.com/1949/4c6bc2c8b63af936.png)\n然后双击我们任意一个顶点的时候，右边一栏会出现如图的工具，我们选用Mirrored将四边做调节以贴合logo的轨迹。\n\n![Mirrored](http://i1.piimg.com/1949/75e43f85f7519211.png)\n\n最后调节后的效果：\n![Sketch](http://i1.piimg.com/1949/f0894929f7418ddf.png)\n最后点击我们的路径，右下角会有Export板，选择SVG格式后保存即可，到此为止Sketch已经完成他的使命了，下面该我们的PaintCode上场了。\n![Export](http://i1.piimg.com/1949/6e45baf127e893af.png)\n\n### 2、PaintCode\nPaintCode的用法很简单，直接将上面保存的SVG图片扔给他就好了，他会自动生成代码，包括swift和oc，直接将生成的代码复制即可。\n![PaintCode](http://i1.piimg.com/1949/4b6efa91bbf790d9.png)\n### 3、xcode\n这时候回到我们的xcode项目中来，我新建了一个继续于UIView的LaunchViewTwitter类作为整个启动界面的版面，又添加了launchView属性，作为显示logo的view。\n\n我先将PaintCode生成的代码放进bezierPath方法中：\n\n    -(UIBezierPath *)bezierPath\n    {\n       //PaintCode生成的代码\n    }\n\n\n接着添加launchView和layer：\n\n    -(void)addLayerToLaunchView\n    {\n    //添加launchView\n    self.launchView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 150, 150)];\n    self.launchView.backgroundColor = [UIColor clearColor];\n    self.launchView.center = self.center;\n    [self addSubview:self.launchView];\n    \n    添加layer\n    CAShapeLayer *layer = [[CAShapeLayer alloc]init];\n    layer.path = [self bezierPath].CGPath;\n    layer.bounds = CGPathGetBoundingBox(layer.path);\n    self.backgroundColor = [UIColor colorWithRed:0.18 green:0.70 blue:0.90 alpha:1.0];\n    layer.position = CGPointMake(self.launchView.bounds.size.width / 2, self.launchView.bounds.size.height/ 2);\n    layer.fillColor = [UIColor whiteColor].CGColor;\n    [self.launchView.layer addSublayer:layer];\n    \n    //执行动画 \n    [self performSelector:@selector(startLaunch) withObject:nil afterDelay:1.0];\n    }\n为launchView添加动画：\n\n    - (void)startLaunch\n    {\n    [UIView animateWithDuration:1 animations:^{\n    //先缩小launchView\n        self.launchView.transform = CGAffineTransformMakeScale(0.5, 0.5);\n        \n    } completion:^(BOOL finished) {\n        [UIView animateWithDuration:1 animations:^{\n        \n        //在无线放大launchView\n            self.launchView.transform = CGAffineTransformMakeScale(50, 50);\n            self.launchView.alpha = 0;\n        } completion:^(BOOL finished) {\n        \n        //最后移除\n            [self.launchView removeFromSuperview];\n            [self removeFromSuperview];\n        }];;\n    }];\n    }\n此时加载LaunchViewTwitter的类就写完了，回到我们主控制器，添加继承与LaunchViewTwitter的launchView属性，在viewDidAppear方法中，加载动画类：\n\n    - (void)launchAnimation\n    {\n    //获取到LaunchScreen控制器(不要忘记id)\n    UIViewController *viewController = [[UIStoryboard storyboardWithName:@\"LaunchScreen\" bundle:nil] instantiateViewControllerWithIdentifier:@\"LaunchScreen\"];\n    \n    //获取LaunchScreen的view\n    UIView *launchView = viewController.view;\n    UIWindow *mainWindow = [UIApplication sharedApplication].keyWindow;\n    launchView.frame = [UIApplication sharedApplication].keyWindow.frame;\n    [mainWindow addSubview:launchView];\n    \n    //添加launchView类\n    self.launchView = [[LaunchViewTwitter alloc]initWithFrame:[UIScreen mainScreen].bounds];\n    [self.launchView addLayerToLaunchView];\n    [launchView addSubview:self.launchView];\n    \n    //最后移除\n    [UIView animateWithDuration:0.5f delay:2.5f options:UIViewAnimationOptionBeginFromCurrentState animations:^{\n        launchView.alpha = 0.0f;\n    } completion:^(BOOL finished) {\n        [launchView removeFromSuperview];\n    }];\n    }\n到这里加载界面就做完了，就是我们前言的demo动画。\n### 4、写在最后\n确实在UI/UE如此丰富的今天，很多时候一些人性化或者较有设计感的界面或动画会大幅度的提升用户的好感度，毕竟人人看脸的时代，我们的APP也绝不例外，快去让自己的APP更加充满活力吧。另外文中的测试demo[在这里](https://github.com/henvyluk/PaintCode)同时如果有什么不清楚的欢迎留言或者到我的[github](https://github.com/henvyluk)讨论。\n\n\n最后祝大家晚安，老样子送上一首歌曲[【张国荣--心跳呼吸正常】](http://music.163.com/#/song?id=186490)","slug":"PaintCode让Logo飞出屏幕","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck05d9e4x0005js4a5g9org2s","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>相信大家都见过Twitter APP的加载界面，logo飞出屏幕的感觉很是生动，PaintCode这款软件可以自动生成你的图案代码，如图是模仿Twitter的加载界面。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"1、Sketch\"><a href=\"#1、Sketch\" class=\"headerlink\" title=\"1、Sketch\"></a>1、Sketch</h3><p>在运用PaintCode之前呢，需要先用到Sketch这款软件，目的是制作SVG格式的文件导入到PaintCode，不多说直接上工具。</p>\n<blockquote>\n<p>SVG （可缩放矢量图形）</p>\n<p>SVG可缩放矢量图形（Scalable Vector Graphics）是基于可扩展标记语言（XML），用于描述二维矢量图形的一种图形格式。SVG是W3C(“World Wide Web ConSortium” 即 “ 国际互联网标准组织”)在2000年8月制定的一种新的二维矢量图形格式，也是规范中的网络矢量图形标准。SVG严格遵从XML语法，并用文本格式的描述性语言来描述图像内容，因此是一种和图像分辨率无关的矢量图形格式。</p>\n</blockquote>\n<p>首先将原图导入Sketch，如图：<br><img src=\"http://i1.piimg.com/1949/07e8631cffc64b8f.png\" alt=\"Sketch\"><br>接着在我们左上角选用insert-&gt;vector，我们的钢笔工具，在图片的各个顶点处链接起来，链接完成后就是我们如图的样子：<br><img src=\"http://i1.piimg.com/1949/4c6bc2c8b63af936.png\" alt=\"vector\"><br>然后双击我们任意一个顶点的时候，右边一栏会出现如图的工具，我们选用Mirrored将四边做调节以贴合logo的轨迹。</p>\n<p><img src=\"http://i1.piimg.com/1949/75e43f85f7519211.png\" alt=\"Mirrored\"></p>\n<p>最后调节后的效果：<br><img src=\"http://i1.piimg.com/1949/f0894929f7418ddf.png\" alt=\"Sketch\"><br>最后点击我们的路径，右下角会有Export板，选择SVG格式后保存即可，到此为止Sketch已经完成他的使命了，下面该我们的PaintCode上场了。<br><img src=\"http://i1.piimg.com/1949/6e45baf127e893af.png\" alt=\"Export\"></p>\n<h3 id=\"2、PaintCode\"><a href=\"#2、PaintCode\" class=\"headerlink\" title=\"2、PaintCode\"></a>2、PaintCode</h3><p>PaintCode的用法很简单，直接将上面保存的SVG图片扔给他就好了，他会自动生成代码，包括swift和oc，直接将生成的代码复制即可。<br><img src=\"http://i1.piimg.com/1949/4b6efa91bbf790d9.png\" alt=\"PaintCode\"></p>\n<h3 id=\"3、xcode\"><a href=\"#3、xcode\" class=\"headerlink\" title=\"3、xcode\"></a>3、xcode</h3><p>这时候回到我们的xcode项目中来，我新建了一个继续于UIView的LaunchViewTwitter类作为整个启动界面的版面，又添加了launchView属性，作为显示logo的view。</p>\n<p>我先将PaintCode生成的代码放进bezierPath方法中：</p>\n<pre><code>-(UIBezierPath *)bezierPath\n{\n   //PaintCode生成的代码\n}</code></pre><p>接着添加launchView和layer：</p>\n<pre><code>-(void)addLayerToLaunchView\n{\n//添加launchView\nself.launchView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 150, 150)];\nself.launchView.backgroundColor = [UIColor clearColor];\nself.launchView.center = self.center;\n[self addSubview:self.launchView];\n\n添加layer\nCAShapeLayer *layer = [[CAShapeLayer alloc]init];\nlayer.path = [self bezierPath].CGPath;\nlayer.bounds = CGPathGetBoundingBox(layer.path);\nself.backgroundColor = [UIColor colorWithRed:0.18 green:0.70 blue:0.90 alpha:1.0];\nlayer.position = CGPointMake(self.launchView.bounds.size.width / 2, self.launchView.bounds.size.height/ 2);\nlayer.fillColor = [UIColor whiteColor].CGColor;\n[self.launchView.layer addSublayer:layer];\n\n//执行动画 \n[self performSelector:@selector(startLaunch) withObject:nil afterDelay:1.0];\n}</code></pre><p>为launchView添加动画：</p>\n<pre><code>- (void)startLaunch\n{\n[UIView animateWithDuration:1 animations:^{\n//先缩小launchView\n    self.launchView.transform = CGAffineTransformMakeScale(0.5, 0.5);\n\n} completion:^(BOOL finished) {\n    [UIView animateWithDuration:1 animations:^{\n\n    //在无线放大launchView\n        self.launchView.transform = CGAffineTransformMakeScale(50, 50);\n        self.launchView.alpha = 0;\n    } completion:^(BOOL finished) {\n\n    //最后移除\n        [self.launchView removeFromSuperview];\n        [self removeFromSuperview];\n    }];;\n}];\n}</code></pre><p>此时加载LaunchViewTwitter的类就写完了，回到我们主控制器，添加继承与LaunchViewTwitter的launchView属性，在viewDidAppear方法中，加载动画类：</p>\n<pre><code>- (void)launchAnimation\n{\n//获取到LaunchScreen控制器(不要忘记id)\nUIViewController *viewController = [[UIStoryboard storyboardWithName:@&quot;LaunchScreen&quot; bundle:nil] instantiateViewControllerWithIdentifier:@&quot;LaunchScreen&quot;];\n\n//获取LaunchScreen的view\nUIView *launchView = viewController.view;\nUIWindow *mainWindow = [UIApplication sharedApplication].keyWindow;\nlaunchView.frame = [UIApplication sharedApplication].keyWindow.frame;\n[mainWindow addSubview:launchView];\n\n//添加launchView类\nself.launchView = [[LaunchViewTwitter alloc]initWithFrame:[UIScreen mainScreen].bounds];\n[self.launchView addLayerToLaunchView];\n[launchView addSubview:self.launchView];\n\n//最后移除\n[UIView animateWithDuration:0.5f delay:2.5f options:UIViewAnimationOptionBeginFromCurrentState animations:^{\n    launchView.alpha = 0.0f;\n} completion:^(BOOL finished) {\n    [launchView removeFromSuperview];\n}];\n}</code></pre><p>到这里加载界面就做完了，就是我们前言的demo动画。</p>\n<h3 id=\"4、写在最后\"><a href=\"#4、写在最后\" class=\"headerlink\" title=\"4、写在最后\"></a>4、写在最后</h3><p>确实在UI/UE如此丰富的今天，很多时候一些人性化或者较有设计感的界面或动画会大幅度的提升用户的好感度，毕竟人人看脸的时代，我们的APP也绝不例外，快去让自己的APP更加充满活力吧。另外文中的测试demo<a href=\"https://github.com/henvyluk/PaintCode\" target=\"_blank\" rel=\"noopener\">在这里</a>同时如果有什么不清楚的欢迎留言或者到我的<a href=\"https://github.com/henvyluk\" target=\"_blank\" rel=\"noopener\">github</a>讨论。</p>\n<p>最后祝大家晚安，老样子送上一首歌曲<a href=\"http://music.163.com/#/song?id=186490\" target=\"_blank\" rel=\"noopener\">【张国荣–心跳呼吸正常】</a></p>\n","site":{"data":{}},"length":3380,"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>相信大家都见过Twitter APP的加载界面，logo飞出屏幕的感觉很是生动，PaintCode这款软件可以自动生成你的图案代码，如图是模仿Twitter的加载界面。</p>","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"1、Sketch\"><a href=\"#1、Sketch\" class=\"headerlink\" title=\"1、Sketch\"></a>1、Sketch</h3><p>在运用PaintCode之前呢，需要先用到Sketch这款软件，目的是制作SVG格式的文件导入到PaintCode，不多说直接上工具。</p>\n<blockquote>\n<p>SVG （可缩放矢量图形）</p>\n<p>SVG可缩放矢量图形（Scalable Vector Graphics）是基于可扩展标记语言（XML），用于描述二维矢量图形的一种图形格式。SVG是W3C(“World Wide Web ConSortium” 即 “ 国际互联网标准组织”)在2000年8月制定的一种新的二维矢量图形格式，也是规范中的网络矢量图形标准。SVG严格遵从XML语法，并用文本格式的描述性语言来描述图像内容，因此是一种和图像分辨率无关的矢量图形格式。</p>\n</blockquote>\n<p>首先将原图导入Sketch，如图：<br><img src=\"http://i1.piimg.com/1949/07e8631cffc64b8f.png\" alt=\"Sketch\"><br>接着在我们左上角选用insert-&gt;vector，我们的钢笔工具，在图片的各个顶点处链接起来，链接完成后就是我们如图的样子：<br><img src=\"http://i1.piimg.com/1949/4c6bc2c8b63af936.png\" alt=\"vector\"><br>然后双击我们任意一个顶点的时候，右边一栏会出现如图的工具，我们选用Mirrored将四边做调节以贴合logo的轨迹。</p>\n<p><img src=\"http://i1.piimg.com/1949/75e43f85f7519211.png\" alt=\"Mirrored\"></p>\n<p>最后调节后的效果：<br><img src=\"http://i1.piimg.com/1949/f0894929f7418ddf.png\" alt=\"Sketch\"><br>最后点击我们的路径，右下角会有Export板，选择SVG格式后保存即可，到此为止Sketch已经完成他的使命了，下面该我们的PaintCode上场了。<br><img src=\"http://i1.piimg.com/1949/6e45baf127e893af.png\" alt=\"Export\"></p>\n<h3 id=\"2、PaintCode\"><a href=\"#2、PaintCode\" class=\"headerlink\" title=\"2、PaintCode\"></a>2、PaintCode</h3><p>PaintCode的用法很简单，直接将上面保存的SVG图片扔给他就好了，他会自动生成代码，包括swift和oc，直接将生成的代码复制即可。<br><img src=\"http://i1.piimg.com/1949/4b6efa91bbf790d9.png\" alt=\"PaintCode\"></p>\n<h3 id=\"3、xcode\"><a href=\"#3、xcode\" class=\"headerlink\" title=\"3、xcode\"></a>3、xcode</h3><p>这时候回到我们的xcode项目中来，我新建了一个继续于UIView的LaunchViewTwitter类作为整个启动界面的版面，又添加了launchView属性，作为显示logo的view。</p>\n<p>我先将PaintCode生成的代码放进bezierPath方法中：</p>\n<pre><code>-(UIBezierPath *)bezierPath\n{\n   //PaintCode生成的代码\n}</code></pre><p>接着添加launchView和layer：</p>\n<pre><code>-(void)addLayerToLaunchView\n{\n//添加launchView\nself.launchView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 150, 150)];\nself.launchView.backgroundColor = [UIColor clearColor];\nself.launchView.center = self.center;\n[self addSubview:self.launchView];\n\n添加layer\nCAShapeLayer *layer = [[CAShapeLayer alloc]init];\nlayer.path = [self bezierPath].CGPath;\nlayer.bounds = CGPathGetBoundingBox(layer.path);\nself.backgroundColor = [UIColor colorWithRed:0.18 green:0.70 blue:0.90 alpha:1.0];\nlayer.position = CGPointMake(self.launchView.bounds.size.width / 2, self.launchView.bounds.size.height/ 2);\nlayer.fillColor = [UIColor whiteColor].CGColor;\n[self.launchView.layer addSublayer:layer];\n\n//执行动画 \n[self performSelector:@selector(startLaunch) withObject:nil afterDelay:1.0];\n}</code></pre><p>为launchView添加动画：</p>\n<pre><code>- (void)startLaunch\n{\n[UIView animateWithDuration:1 animations:^{\n//先缩小launchView\n    self.launchView.transform = CGAffineTransformMakeScale(0.5, 0.5);\n\n} completion:^(BOOL finished) {\n    [UIView animateWithDuration:1 animations:^{\n\n    //在无线放大launchView\n        self.launchView.transform = CGAffineTransformMakeScale(50, 50);\n        self.launchView.alpha = 0;\n    } completion:^(BOOL finished) {\n\n    //最后移除\n        [self.launchView removeFromSuperview];\n        [self removeFromSuperview];\n    }];;\n}];\n}</code></pre><p>此时加载LaunchViewTwitter的类就写完了，回到我们主控制器，添加继承与LaunchViewTwitter的launchView属性，在viewDidAppear方法中，加载动画类：</p>\n<pre><code>- (void)launchAnimation\n{\n//获取到LaunchScreen控制器(不要忘记id)\nUIViewController *viewController = [[UIStoryboard storyboardWithName:@&quot;LaunchScreen&quot; bundle:nil] instantiateViewControllerWithIdentifier:@&quot;LaunchScreen&quot;];\n\n//获取LaunchScreen的view\nUIView *launchView = viewController.view;\nUIWindow *mainWindow = [UIApplication sharedApplication].keyWindow;\nlaunchView.frame = [UIApplication sharedApplication].keyWindow.frame;\n[mainWindow addSubview:launchView];\n\n//添加launchView类\nself.launchView = [[LaunchViewTwitter alloc]initWithFrame:[UIScreen mainScreen].bounds];\n[self.launchView addLayerToLaunchView];\n[launchView addSubview:self.launchView];\n\n//最后移除\n[UIView animateWithDuration:0.5f delay:2.5f options:UIViewAnimationOptionBeginFromCurrentState animations:^{\n    launchView.alpha = 0.0f;\n} completion:^(BOOL finished) {\n    [launchView removeFromSuperview];\n}];\n}</code></pre><p>到这里加载界面就做完了，就是我们前言的demo动画。</p>\n<h3 id=\"4、写在最后\"><a href=\"#4、写在最后\" class=\"headerlink\" title=\"4、写在最后\"></a>4、写在最后</h3><p>确实在UI/UE如此丰富的今天，很多时候一些人性化或者较有设计感的界面或动画会大幅度的提升用户的好感度，毕竟人人看脸的时代，我们的APP也绝不例外，快去让自己的APP更加充满活力吧。另外文中的测试demo<a href=\"https://github.com/henvyluk/PaintCode\" target=\"_blank\" rel=\"noopener\">在这里</a>同时如果有什么不清楚的欢迎留言或者到我的<a href=\"https://github.com/henvyluk\" target=\"_blank\" rel=\"noopener\">github</a>讨论。</p>\n<p>最后祝大家晚安，老样子送上一首歌曲<a href=\"http://music.163.com/#/song?id=186490\" target=\"_blank\" rel=\"noopener\">【张国荣–心跳呼吸正常】</a></p>"},{"title":"SSGenerate","urlPath":"SSGenerate","date":"2019-06-05T16:00:00.000Z","updated":"2019-06-05T16:00:00.000Z","_content":"\n### Mac finalShell\n* execute`ssh-keygen -t rsa -f rsaSavePath -C whoiam`\n* add .pub(full txt) to GCP sshkey\n* finalShell add rsa path\n\n### Mac terminal\n* `ssh -i rsaSavePath whoiam@ip`\n\n<!-- more -->\n\n### SSGenerate\n\n* `wget--no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.sh`\n* `chmod +x shadowsocks-libev-debian.sh`\n* `./shadowsocks-libev-debian.sh 2>&1 | tee shadowsocks-libev-debian.log`\n\n### SSStatus\n\n* `/etc/init.d/shadowsocks start` \n* `/etc/init.d/shadowsocks stop` \n* `/etc/init.d/shadowsocks restart` \n* `/etc/init.d/shadowsocks status`\n\n\n\n \n","source":"_posts/SSGenerate.md","raw":"---\n\ntitle: SSGenerate\nurlPath: SSGenerate\ndate: 2019-06-06\nupdated: 2019-06-06\ntag: Shadowsocks\n\n---\n\n### Mac finalShell\n* execute`ssh-keygen -t rsa -f rsaSavePath -C whoiam`\n* add .pub(full txt) to GCP sshkey\n* finalShell add rsa path\n\n### Mac terminal\n* `ssh -i rsaSavePath whoiam@ip`\n\n<!-- more -->\n\n### SSGenerate\n\n* `wget--no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.sh`\n* `chmod +x shadowsocks-libev-debian.sh`\n* `./shadowsocks-libev-debian.sh 2>&1 | tee shadowsocks-libev-debian.log`\n\n### SSStatus\n\n* `/etc/init.d/shadowsocks start` \n* `/etc/init.d/shadowsocks stop` \n* `/etc/init.d/shadowsocks restart` \n* `/etc/init.d/shadowsocks status`\n\n\n\n \n","slug":"SSGenerate","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck05d9e510006js4ap0it1wfh","content":"<h3 id=\"Mac-finalShell\"><a href=\"#Mac-finalShell\" class=\"headerlink\" title=\"Mac finalShell\"></a>Mac finalShell</h3><ul>\n<li>execute<code>ssh-keygen -t rsa -f rsaSavePath -C whoiam</code></li>\n<li>add .pub(full txt) to GCP sshkey</li>\n<li>finalShell add rsa path</li>\n</ul>\n<h3 id=\"Mac-terminal\"><a href=\"#Mac-terminal\" class=\"headerlink\" title=\"Mac terminal\"></a>Mac terminal</h3><ul>\n<li><code>ssh -i rsaSavePath whoiam@ip</code></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"SSGenerate\"><a href=\"#SSGenerate\" class=\"headerlink\" title=\"SSGenerate\"></a>SSGenerate</h3><ul>\n<li><code>wget--no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.sh</code></li>\n<li><code>chmod +x shadowsocks-libev-debian.sh</code></li>\n<li><code>./shadowsocks-libev-debian.sh 2&gt;&amp;1 | tee shadowsocks-libev-debian.log</code></li>\n</ul>\n<h3 id=\"SSStatus\"><a href=\"#SSStatus\" class=\"headerlink\" title=\"SSStatus\"></a>SSStatus</h3><ul>\n<li><code>/etc/init.d/shadowsocks start</code> </li>\n<li><code>/etc/init.d/shadowsocks stop</code> </li>\n<li><code>/etc/init.d/shadowsocks restart</code> </li>\n<li><code>/etc/init.d/shadowsocks status</code></li>\n</ul>\n","site":{"data":{}},"length":554,"excerpt":"<h3 id=\"Mac-finalShell\"><a href=\"#Mac-finalShell\" class=\"headerlink\" title=\"Mac finalShell\"></a>Mac finalShell</h3><ul>\n<li>execute<code>ssh-keygen -t rsa -f rsaSavePath -C whoiam</code></li>\n<li>add .pub(full txt) to GCP sshkey</li>\n<li>finalShell add rsa path</li>\n</ul>\n<h3 id=\"Mac-terminal\"><a href=\"#Mac-terminal\" class=\"headerlink\" title=\"Mac terminal\"></a>Mac terminal</h3><ul>\n<li><code>ssh -i rsaSavePath whoiam@ip</code></li>\n</ul>","more":"<h3 id=\"SSGenerate\"><a href=\"#SSGenerate\" class=\"headerlink\" title=\"SSGenerate\"></a>SSGenerate</h3><ul>\n<li><code>wget--no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.sh</code></li>\n<li><code>chmod +x shadowsocks-libev-debian.sh</code></li>\n<li><code>./shadowsocks-libev-debian.sh 2&gt;&amp;1 | tee shadowsocks-libev-debian.log</code></li>\n</ul>\n<h3 id=\"SSStatus\"><a href=\"#SSStatus\" class=\"headerlink\" title=\"SSStatus\"></a>SSStatus</h3><ul>\n<li><code>/etc/init.d/shadowsocks start</code> </li>\n<li><code>/etc/init.d/shadowsocks stop</code> </li>\n<li><code>/etc/init.d/shadowsocks restart</code> </li>\n<li><code>/etc/init.d/shadowsocks status</code></li>\n</ul>"},{"title":"Shadowsocks update","urlPath":"Shadowsocks","date":"2018-03-20T16:00:00.000Z","updated":"2019-06-03T16:00:00.000Z","_content":"\n### Shadowsocks update\n\n> Updated date：2019-06-04   \n> IP：34.92.33.182     \n> 端口：1973    \n> 密碼：henvy  \n> 加密：rc4-md5\n\n<!-- more -->\n\n> Updated date：2019-03-13   \n> <del> IP：34.80.77.189</del>       \n> <del>端口：3777<del>  \n> 密碼：henvy  \n> 加密：rc4-md5\n   \n<!-- more -->\n      \n> Updated date：2018-07-04  \n> <del> IP：207.148.101.250</del>       \n> <del>端口：8003    \n> 密碼：henvy  \n> 加密：rc4-md5\n\n","source":"_posts/Shadowsocks.md","raw":"---\ntitle: Shadowsocks update\nurlPath: Shadowsocks\ndate: 2018-03-21\nupdated: 2019-06-04\ntag: Shadowsocks\n\n---\n\n### Shadowsocks update\n\n> Updated date：2019-06-04   \n> IP：34.92.33.182     \n> 端口：1973    \n> 密碼：henvy  \n> 加密：rc4-md5\n\n<!-- more -->\n\n> Updated date：2019-03-13   \n> <del> IP：34.80.77.189</del>       \n> <del>端口：3777<del>  \n> 密碼：henvy  \n> 加密：rc4-md5\n   \n<!-- more -->\n      \n> Updated date：2018-07-04  \n> <del> IP：207.148.101.250</del>       \n> <del>端口：8003    \n> 密碼：henvy  \n> 加密：rc4-md5\n\n","slug":"Shadowsocks","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck05d9e530007js4aysp1w1kx","content":"<h3 id=\"Shadowsocks-update\"><a href=\"#Shadowsocks-update\" class=\"headerlink\" title=\"Shadowsocks update\"></a>Shadowsocks update</h3><blockquote>\n<p>Updated date：2019-06-04<br>IP：34.92.33.182<br>端口：1973<br>密碼：henvy<br>加密：rc4-md5</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>Updated date：2019-03-13<br><del> IP：34.80.77.189</del><br><del>端口：3777<del><br>密碼：henvy<br>加密：rc4-md5</del></del></p>\n</blockquote>\n<!-- more -->\n\n<blockquote>\n<p>Updated date：2018-07-04<br><del> IP：207.148.101.250</del><br><del>端口：8003<br>密碼：henvy<br>加密：rc4-md5</del></p>\n</blockquote>\n","site":{"data":{}},"length":225,"excerpt":"<h3 id=\"Shadowsocks-update\"><a href=\"#Shadowsocks-update\" class=\"headerlink\" title=\"Shadowsocks update\"></a>Shadowsocks update</h3><blockquote>\n<p>Updated date：2019-06-04<br>IP：34.92.33.182<br>端口：1973<br>密碼：henvy<br>加密：rc4-md5</p>\n</blockquote>","more":"<blockquote>\n<p>Updated date：2019-03-13<br><del> IP：34.80.77.189</del><br><del>端口：3777<del><br>密碼：henvy<br>加密：rc4-md5</del></del></p>\n</blockquote>\n<!-- more -->\n\n<blockquote>\n<p>Updated date：2018-07-04<br><del> IP：207.148.101.250</del><br><del>端口：8003<br>密碼：henvy<br>加密：rc4-md5</del></p>\n</blockquote>"},{"title":"Ubuntu VNC Gnome","urlPath":"ubuntu-vnc-gnome","date":"2019-06-05T16:00:00.000Z","updated":"2019-06-05T16:00:00.000Z","_content":"\n### SSH Login\n* `ssh root@ip`\n* `apt upgrade -y`\n\n### Gnome 2\n* Complete installation\n `apt install ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -y`\n\n* Incomplete installation `apt-get install --no-install-recommends ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -y`\n\n<!-- more -->\n\n### VNC\n\n* `apt install vnc4server -y`\n* `vncserver :1`\n* `vncserver -kill :1`\n* `vim /etc/vnc/xstartup`\n* find `x-window-manager & `line add\n `gnome-panel &`\n`gnome-settings-daemon &`\n`metacity &`\n`nautilus &`\n* full config\n\n```\n#!/bin/sh\n \t \n \t# Uncomment the following two lines for normal desktop:\n \t# unset SESSION_MANAGER\n \t# exec /etc/X11/xinit/xinitrc\n \t \n \t[ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup\n \t[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources\n \txsetroot -solid grey \n \tvncconfig -iconic &\n \tx-terminal-emulator -geometry 80x24+10+10 -ls -title \"$VNCDESKTOP Desktop\" &\n \tx-window-manager &\n \tgnome-panel &\n \tgnome-settings-daemon &\n \tmetacity &\n \tnautilus &\n```\n### Mac VNC\n* `ip: displayId`\n\n### Too many security failures\n* kill vncserver\n   * `vncserver -kill :1`\n   * `vncserver :1`\n\n* reset blacklist\n   * `vncconfig -display :1 -set BlacklistTimeout=0 -set BlacklistThreshold=1000000`\n   * `vncconfig -display :1 -set BlacklistTimeout=100000000000 -set BlacklistThreshold=10`\n\n\n \n","source":"_posts/Ubuntu VNC Gnome.md","raw":"---\n\ntitle: Ubuntu VNC Gnome\nurlPath: ubuntu-vnc-gnome\ndate: 2019-06-06\nupdated: 2019-06-06\ntag: [Ubuntu, linux, Gnome, VNC]\n\n---\n\n### SSH Login\n* `ssh root@ip`\n* `apt upgrade -y`\n\n### Gnome 2\n* Complete installation\n `apt install ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -y`\n\n* Incomplete installation `apt-get install --no-install-recommends ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -y`\n\n<!-- more -->\n\n### VNC\n\n* `apt install vnc4server -y`\n* `vncserver :1`\n* `vncserver -kill :1`\n* `vim /etc/vnc/xstartup`\n* find `x-window-manager & `line add\n `gnome-panel &`\n`gnome-settings-daemon &`\n`metacity &`\n`nautilus &`\n* full config\n\n```\n#!/bin/sh\n \t \n \t# Uncomment the following two lines for normal desktop:\n \t# unset SESSION_MANAGER\n \t# exec /etc/X11/xinit/xinitrc\n \t \n \t[ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup\n \t[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources\n \txsetroot -solid grey \n \tvncconfig -iconic &\n \tx-terminal-emulator -geometry 80x24+10+10 -ls -title \"$VNCDESKTOP Desktop\" &\n \tx-window-manager &\n \tgnome-panel &\n \tgnome-settings-daemon &\n \tmetacity &\n \tnautilus &\n```\n### Mac VNC\n* `ip: displayId`\n\n### Too many security failures\n* kill vncserver\n   * `vncserver -kill :1`\n   * `vncserver :1`\n\n* reset blacklist\n   * `vncconfig -display :1 -set BlacklistTimeout=0 -set BlacklistThreshold=1000000`\n   * `vncconfig -display :1 -set BlacklistTimeout=100000000000 -set BlacklistThreshold=10`\n\n\n \n","slug":"Ubuntu VNC Gnome","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck05d9e560009js4ap5brsawr","content":"<h3 id=\"SSH-Login\"><a href=\"#SSH-Login\" class=\"headerlink\" title=\"SSH Login\"></a>SSH Login</h3><ul>\n<li><code>ssh root@ip</code></li>\n<li><code>apt upgrade -y</code></li>\n</ul>\n<h3 id=\"Gnome-2\"><a href=\"#Gnome-2\" class=\"headerlink\" title=\"Gnome 2\"></a>Gnome 2</h3><ul>\n<li><p>Complete installation<br><code>apt install ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -y</code></p>\n</li>\n<li><p>Incomplete installation <code>apt-get install --no-install-recommends ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -y</code></p>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"VNC\"><a href=\"#VNC\" class=\"headerlink\" title=\"VNC\"></a>VNC</h3><ul>\n<li><code>apt install vnc4server -y</code></li>\n<li><code>vncserver :1</code></li>\n<li><code>vncserver -kill :1</code></li>\n<li><code>vim /etc/vnc/xstartup</code></li>\n<li>find <code>x-window-manager &amp;</code>line add<br><code>gnome-panel &amp;</code><br><code>gnome-settings-daemon &amp;</code><br><code>metacity &amp;</code><br><code>nautilus &amp;</code></li>\n<li>full config</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"> \t </span><br><span class=\"line\"> \t# Uncomment the following two lines for normal desktop:</span><br><span class=\"line\"> \t# unset SESSION_MANAGER</span><br><span class=\"line\"> \t# exec /etc/X11/xinit/xinitrc</span><br><span class=\"line\"> \t </span><br><span class=\"line\"> \t[ -x /etc/vnc/xstartup ] &amp;&amp; exec /etc/vnc/xstartup</span><br><span class=\"line\"> \t[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresources</span><br><span class=\"line\"> \txsetroot -solid grey </span><br><span class=\"line\"> \tvncconfig -iconic &amp;</span><br><span class=\"line\"> \tx-terminal-emulator -geometry 80x24+10+10 -ls -title &quot;$VNCDESKTOP Desktop&quot; &amp;</span><br><span class=\"line\"> \tx-window-manager &amp;</span><br><span class=\"line\"> \tgnome-panel &amp;</span><br><span class=\"line\"> \tgnome-settings-daemon &amp;</span><br><span class=\"line\"> \tmetacity &amp;</span><br><span class=\"line\"> \tnautilus &amp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mac-VNC\"><a href=\"#Mac-VNC\" class=\"headerlink\" title=\"Mac VNC\"></a>Mac VNC</h3><ul>\n<li><code>ip: displayId</code></li>\n</ul>\n<h3 id=\"Too-many-security-failures\"><a href=\"#Too-many-security-failures\" class=\"headerlink\" title=\"Too many security failures\"></a>Too many security failures</h3><ul>\n<li><p>kill vncserver</p>\n<ul>\n<li><code>vncserver -kill :1</code></li>\n<li><code>vncserver :1</code></li>\n</ul>\n</li>\n<li><p>reset blacklist</p>\n<ul>\n<li><code>vncconfig -display :1 -set BlacklistTimeout=0 -set BlacklistThreshold=1000000</code></li>\n<li><code>vncconfig -display :1 -set BlacklistTimeout=100000000000 -set BlacklistThreshold=10</code></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"length":1299,"excerpt":"<h3 id=\"SSH-Login\"><a href=\"#SSH-Login\" class=\"headerlink\" title=\"SSH Login\"></a>SSH Login</h3><ul>\n<li><code>ssh root@ip</code></li>\n<li><code>apt upgrade -y</code></li>\n</ul>\n<h3 id=\"Gnome-2\"><a href=\"#Gnome-2\" class=\"headerlink\" title=\"Gnome 2\"></a>Gnome 2</h3><ul>\n<li><p>Complete installation<br><code>apt install ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -y</code></p>\n</li>\n<li><p>Incomplete installation <code>apt-get install --no-install-recommends ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -y</code></p>\n</li>\n</ul>","more":"<h3 id=\"VNC\"><a href=\"#VNC\" class=\"headerlink\" title=\"VNC\"></a>VNC</h3><ul>\n<li><code>apt install vnc4server -y</code></li>\n<li><code>vncserver :1</code></li>\n<li><code>vncserver -kill :1</code></li>\n<li><code>vim /etc/vnc/xstartup</code></li>\n<li>find <code>x-window-manager &amp;</code>line add<br><code>gnome-panel &amp;</code><br><code>gnome-settings-daemon &amp;</code><br><code>metacity &amp;</code><br><code>nautilus &amp;</code></li>\n<li>full config</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"> \t </span><br><span class=\"line\"> \t# Uncomment the following two lines for normal desktop:</span><br><span class=\"line\"> \t# unset SESSION_MANAGER</span><br><span class=\"line\"> \t# exec /etc/X11/xinit/xinitrc</span><br><span class=\"line\"> \t </span><br><span class=\"line\"> \t[ -x /etc/vnc/xstartup ] &amp;&amp; exec /etc/vnc/xstartup</span><br><span class=\"line\"> \t[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresources</span><br><span class=\"line\"> \txsetroot -solid grey </span><br><span class=\"line\"> \tvncconfig -iconic &amp;</span><br><span class=\"line\"> \tx-terminal-emulator -geometry 80x24+10+10 -ls -title &quot;$VNCDESKTOP Desktop&quot; &amp;</span><br><span class=\"line\"> \tx-window-manager &amp;</span><br><span class=\"line\"> \tgnome-panel &amp;</span><br><span class=\"line\"> \tgnome-settings-daemon &amp;</span><br><span class=\"line\"> \tmetacity &amp;</span><br><span class=\"line\"> \tnautilus &amp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mac-VNC\"><a href=\"#Mac-VNC\" class=\"headerlink\" title=\"Mac VNC\"></a>Mac VNC</h3><ul>\n<li><code>ip: displayId</code></li>\n</ul>\n<h3 id=\"Too-many-security-failures\"><a href=\"#Too-many-security-failures\" class=\"headerlink\" title=\"Too many security failures\"></a>Too many security failures</h3><ul>\n<li><p>kill vncserver</p>\n<ul>\n<li><code>vncserver -kill :1</code></li>\n<li><code>vncserver :1</code></li>\n</ul>\n</li>\n<li><p>reset blacklist</p>\n<ul>\n<li><code>vncconfig -display :1 -set BlacklistTimeout=0 -set BlacklistThreshold=1000000</code></li>\n<li><code>vncconfig -display :1 -set BlacklistTimeout=100000000000 -set BlacklistThreshold=10</code></li>\n</ul>\n</li>\n</ul>"},{"title":"github+hexo提交到百度谷歌搜索引擎","urlPath":"github&hexo","date":"2016-12-16T16:00:00.000Z","updated":"2016-12-16T16:00:00.000Z","_content":"## 前言\n前些日子用GitHub Pages+hexo搭建了一个网站，后来发现百度谷歌都是无法搜索到我的网站上的内容。\n\n## 确认收录情况\n在百度或者谷歌上面输入下面格式来判断，如果能搜索到就说明被收录，否则就没有.\n\n<!-- more -->\n\n    \n    site:henvyluk.com\n![](http://p1.bqimg.com/4851/d8f8483a9ed400da.png)\n## 1、验证网站\n验证网站的目的说白了就是证明这个网站是你的，这是你使用站长平台更多功能的前提条件，另外没有梯子的童鞋可以看这里[shadowsocks](http://www.ishadowsocks.info)当然如果你有自己的或者不需要谷歌搜索可以忽略。下面是两个搜索引擎入口：\n\n* [Google搜索引擎提交入口](https://www.google.com/webmasters/tools/home?hl=zh-CN)\n* [百度搜索引擎提交入口](http://zhanzhang.baidu.com/linksubmit/url)\n\n\n百度站长平台为未使用百度统计的站点提供三种验证方式：文件验证、html标签验证、CNAME验证，应该说文件和CNAME验证较为简单，我这里统一使用CNAME验证。\n\n* 文件验证：您需要下载验证文件，将文件上传至您的服务器，放置于域名根目录下。\n* html标签验证：将html标签添加至网站首页html代码的<head>标签与</head>标签之间。\n* CNAME验证：您需要登录域名提供商或托管服务提供商的网站，添加新的DNS记录。\n\nCNAME验证需要到你的域名商站点添加DNS解析即可，主机和指向百度已经给你了的，我的域名是在[godaddy](https://sg.godaddy.com/zh/)上，分别添加主机和指向如图下：\n![添加CNAME](http://i1.piimg.com/4851/603534cdc827a654.png)\n然后点完成验证即可：\n![通过验证](http://i1.piimg.com/4851/3504a089e48f703a.png)\n\n谷歌的就更简单了，直接点验证，等待自动验证结束即可。\n\n![谷歌验证](http://i1.piimg.com/4851/add226355d0ea30f.png)\n\n## 2、站点地图\n站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。\n\n首先在hexo根目录分别安装百度谷歌的站点地图文件：\n\n    npm install hexo-generator-sitemap --save\n    npm install hexo-generator-baidu-sitemap --save\n在博客目录的_config.yml中添加路径：\n   \n    //自动生成sitemap\n    sitemap:\n    path: sitemap.xml\n    baidusitemap:\n    path: baidusitemap.xml\n接下来编译：\n\n    hexo g\n    \n此时会发现在public下面发现生成了sitemap.xml以及baidusitemap.xml文件，可以看一下这两个文件，大致就是你的域名下的几篇文章的链接，如果不是以你的域名（github），github禁止了百度爬虫，提交了百度也是不会访问的，所以需要改为你自己的域名，我这里自动生成的是我自己的，接下来部署：\n\n    hexo d\n部署成功后分别访问：\n\n    http://henvyluk.com/sitemap.xml\n    http://henvyluk.com/baidusitemap.xml\n\n## 3、谷歌收录\n让谷歌收录我们的博客直接向[Google站长工具](https://www.google.com/webmasters/tools)提交sitemap文件即可，登录谷歌账号，选择当前站点，左边一栏抓取-站点地图-添加站点地图即可，相信谷歌的效率，明天你的站点谷歌就搜索得到了。\n\n![添加站点地图](http://i1.piimg.com/4851/23774a2e7364ec72.png\n)\n## 4、百度收录\n谷歌的不要太简单，百度就稍微麻烦一点，分为四种方式来提交你的链接，\n\n* 主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。\n* 自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。\n* sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。\n* 手动提交：一次性提交链接给百度，可以使用此种方式。\n比较推荐前三种提交方式，从效率上来说，接下来依次讲解：\n\n\n        主动推送>自动推送>sitemap\n### 主动推送\n主动推送官网上也有说明，不过需要一定的代码功底，我这里通过第三方写好的一个插件来做说明，首先，在Hexo根目录下，安装插件：\n\n        npm install hexo-baidu-url-submit --save\n然后，同样在根目录下，把以下内容配置到_config.yml文件中:\n\n        baidu_url_submit:\n        count: 3 ## 比如3，代表提交最新的三个链接\n        host: www.henvyluk.com ## 在百度站长平台中注册的域名\n        token: your_token ## 请注意这是您的秘钥， 请不要发布在公众仓库里!\n        path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里\n其次，记得查看_config.ym文件中url的值， 必须包含是百度站长平台注册的域名（一般有www）， 比如:\n\n        # URL\n        url: http://www.henvyluk.com\n        root: /\n        permalink: :year/:month/:day/:title/\n接下来添加一个新的deploy 的类型，用减号区分：\n\n        deploy:\n        - type: git\n        repository: https://github.com/henvyluk/henvyluk.github.io\n        branch: master\n        - type: baidu_url_submitter\n执行hexo deploy的时候，新的连接就会被推送了。这里讲一下原理：\n* 新链接的产生， hexo generate 会产生一个文本文件，里面包含最新的链接\n* 新链接的提交， hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎 \n\n### 自动推送\n如果是next主题，next主题配置文件中的baidu_push设置为true，就可以了。我的并不是next主题，我用的是icarus，这就要想办法塞进以下的全站点js代码：\n\n    <script>\n    (function(){\n    var bp = document.createElement('script');\n    var curProtocol = window.location.protocol.split(':')[0];\n    if (curProtocol === 'https') {\n        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        \n    }\n    else {\n        bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n    })();\n    </script>\n    \n一般在以下目录加入中加入即可，\n    \n    blog\\themes\\xxxx\\layout\\_partial\\head.ejs\n我的是在\n\n    blog\\themes\\icarus\\layout\\common\\head.ejs\n\n### sitemap\nsitemap很简单直接提交[http://henvyluk.com/baidusitemap.xml](http://henvyluk.com/baidusitemap.xml)就可以了\n![sitemap](http://p1.bqimg.com/4851/e66a07fdbb0fb1ff.png)\n\n## 5、写在最后\n相比较百度还是要比谷歌慢，总体谷歌提交简单的太多了，谷歌第二天就可以搜索到网站内容，百度不太给力，也使得这篇文章托到了现在，大致的提交流程就是这样，再会！\n\n","source":"_posts/github-hexo提交到百度谷歌搜索引擎.md","raw":"---\ntitle: github+hexo提交到百度谷歌搜索引擎\nurlPath: github&hexo\ndate: 2016-12-17 \nupdated: 2016-12-17\n---\n## 前言\n前些日子用GitHub Pages+hexo搭建了一个网站，后来发现百度谷歌都是无法搜索到我的网站上的内容。\n\n## 确认收录情况\n在百度或者谷歌上面输入下面格式来判断，如果能搜索到就说明被收录，否则就没有.\n\n<!-- more -->\n\n    \n    site:henvyluk.com\n![](http://p1.bqimg.com/4851/d8f8483a9ed400da.png)\n## 1、验证网站\n验证网站的目的说白了就是证明这个网站是你的，这是你使用站长平台更多功能的前提条件，另外没有梯子的童鞋可以看这里[shadowsocks](http://www.ishadowsocks.info)当然如果你有自己的或者不需要谷歌搜索可以忽略。下面是两个搜索引擎入口：\n\n* [Google搜索引擎提交入口](https://www.google.com/webmasters/tools/home?hl=zh-CN)\n* [百度搜索引擎提交入口](http://zhanzhang.baidu.com/linksubmit/url)\n\n\n百度站长平台为未使用百度统计的站点提供三种验证方式：文件验证、html标签验证、CNAME验证，应该说文件和CNAME验证较为简单，我这里统一使用CNAME验证。\n\n* 文件验证：您需要下载验证文件，将文件上传至您的服务器，放置于域名根目录下。\n* html标签验证：将html标签添加至网站首页html代码的<head>标签与</head>标签之间。\n* CNAME验证：您需要登录域名提供商或托管服务提供商的网站，添加新的DNS记录。\n\nCNAME验证需要到你的域名商站点添加DNS解析即可，主机和指向百度已经给你了的，我的域名是在[godaddy](https://sg.godaddy.com/zh/)上，分别添加主机和指向如图下：\n![添加CNAME](http://i1.piimg.com/4851/603534cdc827a654.png)\n然后点完成验证即可：\n![通过验证](http://i1.piimg.com/4851/3504a089e48f703a.png)\n\n谷歌的就更简单了，直接点验证，等待自动验证结束即可。\n\n![谷歌验证](http://i1.piimg.com/4851/add226355d0ea30f.png)\n\n## 2、站点地图\n站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。\n\n首先在hexo根目录分别安装百度谷歌的站点地图文件：\n\n    npm install hexo-generator-sitemap --save\n    npm install hexo-generator-baidu-sitemap --save\n在博客目录的_config.yml中添加路径：\n   \n    //自动生成sitemap\n    sitemap:\n    path: sitemap.xml\n    baidusitemap:\n    path: baidusitemap.xml\n接下来编译：\n\n    hexo g\n    \n此时会发现在public下面发现生成了sitemap.xml以及baidusitemap.xml文件，可以看一下这两个文件，大致就是你的域名下的几篇文章的链接，如果不是以你的域名（github），github禁止了百度爬虫，提交了百度也是不会访问的，所以需要改为你自己的域名，我这里自动生成的是我自己的，接下来部署：\n\n    hexo d\n部署成功后分别访问：\n\n    http://henvyluk.com/sitemap.xml\n    http://henvyluk.com/baidusitemap.xml\n\n## 3、谷歌收录\n让谷歌收录我们的博客直接向[Google站长工具](https://www.google.com/webmasters/tools)提交sitemap文件即可，登录谷歌账号，选择当前站点，左边一栏抓取-站点地图-添加站点地图即可，相信谷歌的效率，明天你的站点谷歌就搜索得到了。\n\n![添加站点地图](http://i1.piimg.com/4851/23774a2e7364ec72.png\n)\n## 4、百度收录\n谷歌的不要太简单，百度就稍微麻烦一点，分为四种方式来提交你的链接，\n\n* 主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。\n* 自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。\n* sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。\n* 手动提交：一次性提交链接给百度，可以使用此种方式。\n比较推荐前三种提交方式，从效率上来说，接下来依次讲解：\n\n\n        主动推送>自动推送>sitemap\n### 主动推送\n主动推送官网上也有说明，不过需要一定的代码功底，我这里通过第三方写好的一个插件来做说明，首先，在Hexo根目录下，安装插件：\n\n        npm install hexo-baidu-url-submit --save\n然后，同样在根目录下，把以下内容配置到_config.yml文件中:\n\n        baidu_url_submit:\n        count: 3 ## 比如3，代表提交最新的三个链接\n        host: www.henvyluk.com ## 在百度站长平台中注册的域名\n        token: your_token ## 请注意这是您的秘钥， 请不要发布在公众仓库里!\n        path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里\n其次，记得查看_config.ym文件中url的值， 必须包含是百度站长平台注册的域名（一般有www）， 比如:\n\n        # URL\n        url: http://www.henvyluk.com\n        root: /\n        permalink: :year/:month/:day/:title/\n接下来添加一个新的deploy 的类型，用减号区分：\n\n        deploy:\n        - type: git\n        repository: https://github.com/henvyluk/henvyluk.github.io\n        branch: master\n        - type: baidu_url_submitter\n执行hexo deploy的时候，新的连接就会被推送了。这里讲一下原理：\n* 新链接的产生， hexo generate 会产生一个文本文件，里面包含最新的链接\n* 新链接的提交， hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎 \n\n### 自动推送\n如果是next主题，next主题配置文件中的baidu_push设置为true，就可以了。我的并不是next主题，我用的是icarus，这就要想办法塞进以下的全站点js代码：\n\n    <script>\n    (function(){\n    var bp = document.createElement('script');\n    var curProtocol = window.location.protocol.split(':')[0];\n    if (curProtocol === 'https') {\n        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        \n    }\n    else {\n        bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n    })();\n    </script>\n    \n一般在以下目录加入中加入即可，\n    \n    blog\\themes\\xxxx\\layout\\_partial\\head.ejs\n我的是在\n\n    blog\\themes\\icarus\\layout\\common\\head.ejs\n\n### sitemap\nsitemap很简单直接提交[http://henvyluk.com/baidusitemap.xml](http://henvyluk.com/baidusitemap.xml)就可以了\n![sitemap](http://p1.bqimg.com/4851/e66a07fdbb0fb1ff.png)\n\n## 5、写在最后\n相比较百度还是要比谷歌慢，总体谷歌提交简单的太多了，谷歌第二天就可以搜索到网站内容，百度不太给力，也使得这篇文章托到了现在，大致的提交流程就是这样，再会！\n\n","slug":"github-hexo提交到百度谷歌搜索引擎","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck05d9e59000ajs4a5ldkbamc","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前些日子用GitHub Pages+hexo搭建了一个网站，后来发现百度谷歌都是无法搜索到我的网站上的内容。</p>\n<h2 id=\"确认收录情况\"><a href=\"#确认收录情况\" class=\"headerlink\" title=\"确认收录情况\"></a>确认收录情况</h2><p>在百度或者谷歌上面输入下面格式来判断，如果能搜索到就说明被收录，否则就没有.</p>\n<a id=\"more\"></a>\n\n\n<pre><code>site:henvyluk.com</code></pre><p><img src=\"http://p1.bqimg.com/4851/d8f8483a9ed400da.png\" alt></p>\n<h2 id=\"1、验证网站\"><a href=\"#1、验证网站\" class=\"headerlink\" title=\"1、验证网站\"></a>1、验证网站</h2><p>验证网站的目的说白了就是证明这个网站是你的，这是你使用站长平台更多功能的前提条件，另外没有梯子的童鞋可以看这里<a href=\"http://www.ishadowsocks.info\" target=\"_blank\" rel=\"noopener\">shadowsocks</a>当然如果你有自己的或者不需要谷歌搜索可以忽略。下面是两个搜索引擎入口：</p>\n<ul>\n<li><a href=\"https://www.google.com/webmasters/tools/home?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">Google搜索引擎提交入口</a></li>\n<li><a href=\"http://zhanzhang.baidu.com/linksubmit/url\" target=\"_blank\" rel=\"noopener\">百度搜索引擎提交入口</a></li>\n</ul>\n<p>百度站长平台为未使用百度统计的站点提供三种验证方式：文件验证、html标签验证、CNAME验证，应该说文件和CNAME验证较为简单，我这里统一使用CNAME验证。</p>\n<ul>\n<li>文件验证：您需要下载验证文件，将文件上传至您的服务器，放置于域名根目录下。</li>\n<li>html标签验证：将html标签添加至网站首页html代码的<head><meta name=\"generator\" content=\"Hexo 3.8.0\">标签与</head>标签之间。</li>\n<li>CNAME验证：您需要登录域名提供商或托管服务提供商的网站，添加新的DNS记录。</li>\n</ul>\n<p>CNAME验证需要到你的域名商站点添加DNS解析即可，主机和指向百度已经给你了的，我的域名是在<a href=\"https://sg.godaddy.com/zh/\" target=\"_blank\" rel=\"noopener\">godaddy</a>上，分别添加主机和指向如图下：<br><img src=\"http://i1.piimg.com/4851/603534cdc827a654.png\" alt=\"添加CNAME\"><br>然后点完成验证即可：<br><img src=\"http://i1.piimg.com/4851/3504a089e48f703a.png\" alt=\"通过验证\"></p>\n<p>谷歌的就更简单了，直接点验证，等待自动验证结束即可。</p>\n<p><img src=\"http://i1.piimg.com/4851/add226355d0ea30f.png\" alt=\"谷歌验证\"></p>\n<h2 id=\"2、站点地图\"><a href=\"#2、站点地图\" class=\"headerlink\" title=\"2、站点地图\"></a>2、站点地图</h2><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p>\n<p>首先在hexo根目录分别安装百度谷歌的站点地图文件：</p>\n<pre><code>npm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save</code></pre><p>在博客目录的_config.yml中添加路径：</p>\n<pre><code>//自动生成sitemap\nsitemap:\npath: sitemap.xml\nbaidusitemap:\npath: baidusitemap.xml</code></pre><p>接下来编译：</p>\n<pre><code>hexo g</code></pre><p>此时会发现在public下面发现生成了sitemap.xml以及baidusitemap.xml文件，可以看一下这两个文件，大致就是你的域名下的几篇文章的链接，如果不是以你的域名（github），github禁止了百度爬虫，提交了百度也是不会访问的，所以需要改为你自己的域名，我这里自动生成的是我自己的，接下来部署：</p>\n<pre><code>hexo d</code></pre><p>部署成功后分别访问：</p>\n<pre><code>http://henvyluk.com/sitemap.xml\nhttp://henvyluk.com/baidusitemap.xml</code></pre><h2 id=\"3、谷歌收录\"><a href=\"#3、谷歌收录\" class=\"headerlink\" title=\"3、谷歌收录\"></a>3、谷歌收录</h2><p>让谷歌收录我们的博客直接向<a href=\"https://www.google.com/webmasters/tools\" target=\"_blank\" rel=\"noopener\">Google站长工具</a>提交sitemap文件即可，登录谷歌账号，选择当前站点，左边一栏抓取-站点地图-添加站点地图即可，相信谷歌的效率，明天你的站点谷歌就搜索得到了。</p>\n<p><img src=\"http://i1.piimg.com/4851/23774a2e7364ec72.png\" alt=\"添加站点地图\"></p>\n<h2 id=\"4、百度收录\"><a href=\"#4、百度收录\" class=\"headerlink\" title=\"4、百度收录\"></a>4、百度收录</h2><p>谷歌的不要太简单，百度就稍微麻烦一点，分为四种方式来提交你的链接，</p>\n<ul>\n<li>主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</li>\n<li>自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。</li>\n<li>sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。</li>\n<li>手动提交：一次性提交链接给百度，可以使用此种方式。<br>比较推荐前三种提交方式，从效率上来说，接下来依次讲解：</li>\n</ul>\n<pre><code>主动推送&gt;自动推送&gt;sitemap</code></pre><h3 id=\"主动推送\"><a href=\"#主动推送\" class=\"headerlink\" title=\"主动推送\"></a>主动推送</h3><p>主动推送官网上也有说明，不过需要一定的代码功底，我这里通过第三方写好的一个插件来做说明，首先，在Hexo根目录下，安装插件：</p>\n<pre><code>npm install hexo-baidu-url-submit --save</code></pre><p>然后，同样在根目录下，把以下内容配置到_config.yml文件中:</p>\n<pre><code>baidu_url_submit:\ncount: 3 ## 比如3，代表提交最新的三个链接\nhost: www.henvyluk.com ## 在百度站长平台中注册的域名\ntoken: your_token ## 请注意这是您的秘钥， 请不要发布在公众仓库里!\npath: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里</code></pre><p>其次，记得查看_config.ym文件中url的值， 必须包含是百度站长平台注册的域名（一般有www）， 比如:</p>\n<pre><code># URL\nurl: http://www.henvyluk.com\nroot: /\npermalink: :year/:month/:day/:title/</code></pre><p>接下来添加一个新的deploy 的类型，用减号区分：</p>\n<pre><code>deploy:\n- type: git\nrepository: https://github.com/henvyluk/henvyluk.github.io\nbranch: master\n- type: baidu_url_submitter</code></pre><p>执行hexo deploy的时候，新的连接就会被推送了。这里讲一下原理：</p>\n<ul>\n<li>新链接的产生， hexo generate 会产生一个文本文件，里面包含最新的链接</li>\n<li>新链接的提交， hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎 </li>\n</ul>\n<h3 id=\"自动推送\"><a href=\"#自动推送\" class=\"headerlink\" title=\"自动推送\"></a>自动推送</h3><p>如果是next主题，next主题配置文件中的baidu_push设置为true，就可以了。我的并不是next主题，我用的是icarus，这就要想办法塞进以下的全站点js代码：</p>\n<pre><code>&lt;script&gt;\n(function(){\nvar bp = document.createElement(&apos;script&apos;);\nvar curProtocol = window.location.protocol.split(&apos;:&apos;)[0];\nif (curProtocol === &apos;https&apos;) {\n    bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;;        \n}\nelse {\n    bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;;\n}\nvar s = document.getElementsByTagName(&quot;script&quot;)[0];\ns.parentNode.insertBefore(bp, s);\n})();\n&lt;/script&gt;</code></pre><p>一般在以下目录加入中加入即可，</p>\n<pre><code>blog\\themes\\xxxx\\layout\\_partial\\head.ejs</code></pre><p>我的是在</p>\n<pre><code>blog\\themes\\icarus\\layout\\common\\head.ejs</code></pre><h3 id=\"sitemap\"><a href=\"#sitemap\" class=\"headerlink\" title=\"sitemap\"></a>sitemap</h3><p>sitemap很简单直接提交<a href=\"http://henvyluk.com/baidusitemap.xml\" target=\"_blank\" rel=\"noopener\">http://henvyluk.com/baidusitemap.xml</a>就可以了<br><img src=\"http://p1.bqimg.com/4851/e66a07fdbb0fb1ff.png\" alt=\"sitemap\"></p>\n<h2 id=\"5、写在最后\"><a href=\"#5、写在最后\" class=\"headerlink\" title=\"5、写在最后\"></a>5、写在最后</h2><p>相比较百度还是要比谷歌慢，总体谷歌提交简单的太多了，谷歌第二天就可以搜索到网站内容，百度不太给力，也使得这篇文章托到了现在，大致的提交流程就是这样，再会！</p>\n","site":{"data":{}},"length":3130,"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前些日子用GitHub Pages+hexo搭建了一个网站，后来发现百度谷歌都是无法搜索到我的网站上的内容。</p>\n<h2 id=\"确认收录情况\"><a href=\"#确认收录情况\" class=\"headerlink\" title=\"确认收录情况\"></a>确认收录情况</h2><p>在百度或者谷歌上面输入下面格式来判断，如果能搜索到就说明被收录，否则就没有.</p>","more":"<pre><code>site:henvyluk.com</code></pre><p><img src=\"http://p1.bqimg.com/4851/d8f8483a9ed400da.png\" alt></p>\n<h2 id=\"1、验证网站\"><a href=\"#1、验证网站\" class=\"headerlink\" title=\"1、验证网站\"></a>1、验证网站</h2><p>验证网站的目的说白了就是证明这个网站是你的，这是你使用站长平台更多功能的前提条件，另外没有梯子的童鞋可以看这里<a href=\"http://www.ishadowsocks.info\" target=\"_blank\" rel=\"noopener\">shadowsocks</a>当然如果你有自己的或者不需要谷歌搜索可以忽略。下面是两个搜索引擎入口：</p>\n<ul>\n<li><a href=\"https://www.google.com/webmasters/tools/home?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">Google搜索引擎提交入口</a></li>\n<li><a href=\"http://zhanzhang.baidu.com/linksubmit/url\" target=\"_blank\" rel=\"noopener\">百度搜索引擎提交入口</a></li>\n</ul>\n<p>百度站长平台为未使用百度统计的站点提供三种验证方式：文件验证、html标签验证、CNAME验证，应该说文件和CNAME验证较为简单，我这里统一使用CNAME验证。</p>\n<ul>\n<li>文件验证：您需要下载验证文件，将文件上传至您的服务器，放置于域名根目录下。</li>\n<li>html标签验证：将html标签添加至网站首页html代码的<head><meta name=\"generator\" content=\"Hexo 3.8.0\">标签与</head>标签之间。</li>\n<li>CNAME验证：您需要登录域名提供商或托管服务提供商的网站，添加新的DNS记录。</li>\n</ul>\n<p>CNAME验证需要到你的域名商站点添加DNS解析即可，主机和指向百度已经给你了的，我的域名是在<a href=\"https://sg.godaddy.com/zh/\" target=\"_blank\" rel=\"noopener\">godaddy</a>上，分别添加主机和指向如图下：<br><img src=\"http://i1.piimg.com/4851/603534cdc827a654.png\" alt=\"添加CNAME\"><br>然后点完成验证即可：<br><img src=\"http://i1.piimg.com/4851/3504a089e48f703a.png\" alt=\"通过验证\"></p>\n<p>谷歌的就更简单了，直接点验证，等待自动验证结束即可。</p>\n<p><img src=\"http://i1.piimg.com/4851/add226355d0ea30f.png\" alt=\"谷歌验证\"></p>\n<h2 id=\"2、站点地图\"><a href=\"#2、站点地图\" class=\"headerlink\" title=\"2、站点地图\"></a>2、站点地图</h2><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p>\n<p>首先在hexo根目录分别安装百度谷歌的站点地图文件：</p>\n<pre><code>npm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save</code></pre><p>在博客目录的_config.yml中添加路径：</p>\n<pre><code>//自动生成sitemap\nsitemap:\npath: sitemap.xml\nbaidusitemap:\npath: baidusitemap.xml</code></pre><p>接下来编译：</p>\n<pre><code>hexo g</code></pre><p>此时会发现在public下面发现生成了sitemap.xml以及baidusitemap.xml文件，可以看一下这两个文件，大致就是你的域名下的几篇文章的链接，如果不是以你的域名（github），github禁止了百度爬虫，提交了百度也是不会访问的，所以需要改为你自己的域名，我这里自动生成的是我自己的，接下来部署：</p>\n<pre><code>hexo d</code></pre><p>部署成功后分别访问：</p>\n<pre><code>http://henvyluk.com/sitemap.xml\nhttp://henvyluk.com/baidusitemap.xml</code></pre><h2 id=\"3、谷歌收录\"><a href=\"#3、谷歌收录\" class=\"headerlink\" title=\"3、谷歌收录\"></a>3、谷歌收录</h2><p>让谷歌收录我们的博客直接向<a href=\"https://www.google.com/webmasters/tools\" target=\"_blank\" rel=\"noopener\">Google站长工具</a>提交sitemap文件即可，登录谷歌账号，选择当前站点，左边一栏抓取-站点地图-添加站点地图即可，相信谷歌的效率，明天你的站点谷歌就搜索得到了。</p>\n<p><img src=\"http://i1.piimg.com/4851/23774a2e7364ec72.png\" alt=\"添加站点地图\"></p>\n<h2 id=\"4、百度收录\"><a href=\"#4、百度收录\" class=\"headerlink\" title=\"4、百度收录\"></a>4、百度收录</h2><p>谷歌的不要太简单，百度就稍微麻烦一点，分为四种方式来提交你的链接，</p>\n<ul>\n<li>主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</li>\n<li>自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。</li>\n<li>sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。</li>\n<li>手动提交：一次性提交链接给百度，可以使用此种方式。<br>比较推荐前三种提交方式，从效率上来说，接下来依次讲解：</li>\n</ul>\n<pre><code>主动推送&gt;自动推送&gt;sitemap</code></pre><h3 id=\"主动推送\"><a href=\"#主动推送\" class=\"headerlink\" title=\"主动推送\"></a>主动推送</h3><p>主动推送官网上也有说明，不过需要一定的代码功底，我这里通过第三方写好的一个插件来做说明，首先，在Hexo根目录下，安装插件：</p>\n<pre><code>npm install hexo-baidu-url-submit --save</code></pre><p>然后，同样在根目录下，把以下内容配置到_config.yml文件中:</p>\n<pre><code>baidu_url_submit:\ncount: 3 ## 比如3，代表提交最新的三个链接\nhost: www.henvyluk.com ## 在百度站长平台中注册的域名\ntoken: your_token ## 请注意这是您的秘钥， 请不要发布在公众仓库里!\npath: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里</code></pre><p>其次，记得查看_config.ym文件中url的值， 必须包含是百度站长平台注册的域名（一般有www）， 比如:</p>\n<pre><code># URL\nurl: http://www.henvyluk.com\nroot: /\npermalink: :year/:month/:day/:title/</code></pre><p>接下来添加一个新的deploy 的类型，用减号区分：</p>\n<pre><code>deploy:\n- type: git\nrepository: https://github.com/henvyluk/henvyluk.github.io\nbranch: master\n- type: baidu_url_submitter</code></pre><p>执行hexo deploy的时候，新的连接就会被推送了。这里讲一下原理：</p>\n<ul>\n<li>新链接的产生， hexo generate 会产生一个文本文件，里面包含最新的链接</li>\n<li>新链接的提交， hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎 </li>\n</ul>\n<h3 id=\"自动推送\"><a href=\"#自动推送\" class=\"headerlink\" title=\"自动推送\"></a>自动推送</h3><p>如果是next主题，next主题配置文件中的baidu_push设置为true，就可以了。我的并不是next主题，我用的是icarus，这就要想办法塞进以下的全站点js代码：</p>\n<pre><code>&lt;script&gt;\n(function(){\nvar bp = document.createElement(&apos;script&apos;);\nvar curProtocol = window.location.protocol.split(&apos;:&apos;)[0];\nif (curProtocol === &apos;https&apos;) {\n    bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;;        \n}\nelse {\n    bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;;\n}\nvar s = document.getElementsByTagName(&quot;script&quot;)[0];\ns.parentNode.insertBefore(bp, s);\n})();\n&lt;/script&gt;</code></pre><p>一般在以下目录加入中加入即可，</p>\n<pre><code>blog\\themes\\xxxx\\layout\\_partial\\head.ejs</code></pre><p>我的是在</p>\n<pre><code>blog\\themes\\icarus\\layout\\common\\head.ejs</code></pre><h3 id=\"sitemap\"><a href=\"#sitemap\" class=\"headerlink\" title=\"sitemap\"></a>sitemap</h3><p>sitemap很简单直接提交<a href=\"http://henvyluk.com/baidusitemap.xml\" target=\"_blank\" rel=\"noopener\">http://henvyluk.com/baidusitemap.xml</a>就可以了<br><img src=\"http://p1.bqimg.com/4851/e66a07fdbb0fb1ff.png\" alt=\"sitemap\"></p>\n<h2 id=\"5、写在最后\"><a href=\"#5、写在最后\" class=\"headerlink\" title=\"5、写在最后\"></a>5、写在最后</h2><p>相比较百度还是要比谷歌慢，总体谷歌提交简单的太多了，谷歌第二天就可以搜索到网站内容，百度不太给力，也使得这篇文章托到了现在，大致的提交流程就是这样，再会！</p>"},{"title":"iOS IJKPlayer RTMP播放器的集成","urlPath":"iOSIJKPlayer","date":"2016-12-05T13:33:06.000Z","updated":"2016-12-04T16:00:00.000Z","_content":"\n\n# iOS IJKPlayer RTMP播放器的集成\n### 前言\n前些日子公司要做视频直播，一直也是项目的原因没来得及整理内容。周末闲暇时间特来写篇文章，对IJKPlayer播放器的集成做一下归纳，希望对要做iOS视频直播方向的开发者有所帮助。\n\n<!-- more -->\n\n### 1、环境搭建\n总结来说就是[HomeBrew](http://brew.sh/index_zh-cn.html) or [MacPorts](https://www.macports.org/install.php)、git、yasm的安装(Homebrew是Mac OSX上的软件包管理工具，当时macOS Sierra刚刚出来我就手贱更新了，导致HomeBrew安装出现了问题，所以采用了MacPorts，官方推荐HomeBrew)。\n\n这里我只做一下版本检查：\n![version Screenshot](http://ww1.sinaimg.cn/large/bd65c956gw1fa6x3vv5utj20fr0a276y.jpg)\n首先HomeBrew：\n    \n    ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n待HomeBrew安装完毕即git、yasm：\n     \n     brew install git\n     brew install yasm\n\n### 2.下载ijkplayer编译\n1、 首先新建要下载的文件夹ijkplayer并cd到该目录下。\n\n2、 紧接着将ijkplayer文件克隆到新建的文件夹内，在终端输入：\n    \n    //git克隆\n    git clone https://github.com/Bilibili/ijkplayer.git ijkplayer-ios\n    \n    //进入ijkplayer-ios\n    cd ijkplayer-ios\n    \n    //切换分支\n    git checkout -B latest k0.7.5\n如图所示：\n![download Screenshot](http://ww3.sinaimg.cn/large/bd65c956gw1fa80uhh7udj20fq0a2q79.jpg)\n3、下载ffmpeg并编译\n\n这一步比较纠结国外网络访问的问题，如果失败就多试几次。\n\n    //依然在ijkplayer-ios下载ffmpeg\n    ./init-ios.sh\n    \n    //进入ios目录\n    cd ios\n    \n 这一步如果前面没有问题，此时的terminal就像打了鸡血一样狂奔......\n (注意中途会有n多个警告，但不要出错就没问题)\n    \n    //clean\n    ./compile-ffmpeg.sh clean\n    \n    //编译\n    ./compile-ffmpeg.sh all\n    \n 成功走到这一步就离成功不远了，按步骤走是不会出现问题的，即便有大部分也是网络的原因毕竟大天朝对国外的网络都懂的。\n\n### 3、demo的处理\n1、打开官方demo并运行\n![file Screenshot](http://ww3.sinaimg.cn/large/bd65c956gw1fa81grkbobj20la0bzdj3.jpg)\n\n2、只要前面的流程没报错，这里编译运行都不会出现问题：\n可以在Online Samples中选择一个m3u8测试ijkplayer是否运行正常如图：\n![Samples Screenshot](http://ww4.sinaimg.cn/large/bd65c956gw1fa81xdraz9j20f8091t9i.jpg)\n\n### 4、制作framework\n1、打开ijkplayer如图：\n![file Screenshot](http://ww3.sinaimg.cn/large/bd65c956gw1fa82aawbmvj20l80by77d.jpg\n)\n2、选择edit scheme，下图：\n![edit Screenshot](http://ww1.sinaimg.cn/large/bd65c956gw1fa82kh3xkqj20cd05hgme.jpg)\n\n3、将build configuration改为Release后点Close，如图：\n![Release Screenshot](http://ww2.sinaimg.cn/large/bd65c956gw1fa82mft3vej20ot0dw75x.jpg)\n\n4、分别在模拟器和真机(Generic iOS Device也可以)上编译：\n![](http://ww4.sinaimg.cn/large/bd65c956gw1fa82nzpo4lj209m010glj.jpg)\n![](http://ww2.sinaimg.cn/large/bd65c956gw1fa82oevlx3j209a0103ye.jpg)\n\n5、打开framework所在的目录:\n![](http://ww4.sinaimg.cn/large/bd65c956gw1fa82pkzyy4j20az07vdh1.jpg)\n\n6、看名字就知道一个是模拟器一个是真机，此时cd到Products目录：\n\n    //合并\n    lipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework\n    //将合并后的framework拷贝到iphoneos/IJKMediaFramework.framework中\n    cp IJKMediaFramework Release-iphoneos/IJKMediaFramework.framework/\n7、此时framework就制作好了，将制作好的iphoneos/IJKMediaFramework.framework复制到要集成的项目中Add Files...\n\n8、在所在的项目中添加动态库\n![lib Screenshot](http://ww4.sinaimg.cn/large/bd65c956gw1fa84ty8rbgj20ky0b140n.jpg)\n\n9、测试集成，将本段代码复制到ViewController.m中，可直接使用：\n\n    #import \"ViewController.h\"\n    #import <IJKMediaFramework/IJKFFMoviePlayerController.h>\n    @interface ViewController ()\n    @property(nonatomic,strong)IJKFFMoviePlayerController * player;\n    @end\n\n    @implementation ViewController\n\n    - (void)viewDidLoad {\n    [super viewDidLoad];\n\n    IJKFFOptions *options = [IJKFFOptions optionsByDefault]; //使用默认配置\n    NSURL * url = [NSURL URLWithString:@\"rtmp://live.hkstv.hk.lxdns.com/live/hks\"]; \n    self.player = [[IJKFFMoviePlayerController alloc] initWithContentURL:url withOptions:options]; //初始化播放器，播放在线视频或直播(RTMP)\n    self.player.view.autoresizingMask = UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;\n    self.player.view.frame = self.view.bounds;\n    self.player.scalingMode = IJKMPMovieScalingModeAspectFit; //缩放模式\n    self.player.shouldAutoplay = YES; //开启自动播放\n\n    self.view.autoresizesSubviews = YES;\n    [self.view addSubview:self.player.view];\n    }\n\n    - (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n    [self.player prepareToPlay];\n    }\n\n    -(void)viewDidDisappear:(BOOL)animated {\n    [super viewDidDisappear:animated];\n    [self.player shutdown];\n    }\n    - (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n    }\n\n    @end\n    \nOK完美收工：\n\n![](http://ww3.sinaimg.cn/large/bd65c956gw1fa835tggdlj208j0fsgmm.jpg)\n\n### 3、github\n地址在这[https://github.com/henvyluk/IJKMediaPlayer](https://github.com/henvyluk/IJKMediaPlayer),另附demo一份，望大神不吝赐教再会！","source":"_posts/iOS IJKPlayer RTMP播放器的集成.md","raw":"---\ntitle: iOS IJKPlayer RTMP播放器的集成\nurlPath: iOSIJKPlayer\ndate: 2016-12-05 21:33:06\nupdated: 2016-12-05\n---\n\n\n# iOS IJKPlayer RTMP播放器的集成\n### 前言\n前些日子公司要做视频直播，一直也是项目的原因没来得及整理内容。周末闲暇时间特来写篇文章，对IJKPlayer播放器的集成做一下归纳，希望对要做iOS视频直播方向的开发者有所帮助。\n\n<!-- more -->\n\n### 1、环境搭建\n总结来说就是[HomeBrew](http://brew.sh/index_zh-cn.html) or [MacPorts](https://www.macports.org/install.php)、git、yasm的安装(Homebrew是Mac OSX上的软件包管理工具，当时macOS Sierra刚刚出来我就手贱更新了，导致HomeBrew安装出现了问题，所以采用了MacPorts，官方推荐HomeBrew)。\n\n这里我只做一下版本检查：\n![version Screenshot](http://ww1.sinaimg.cn/large/bd65c956gw1fa6x3vv5utj20fr0a276y.jpg)\n首先HomeBrew：\n    \n    ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n待HomeBrew安装完毕即git、yasm：\n     \n     brew install git\n     brew install yasm\n\n### 2.下载ijkplayer编译\n1、 首先新建要下载的文件夹ijkplayer并cd到该目录下。\n\n2、 紧接着将ijkplayer文件克隆到新建的文件夹内，在终端输入：\n    \n    //git克隆\n    git clone https://github.com/Bilibili/ijkplayer.git ijkplayer-ios\n    \n    //进入ijkplayer-ios\n    cd ijkplayer-ios\n    \n    //切换分支\n    git checkout -B latest k0.7.5\n如图所示：\n![download Screenshot](http://ww3.sinaimg.cn/large/bd65c956gw1fa80uhh7udj20fq0a2q79.jpg)\n3、下载ffmpeg并编译\n\n这一步比较纠结国外网络访问的问题，如果失败就多试几次。\n\n    //依然在ijkplayer-ios下载ffmpeg\n    ./init-ios.sh\n    \n    //进入ios目录\n    cd ios\n    \n 这一步如果前面没有问题，此时的terminal就像打了鸡血一样狂奔......\n (注意中途会有n多个警告，但不要出错就没问题)\n    \n    //clean\n    ./compile-ffmpeg.sh clean\n    \n    //编译\n    ./compile-ffmpeg.sh all\n    \n 成功走到这一步就离成功不远了，按步骤走是不会出现问题的，即便有大部分也是网络的原因毕竟大天朝对国外的网络都懂的。\n\n### 3、demo的处理\n1、打开官方demo并运行\n![file Screenshot](http://ww3.sinaimg.cn/large/bd65c956gw1fa81grkbobj20la0bzdj3.jpg)\n\n2、只要前面的流程没报错，这里编译运行都不会出现问题：\n可以在Online Samples中选择一个m3u8测试ijkplayer是否运行正常如图：\n![Samples Screenshot](http://ww4.sinaimg.cn/large/bd65c956gw1fa81xdraz9j20f8091t9i.jpg)\n\n### 4、制作framework\n1、打开ijkplayer如图：\n![file Screenshot](http://ww3.sinaimg.cn/large/bd65c956gw1fa82aawbmvj20l80by77d.jpg\n)\n2、选择edit scheme，下图：\n![edit Screenshot](http://ww1.sinaimg.cn/large/bd65c956gw1fa82kh3xkqj20cd05hgme.jpg)\n\n3、将build configuration改为Release后点Close，如图：\n![Release Screenshot](http://ww2.sinaimg.cn/large/bd65c956gw1fa82mft3vej20ot0dw75x.jpg)\n\n4、分别在模拟器和真机(Generic iOS Device也可以)上编译：\n![](http://ww4.sinaimg.cn/large/bd65c956gw1fa82nzpo4lj209m010glj.jpg)\n![](http://ww2.sinaimg.cn/large/bd65c956gw1fa82oevlx3j209a0103ye.jpg)\n\n5、打开framework所在的目录:\n![](http://ww4.sinaimg.cn/large/bd65c956gw1fa82pkzyy4j20az07vdh1.jpg)\n\n6、看名字就知道一个是模拟器一个是真机，此时cd到Products目录：\n\n    //合并\n    lipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework\n    //将合并后的framework拷贝到iphoneos/IJKMediaFramework.framework中\n    cp IJKMediaFramework Release-iphoneos/IJKMediaFramework.framework/\n7、此时framework就制作好了，将制作好的iphoneos/IJKMediaFramework.framework复制到要集成的项目中Add Files...\n\n8、在所在的项目中添加动态库\n![lib Screenshot](http://ww4.sinaimg.cn/large/bd65c956gw1fa84ty8rbgj20ky0b140n.jpg)\n\n9、测试集成，将本段代码复制到ViewController.m中，可直接使用：\n\n    #import \"ViewController.h\"\n    #import <IJKMediaFramework/IJKFFMoviePlayerController.h>\n    @interface ViewController ()\n    @property(nonatomic,strong)IJKFFMoviePlayerController * player;\n    @end\n\n    @implementation ViewController\n\n    - (void)viewDidLoad {\n    [super viewDidLoad];\n\n    IJKFFOptions *options = [IJKFFOptions optionsByDefault]; //使用默认配置\n    NSURL * url = [NSURL URLWithString:@\"rtmp://live.hkstv.hk.lxdns.com/live/hks\"]; \n    self.player = [[IJKFFMoviePlayerController alloc] initWithContentURL:url withOptions:options]; //初始化播放器，播放在线视频或直播(RTMP)\n    self.player.view.autoresizingMask = UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;\n    self.player.view.frame = self.view.bounds;\n    self.player.scalingMode = IJKMPMovieScalingModeAspectFit; //缩放模式\n    self.player.shouldAutoplay = YES; //开启自动播放\n\n    self.view.autoresizesSubviews = YES;\n    [self.view addSubview:self.player.view];\n    }\n\n    - (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n    [self.player prepareToPlay];\n    }\n\n    -(void)viewDidDisappear:(BOOL)animated {\n    [super viewDidDisappear:animated];\n    [self.player shutdown];\n    }\n    - (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n    }\n\n    @end\n    \nOK完美收工：\n\n![](http://ww3.sinaimg.cn/large/bd65c956gw1fa835tggdlj208j0fsgmm.jpg)\n\n### 3、github\n地址在这[https://github.com/henvyluk/IJKMediaPlayer](https://github.com/henvyluk/IJKMediaPlayer),另附demo一份，望大神不吝赐教再会！","slug":"iOS IJKPlayer RTMP播放器的集成","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck05d9e5c000cjs4a1cz95zt7","content":"<h1 id=\"iOS-IJKPlayer-RTMP播放器的集成\"><a href=\"#iOS-IJKPlayer-RTMP播放器的集成\" class=\"headerlink\" title=\"iOS IJKPlayer RTMP播放器的集成\"></a>iOS IJKPlayer RTMP播放器的集成</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前些日子公司要做视频直播，一直也是项目的原因没来得及整理内容。周末闲暇时间特来写篇文章，对IJKPlayer播放器的集成做一下归纳，希望对要做iOS视频直播方向的开发者有所帮助。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"1、环境搭建\"><a href=\"#1、环境搭建\" class=\"headerlink\" title=\"1、环境搭建\"></a>1、环境搭建</h3><p>总结来说就是<a href=\"http://brew.sh/index_zh-cn.html\" target=\"_blank\" rel=\"noopener\">HomeBrew</a> or <a href=\"https://www.macports.org/install.php\" target=\"_blank\" rel=\"noopener\">MacPorts</a>、git、yasm的安装(Homebrew是Mac OSX上的软件包管理工具，当时macOS Sierra刚刚出来我就手贱更新了，导致HomeBrew安装出现了问题，所以采用了MacPorts，官方推荐HomeBrew)。</p>\n<p>这里我只做一下版本检查：<br><img src=\"http://ww1.sinaimg.cn/large/bd65c956gw1fa6x3vv5utj20fr0a276y.jpg\" alt=\"version Screenshot\"><br>首先HomeBrew：</p>\n<pre><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></pre><p>待HomeBrew安装完毕即git、yasm：</p>\n<pre><code>brew install git\nbrew install yasm</code></pre><h3 id=\"2-下载ijkplayer编译\"><a href=\"#2-下载ijkplayer编译\" class=\"headerlink\" title=\"2.下载ijkplayer编译\"></a>2.下载ijkplayer编译</h3><p>1、 首先新建要下载的文件夹ijkplayer并cd到该目录下。</p>\n<p>2、 紧接着将ijkplayer文件克隆到新建的文件夹内，在终端输入：</p>\n<pre><code>//git克隆\ngit clone https://github.com/Bilibili/ijkplayer.git ijkplayer-ios\n\n//进入ijkplayer-ios\ncd ijkplayer-ios\n\n//切换分支\ngit checkout -B latest k0.7.5</code></pre><p>如图所示：<br><img src=\"http://ww3.sinaimg.cn/large/bd65c956gw1fa80uhh7udj20fq0a2q79.jpg\" alt=\"download Screenshot\"><br>3、下载ffmpeg并编译</p>\n<p>这一步比较纠结国外网络访问的问题，如果失败就多试几次。</p>\n<pre><code>//依然在ijkplayer-ios下载ffmpeg\n./init-ios.sh\n\n//进入ios目录\ncd ios</code></pre><p> 这一步如果前面没有问题，此时的terminal就像打了鸡血一样狂奔……<br> (注意中途会有n多个警告，但不要出错就没问题)</p>\n<pre><code>//clean\n./compile-ffmpeg.sh clean\n\n//编译\n./compile-ffmpeg.sh all</code></pre><p> 成功走到这一步就离成功不远了，按步骤走是不会出现问题的，即便有大部分也是网络的原因毕竟大天朝对国外的网络都懂的。</p>\n<h3 id=\"3、demo的处理\"><a href=\"#3、demo的处理\" class=\"headerlink\" title=\"3、demo的处理\"></a>3、demo的处理</h3><p>1、打开官方demo并运行<br><img src=\"http://ww3.sinaimg.cn/large/bd65c956gw1fa81grkbobj20la0bzdj3.jpg\" alt=\"file Screenshot\"></p>\n<p>2、只要前面的流程没报错，这里编译运行都不会出现问题：<br>可以在Online Samples中选择一个m3u8测试ijkplayer是否运行正常如图：<br><img src=\"http://ww4.sinaimg.cn/large/bd65c956gw1fa81xdraz9j20f8091t9i.jpg\" alt=\"Samples Screenshot\"></p>\n<h3 id=\"4、制作framework\"><a href=\"#4、制作framework\" class=\"headerlink\" title=\"4、制作framework\"></a>4、制作framework</h3><p>1、打开ijkplayer如图：<br><img src=\"http://ww3.sinaimg.cn/large/bd65c956gw1fa82aawbmvj20l80by77d.jpg\" alt=\"file Screenshot\"><br>2、选择edit scheme，下图：<br><img src=\"http://ww1.sinaimg.cn/large/bd65c956gw1fa82kh3xkqj20cd05hgme.jpg\" alt=\"edit Screenshot\"></p>\n<p>3、将build configuration改为Release后点Close，如图：<br><img src=\"http://ww2.sinaimg.cn/large/bd65c956gw1fa82mft3vej20ot0dw75x.jpg\" alt=\"Release Screenshot\"></p>\n<p>4、分别在模拟器和真机(Generic iOS Device也可以)上编译：<br><img src=\"http://ww4.sinaimg.cn/large/bd65c956gw1fa82nzpo4lj209m010glj.jpg\" alt><br><img src=\"http://ww2.sinaimg.cn/large/bd65c956gw1fa82oevlx3j209a0103ye.jpg\" alt></p>\n<p>5、打开framework所在的目录:<br><img src=\"http://ww4.sinaimg.cn/large/bd65c956gw1fa82pkzyy4j20az07vdh1.jpg\" alt></p>\n<p>6、看名字就知道一个是模拟器一个是真机，此时cd到Products目录：</p>\n<pre><code>//合并\nlipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework\n//将合并后的framework拷贝到iphoneos/IJKMediaFramework.framework中\ncp IJKMediaFramework Release-iphoneos/IJKMediaFramework.framework/</code></pre><p>7、此时framework就制作好了，将制作好的iphoneos/IJKMediaFramework.framework复制到要集成的项目中Add Files…</p>\n<p>8、在所在的项目中添加动态库<br><img src=\"http://ww4.sinaimg.cn/large/bd65c956gw1fa84ty8rbgj20ky0b140n.jpg\" alt=\"lib Screenshot\"></p>\n<p>9、测试集成，将本段代码复制到ViewController.m中，可直接使用：</p>\n<pre><code>#import &quot;ViewController.h&quot;\n#import &lt;IJKMediaFramework/IJKFFMoviePlayerController.h&gt;\n@interface ViewController ()\n@property(nonatomic,strong)IJKFFMoviePlayerController * player;\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n[super viewDidLoad];\n\nIJKFFOptions *options = [IJKFFOptions optionsByDefault]; //使用默认配置\nNSURL * url = [NSURL URLWithString:@&quot;rtmp://live.hkstv.hk.lxdns.com/live/hks&quot;]; \nself.player = [[IJKFFMoviePlayerController alloc] initWithContentURL:url withOptions:options]; //初始化播放器，播放在线视频或直播(RTMP)\nself.player.view.autoresizingMask = UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;\nself.player.view.frame = self.view.bounds;\nself.player.scalingMode = IJKMPMovieScalingModeAspectFit; //缩放模式\nself.player.shouldAutoplay = YES; //开启自动播放\n\nself.view.autoresizesSubviews = YES;\n[self.view addSubview:self.player.view];\n}\n\n- (void)viewWillAppear:(BOOL)animated {\n[super viewWillAppear:animated];\n[self.player prepareToPlay];\n}\n\n-(void)viewDidDisappear:(BOOL)animated {\n[super viewDidDisappear:animated];\n[self.player shutdown];\n}\n- (void)didReceiveMemoryWarning {\n[super didReceiveMemoryWarning];\n// Dispose of any resources that can be recreated.\n}\n\n@end</code></pre><p>OK完美收工：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/bd65c956gw1fa835tggdlj208j0fsgmm.jpg\" alt></p>\n<h3 id=\"3、github\"><a href=\"#3、github\" class=\"headerlink\" title=\"3、github\"></a>3、github</h3><p>地址在这<a href=\"https://github.com/henvyluk/IJKMediaPlayer\" target=\"_blank\" rel=\"noopener\">https://github.com/henvyluk/IJKMediaPlayer</a>,另附demo一份，望大神不吝赐教再会！</p>\n","site":{"data":{}},"length":2985,"excerpt":"<h1 id=\"iOS-IJKPlayer-RTMP播放器的集成\"><a href=\"#iOS-IJKPlayer-RTMP播放器的集成\" class=\"headerlink\" title=\"iOS IJKPlayer RTMP播放器的集成\"></a>iOS IJKPlayer RTMP播放器的集成</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前些日子公司要做视频直播，一直也是项目的原因没来得及整理内容。周末闲暇时间特来写篇文章，对IJKPlayer播放器的集成做一下归纳，希望对要做iOS视频直播方向的开发者有所帮助。</p>","more":"<h3 id=\"1、环境搭建\"><a href=\"#1、环境搭建\" class=\"headerlink\" title=\"1、环境搭建\"></a>1、环境搭建</h3><p>总结来说就是<a href=\"http://brew.sh/index_zh-cn.html\" target=\"_blank\" rel=\"noopener\">HomeBrew</a> or <a href=\"https://www.macports.org/install.php\" target=\"_blank\" rel=\"noopener\">MacPorts</a>、git、yasm的安装(Homebrew是Mac OSX上的软件包管理工具，当时macOS Sierra刚刚出来我就手贱更新了，导致HomeBrew安装出现了问题，所以采用了MacPorts，官方推荐HomeBrew)。</p>\n<p>这里我只做一下版本检查：<br><img src=\"http://ww1.sinaimg.cn/large/bd65c956gw1fa6x3vv5utj20fr0a276y.jpg\" alt=\"version Screenshot\"><br>首先HomeBrew：</p>\n<pre><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></pre><p>待HomeBrew安装完毕即git、yasm：</p>\n<pre><code>brew install git\nbrew install yasm</code></pre><h3 id=\"2-下载ijkplayer编译\"><a href=\"#2-下载ijkplayer编译\" class=\"headerlink\" title=\"2.下载ijkplayer编译\"></a>2.下载ijkplayer编译</h3><p>1、 首先新建要下载的文件夹ijkplayer并cd到该目录下。</p>\n<p>2、 紧接着将ijkplayer文件克隆到新建的文件夹内，在终端输入：</p>\n<pre><code>//git克隆\ngit clone https://github.com/Bilibili/ijkplayer.git ijkplayer-ios\n\n//进入ijkplayer-ios\ncd ijkplayer-ios\n\n//切换分支\ngit checkout -B latest k0.7.5</code></pre><p>如图所示：<br><img src=\"http://ww3.sinaimg.cn/large/bd65c956gw1fa80uhh7udj20fq0a2q79.jpg\" alt=\"download Screenshot\"><br>3、下载ffmpeg并编译</p>\n<p>这一步比较纠结国外网络访问的问题，如果失败就多试几次。</p>\n<pre><code>//依然在ijkplayer-ios下载ffmpeg\n./init-ios.sh\n\n//进入ios目录\ncd ios</code></pre><p> 这一步如果前面没有问题，此时的terminal就像打了鸡血一样狂奔……<br> (注意中途会有n多个警告，但不要出错就没问题)</p>\n<pre><code>//clean\n./compile-ffmpeg.sh clean\n\n//编译\n./compile-ffmpeg.sh all</code></pre><p> 成功走到这一步就离成功不远了，按步骤走是不会出现问题的，即便有大部分也是网络的原因毕竟大天朝对国外的网络都懂的。</p>\n<h3 id=\"3、demo的处理\"><a href=\"#3、demo的处理\" class=\"headerlink\" title=\"3、demo的处理\"></a>3、demo的处理</h3><p>1、打开官方demo并运行<br><img src=\"http://ww3.sinaimg.cn/large/bd65c956gw1fa81grkbobj20la0bzdj3.jpg\" alt=\"file Screenshot\"></p>\n<p>2、只要前面的流程没报错，这里编译运行都不会出现问题：<br>可以在Online Samples中选择一个m3u8测试ijkplayer是否运行正常如图：<br><img src=\"http://ww4.sinaimg.cn/large/bd65c956gw1fa81xdraz9j20f8091t9i.jpg\" alt=\"Samples Screenshot\"></p>\n<h3 id=\"4、制作framework\"><a href=\"#4、制作framework\" class=\"headerlink\" title=\"4、制作framework\"></a>4、制作framework</h3><p>1、打开ijkplayer如图：<br><img src=\"http://ww3.sinaimg.cn/large/bd65c956gw1fa82aawbmvj20l80by77d.jpg\" alt=\"file Screenshot\"><br>2、选择edit scheme，下图：<br><img src=\"http://ww1.sinaimg.cn/large/bd65c956gw1fa82kh3xkqj20cd05hgme.jpg\" alt=\"edit Screenshot\"></p>\n<p>3、将build configuration改为Release后点Close，如图：<br><img src=\"http://ww2.sinaimg.cn/large/bd65c956gw1fa82mft3vej20ot0dw75x.jpg\" alt=\"Release Screenshot\"></p>\n<p>4、分别在模拟器和真机(Generic iOS Device也可以)上编译：<br><img src=\"http://ww4.sinaimg.cn/large/bd65c956gw1fa82nzpo4lj209m010glj.jpg\" alt><br><img src=\"http://ww2.sinaimg.cn/large/bd65c956gw1fa82oevlx3j209a0103ye.jpg\" alt></p>\n<p>5、打开framework所在的目录:<br><img src=\"http://ww4.sinaimg.cn/large/bd65c956gw1fa82pkzyy4j20az07vdh1.jpg\" alt></p>\n<p>6、看名字就知道一个是模拟器一个是真机，此时cd到Products目录：</p>\n<pre><code>//合并\nlipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework\n//将合并后的framework拷贝到iphoneos/IJKMediaFramework.framework中\ncp IJKMediaFramework Release-iphoneos/IJKMediaFramework.framework/</code></pre><p>7、此时framework就制作好了，将制作好的iphoneos/IJKMediaFramework.framework复制到要集成的项目中Add Files…</p>\n<p>8、在所在的项目中添加动态库<br><img src=\"http://ww4.sinaimg.cn/large/bd65c956gw1fa84ty8rbgj20ky0b140n.jpg\" alt=\"lib Screenshot\"></p>\n<p>9、测试集成，将本段代码复制到ViewController.m中，可直接使用：</p>\n<pre><code>#import &quot;ViewController.h&quot;\n#import &lt;IJKMediaFramework/IJKFFMoviePlayerController.h&gt;\n@interface ViewController ()\n@property(nonatomic,strong)IJKFFMoviePlayerController * player;\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n[super viewDidLoad];\n\nIJKFFOptions *options = [IJKFFOptions optionsByDefault]; //使用默认配置\nNSURL * url = [NSURL URLWithString:@&quot;rtmp://live.hkstv.hk.lxdns.com/live/hks&quot;]; \nself.player = [[IJKFFMoviePlayerController alloc] initWithContentURL:url withOptions:options]; //初始化播放器，播放在线视频或直播(RTMP)\nself.player.view.autoresizingMask = UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;\nself.player.view.frame = self.view.bounds;\nself.player.scalingMode = IJKMPMovieScalingModeAspectFit; //缩放模式\nself.player.shouldAutoplay = YES; //开启自动播放\n\nself.view.autoresizesSubviews = YES;\n[self.view addSubview:self.player.view];\n}\n\n- (void)viewWillAppear:(BOOL)animated {\n[super viewWillAppear:animated];\n[self.player prepareToPlay];\n}\n\n-(void)viewDidDisappear:(BOOL)animated {\n[super viewDidDisappear:animated];\n[self.player shutdown];\n}\n- (void)didReceiveMemoryWarning {\n[super didReceiveMemoryWarning];\n// Dispose of any resources that can be recreated.\n}\n\n@end</code></pre><p>OK完美收工：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/bd65c956gw1fa835tggdlj208j0fsgmm.jpg\" alt></p>\n<h3 id=\"3、github\"><a href=\"#3、github\" class=\"headerlink\" title=\"3、github\"></a>3、github</h3><p>地址在这<a href=\"https://github.com/henvyluk/IJKMediaPlayer\" target=\"_blank\" rel=\"noopener\">https://github.com/henvyluk/IJKMediaPlayer</a>,另附demo一份，望大神不吝赐教再会！</p>"},{"title":"iOS国际化","urlPath":"iOS-localization","date":"2019-06-05T16:00:00.000Z","updated":"2019-06-05T16:00:00.000Z","_content":"\n### AppName Localization\n\n* project -> localizations add\n* add file -> `InfoPlist.string` -> right action -> localization\n* `\"CFBundleDisplayName\" = \"language\"`\n\n<!-- more -->\n\n### String Localization\n* add file -> `Localizable.string` -> right action -> localization\n* `\"字符名称\" = \"stringName\"`\n\n### 正则替换&批量生成\n* swift\n  \n  * replace -> `(\"[^\\x00-\\xff]+\")`\n  * with -> `NSLocalizedString($1, comment: \"\")`\n  * terminal cd项目根目录\n  * `find ./ -name '*.swift' -print0 | xargs -0 genstrings -o projectName/language.lproj/`\n\n* oc\n  \n  * replace -> `(@\"[^\\x00-\\xff]+\")`\n  * with -> `NSLocalizedString($1, comment: @\"\")`\n  * terminal cd项目根目录\n  * `find . \\( -name '*.m' -o -name '*.h' \\) -print0 | xargs -0 genstrings -o projectName/language.lproj/`\n  * `find ./ -name \"*.m\" -print0 | xargs -0 genstrings -o projectName/language.lproj/`\n \n","source":"_posts/iOS国际化.md","raw":"---\n\ntitle: iOS国际化\nurlPath: iOS-localization\ndate: 2019-06-06\nupdated: 2019-06-06\ntag: iOS\n\n---\n\n### AppName Localization\n\n* project -> localizations add\n* add file -> `InfoPlist.string` -> right action -> localization\n* `\"CFBundleDisplayName\" = \"language\"`\n\n<!-- more -->\n\n### String Localization\n* add file -> `Localizable.string` -> right action -> localization\n* `\"字符名称\" = \"stringName\"`\n\n### 正则替换&批量生成\n* swift\n  \n  * replace -> `(\"[^\\x00-\\xff]+\")`\n  * with -> `NSLocalizedString($1, comment: \"\")`\n  * terminal cd项目根目录\n  * `find ./ -name '*.swift' -print0 | xargs -0 genstrings -o projectName/language.lproj/`\n\n* oc\n  \n  * replace -> `(@\"[^\\x00-\\xff]+\")`\n  * with -> `NSLocalizedString($1, comment: @\"\")`\n  * terminal cd项目根目录\n  * `find . \\( -name '*.m' -o -name '*.h' \\) -print0 | xargs -0 genstrings -o projectName/language.lproj/`\n  * `find ./ -name \"*.m\" -print0 | xargs -0 genstrings -o projectName/language.lproj/`\n \n","slug":"iOS国际化","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck05d9e5e000djs4aentrpf0s","content":"<h3 id=\"AppName-Localization\"><a href=\"#AppName-Localization\" class=\"headerlink\" title=\"AppName Localization\"></a>AppName Localization</h3><ul>\n<li>project -&gt; localizations add</li>\n<li>add file -&gt; <code>InfoPlist.string</code> -&gt; right action -&gt; localization</li>\n<li><code>&quot;CFBundleDisplayName&quot; = &quot;language&quot;</code></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"String-Localization\"><a href=\"#String-Localization\" class=\"headerlink\" title=\"String Localization\"></a>String Localization</h3><ul>\n<li>add file -&gt; <code>Localizable.string</code> -&gt; right action -&gt; localization</li>\n<li><code>&quot;字符名称&quot; = &quot;stringName&quot;</code></li>\n</ul>\n<h3 id=\"正则替换-amp-批量生成\"><a href=\"#正则替换-amp-批量生成\" class=\"headerlink\" title=\"正则替换&amp;批量生成\"></a>正则替换&amp;批量生成</h3><ul>\n<li><p>swift</p>\n<ul>\n<li>replace -&gt; <code>(&quot;[^\\x00-\\xff]+&quot;)</code></li>\n<li>with -&gt; <code>NSLocalizedString($1, comment: &quot;&quot;)</code></li>\n<li>terminal cd项目根目录</li>\n<li><code>find ./ -name &#39;*.swift&#39; -print0 | xargs -0 genstrings -o projectName/language.lproj/</code></li>\n</ul>\n</li>\n<li><p>oc</p>\n<ul>\n<li>replace -&gt; <code>(@&quot;[^\\x00-\\xff]+&quot;)</code></li>\n<li>with -&gt; <code>NSLocalizedString($1, comment: @&quot;&quot;)</code></li>\n<li>terminal cd项目根目录</li>\n<li><code>find . \\( -name &#39;*.m&#39; -o -name &#39;*.h&#39; \\) -print0 | xargs -0 genstrings -o projectName/language.lproj/</code></li>\n<li><code>find ./ -name &quot;*.m&quot; -print0 | xargs -0 genstrings -o projectName/language.lproj/</code></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"length":879,"excerpt":"<h3 id=\"AppName-Localization\"><a href=\"#AppName-Localization\" class=\"headerlink\" title=\"AppName Localization\"></a>AppName Localization</h3><ul>\n<li>project -&gt; localizations add</li>\n<li>add file -&gt; <code>InfoPlist.string</code> -&gt; right action -&gt; localization</li>\n<li><code>&quot;CFBundleDisplayName&quot; = &quot;language&quot;</code></li>\n</ul>","more":"<h3 id=\"String-Localization\"><a href=\"#String-Localization\" class=\"headerlink\" title=\"String Localization\"></a>String Localization</h3><ul>\n<li>add file -&gt; <code>Localizable.string</code> -&gt; right action -&gt; localization</li>\n<li><code>&quot;字符名称&quot; = &quot;stringName&quot;</code></li>\n</ul>\n<h3 id=\"正则替换-amp-批量生成\"><a href=\"#正则替换-amp-批量生成\" class=\"headerlink\" title=\"正则替换&amp;批量生成\"></a>正则替换&amp;批量生成</h3><ul>\n<li><p>swift</p>\n<ul>\n<li>replace -&gt; <code>(&quot;[^\\x00-\\xff]+&quot;)</code></li>\n<li>with -&gt; <code>NSLocalizedString($1, comment: &quot;&quot;)</code></li>\n<li>terminal cd项目根目录</li>\n<li><code>find ./ -name &#39;*.swift&#39; -print0 | xargs -0 genstrings -o projectName/language.lproj/</code></li>\n</ul>\n</li>\n<li><p>oc</p>\n<ul>\n<li>replace -&gt; <code>(@&quot;[^\\x00-\\xff]+&quot;)</code></li>\n<li>with -&gt; <code>NSLocalizedString($1, comment: @&quot;&quot;)</code></li>\n<li>terminal cd项目根目录</li>\n<li><code>find . \\( -name &#39;*.m&#39; -o -name &#39;*.h&#39; \\) -print0 | xargs -0 genstrings -o projectName/language.lproj/</code></li>\n<li><code>find ./ -name &quot;*.m&quot; -print0 | xargs -0 genstrings -o projectName/language.lproj/</code></li>\n</ul>\n</li>\n</ul>"},{"title":"为你的库添加cocoapods支持","urlPath":"cocoapods","date":"2016-12-13T13:57:06.000Z","updated":"2016-12-12T16:00:00.000Z","_content":"\n# 为你的库添加cocoapods支持\n### 前言\n本文意在教大家一步一步将自己的pods发布到CocoaPods中，将自己写的组件或库开源出去，让别人轻轻pod install一下即可安装。\n\n<!-- more -->\n\n自己在上传pods过程中也遇到过一些小坑，也在此做了说明。测试文件为一个很简单的DynamicLabel类，旨在上传pods的过程，写的不好的地方望砖下留情。\n### 1、环境\ncocoapods的安装这里就不再说了，另外要说明的是你首先要把项目push到github，并release一个版本打上tag标签（目的在于让cocoapods能够根据你提供的tag来锁定版本），如果没有push可cd到你的项目根目录如下：\n\n\n    //添加\n    git add -A\n    //commit\n    git commit -m\"version description\"\n    //push\n    git push origin master\n\n    //打上标签\n    git tag'0.0.3'\n    //推送\n    git push --tags\n    \n### 2、创建podspec文件\ncd到你的项目根目录如下：\n\n    //创建podspec文件\n    pod spec create DynamicLabel\n  \n之后会生成一个.podspec文件，我这里用sublime打开，可以看到里面有很多待编辑项，顾名思义，我这里编辑项如下：\n\n    s.name         = \"DynamicLabel\"\n    s.version      = \"0.0.3\"\n    s.summary      = \"limited label Scroll display\"\n    s.description  = <<-DESC\n    limited label Scroll display.\n                   DESC\n\n    s.homepage     = \"https://github.com/henvyluk/DynamicLabel\"\n    s.license      = \"MIT\"\n    s.author             = { \"henvyluk\" => \"henvyluk@163.com\" }\n    s.platform     = :ios, \"7.0\"\n    s.source       = { :git => \"https://github.com/henvyluk/DynamicLabel.git\", :tag => \"0.0.3\" }\n\n    s.source_files  = \"Classes\", \"DynamicLabel/Classes/**/*.{h,m}\"\n\n    s.exclude_files = \"Classes/Exclude\"\n\n    s.framework  = \"UIKit\"\n    s.requires_arc = true\n  \n  值得注意的是s.source_files需要根据podspec文件的相对位置来写，表示DynamicLabel 下的Classes文件夹下的所有文件下的所有.h/.m文件，s.framework是你的项目所用到的库，我这里只用到了UIKit，如果你的项目中依赖多个库，可以使用：\n  \n    s.frameworks = \"SomeFramework\", \"AnotherFramework\"\n当我们开发的库中也可能还依赖第三方库，例如JSONKit，那么可以使用:\n\n    s.dependency \"JSONKit\", \"~> 1.4\"\n  另外如果要添加xib文件，在pod中,xib不能当成源文件(即s.source_files),虽然可能会通过检测，但是pod install之后会报错，所以必须要将xib放入资源文件中(即s.resources)，我就遇到过这种情况，只好更新了一个版本，\n\n    \"Unable to run command 'StripNIB xxx.nib' - this target might include its own product\".\n再一个添加图片资源的话，类似于xib,不需其它操作，我是将xib和图片都放在s.Resource中形如：\n\n    s.resources = \"xxxx/xxx/*.{png,xib}\"\n  这里看一下我的文件目录：\n  ![finder Screenshot](http://p1.bqimg.com/4851/bcbaadb24d2d15bf.png)\n\n确认完毕后可通过如下做文件校验：\n\n    pod lib lint\n    \n 此时如果有红色错误The spec did not pass validation, due to 1 error可通过在上述指令后加--verbose来看出错误出在哪里，根据提示的信息在做修改，这里提醒s.source_files处容易出错，注意文件的位置，以及s.framework不要出错，否则会项目内的代码不识别。\n \n当出现如下的提示时就代表验证通过了，可以进行下一步了：\n \n ![terminal Screenshot](http://p1.bqimg.com/4851/132b0f8ba0964752.png)\n \n### 3、注册Trunk\n    //分别是你的邮箱和描述\n    pod trunk register henvyluk@163.com --description='henvy'\n    \n之后你的邮箱会收到确认邮件，点击邮件中的链接后验证后：\n\n    pod trunk me\n    \n如图则表示注册成功，可以进行接下来的push了\n  ![terminal Screenshot](http://p1.bqimg.com/4851/5ee9c81e4b1a20ab.png)\n  \n### 4、Trunk push\n\n执行：\n\n    pod trunk push\n    \n如果push过程中出错，再检查一下podspec文件，我之前因为版本匹配问题出了错。如果看到如下图即代表上传成功，我的pod版本比较新，好像旧的版本跟这有点区别，会给dataURL和日至打印，这个新版本的比较人性化一点，但为啥我觉得很幼稚有木有。\n![terminal Screenshot](http://i1.piimg.com/4851/9afe61b7af212484.png)\n\n### 5、验证\n说是push成功了怎么说也要验证一下吧，来search一下：\n\n    pod search DynamicLabel\n \n 一看握草！！\n\n![terminal Screenshot](http://i1.piimg.com/4851/65566d8ca8c24f2f.png)\n\npush出错了？其实不然，cocoapods官网已经有了我们的代码，不信可以搜搜看，See Podspec还可以看到我们的项目在Specs仓库中的具体位置。\n![coocapods Screenshot](http://i1.piimg.com/4851/a084bbacd8500f82.png)\n问题是我们的电脑~/.cocoapods/repos/master/Specs目录并未更新，执行：\n    \n    //更新pod库\n    pod setup\n这一步具体做了什么东西呢？将官方的Specs仓库文件目录下载下来，然后和我们本地的Specs目录进行比对，增加的增加，删除的删除。\n\n第一次会有点慢，之后再setup的话基本上是秒更，最后setup completed,好了现在是最新的了，再来search一下，\n![terminal Screenshot](http://i1.piimg.com/4851/65566d8ca8c24f2f.png)\n\n要命了，仍然搜不到，我当初就是卡在了这一步，卡的莫名其妙的，因为实在想不通还有什么会影响search，后来在[stackoverflow](http://stackoverflow.com)上有提到search_index.json，这是搜索的缓存目录，\n\n    //清除索引缓存\n    rm ~/Library/Caches/CocoaPods/search_index.json\n之后pod search DynamicLabel，等待重建索引后：\n![terminal Screenshot](http://i1.piimg.com/4851/82256f629a06c02b.png)\n\n### 6、写在最后\n好了至此制作自己的整个开源库的过程就完成了，如果以后要更新版本，同样修改podspec文件重新push就好了，要注意的是如果你之前提交过pod，那么你需要去[Claim your Pod](https://trunk.cocoapods.org/claims/new)认领:\n![Claim your Pod Screenshot](http://i1.piimg.com/4851/8741e76fd78a0318.png)\n\n至此结束，也望大神不吝指教，邮件henvyluk@163.com,同时欢迎跳转我的[GitHub主页](https://github.com/henvyluk)讨论，再会！","source":"_posts/为你的库添加cocoapods支持.md","raw":"---\ntitle: 为你的库添加cocoapods支持\nurlPath: cocoapods\ndate: 2016-12-13 21:57:06\nupdated: 2016-12-13\n---\n\n# 为你的库添加cocoapods支持\n### 前言\n本文意在教大家一步一步将自己的pods发布到CocoaPods中，将自己写的组件或库开源出去，让别人轻轻pod install一下即可安装。\n\n<!-- more -->\n\n自己在上传pods过程中也遇到过一些小坑，也在此做了说明。测试文件为一个很简单的DynamicLabel类，旨在上传pods的过程，写的不好的地方望砖下留情。\n### 1、环境\ncocoapods的安装这里就不再说了，另外要说明的是你首先要把项目push到github，并release一个版本打上tag标签（目的在于让cocoapods能够根据你提供的tag来锁定版本），如果没有push可cd到你的项目根目录如下：\n\n\n    //添加\n    git add -A\n    //commit\n    git commit -m\"version description\"\n    //push\n    git push origin master\n\n    //打上标签\n    git tag'0.0.3'\n    //推送\n    git push --tags\n    \n### 2、创建podspec文件\ncd到你的项目根目录如下：\n\n    //创建podspec文件\n    pod spec create DynamicLabel\n  \n之后会生成一个.podspec文件，我这里用sublime打开，可以看到里面有很多待编辑项，顾名思义，我这里编辑项如下：\n\n    s.name         = \"DynamicLabel\"\n    s.version      = \"0.0.3\"\n    s.summary      = \"limited label Scroll display\"\n    s.description  = <<-DESC\n    limited label Scroll display.\n                   DESC\n\n    s.homepage     = \"https://github.com/henvyluk/DynamicLabel\"\n    s.license      = \"MIT\"\n    s.author             = { \"henvyluk\" => \"henvyluk@163.com\" }\n    s.platform     = :ios, \"7.0\"\n    s.source       = { :git => \"https://github.com/henvyluk/DynamicLabel.git\", :tag => \"0.0.3\" }\n\n    s.source_files  = \"Classes\", \"DynamicLabel/Classes/**/*.{h,m}\"\n\n    s.exclude_files = \"Classes/Exclude\"\n\n    s.framework  = \"UIKit\"\n    s.requires_arc = true\n  \n  值得注意的是s.source_files需要根据podspec文件的相对位置来写，表示DynamicLabel 下的Classes文件夹下的所有文件下的所有.h/.m文件，s.framework是你的项目所用到的库，我这里只用到了UIKit，如果你的项目中依赖多个库，可以使用：\n  \n    s.frameworks = \"SomeFramework\", \"AnotherFramework\"\n当我们开发的库中也可能还依赖第三方库，例如JSONKit，那么可以使用:\n\n    s.dependency \"JSONKit\", \"~> 1.4\"\n  另外如果要添加xib文件，在pod中,xib不能当成源文件(即s.source_files),虽然可能会通过检测，但是pod install之后会报错，所以必须要将xib放入资源文件中(即s.resources)，我就遇到过这种情况，只好更新了一个版本，\n\n    \"Unable to run command 'StripNIB xxx.nib' - this target might include its own product\".\n再一个添加图片资源的话，类似于xib,不需其它操作，我是将xib和图片都放在s.Resource中形如：\n\n    s.resources = \"xxxx/xxx/*.{png,xib}\"\n  这里看一下我的文件目录：\n  ![finder Screenshot](http://p1.bqimg.com/4851/bcbaadb24d2d15bf.png)\n\n确认完毕后可通过如下做文件校验：\n\n    pod lib lint\n    \n 此时如果有红色错误The spec did not pass validation, due to 1 error可通过在上述指令后加--verbose来看出错误出在哪里，根据提示的信息在做修改，这里提醒s.source_files处容易出错，注意文件的位置，以及s.framework不要出错，否则会项目内的代码不识别。\n \n当出现如下的提示时就代表验证通过了，可以进行下一步了：\n \n ![terminal Screenshot](http://p1.bqimg.com/4851/132b0f8ba0964752.png)\n \n### 3、注册Trunk\n    //分别是你的邮箱和描述\n    pod trunk register henvyluk@163.com --description='henvy'\n    \n之后你的邮箱会收到确认邮件，点击邮件中的链接后验证后：\n\n    pod trunk me\n    \n如图则表示注册成功，可以进行接下来的push了\n  ![terminal Screenshot](http://p1.bqimg.com/4851/5ee9c81e4b1a20ab.png)\n  \n### 4、Trunk push\n\n执行：\n\n    pod trunk push\n    \n如果push过程中出错，再检查一下podspec文件，我之前因为版本匹配问题出了错。如果看到如下图即代表上传成功，我的pod版本比较新，好像旧的版本跟这有点区别，会给dataURL和日至打印，这个新版本的比较人性化一点，但为啥我觉得很幼稚有木有。\n![terminal Screenshot](http://i1.piimg.com/4851/9afe61b7af212484.png)\n\n### 5、验证\n说是push成功了怎么说也要验证一下吧，来search一下：\n\n    pod search DynamicLabel\n \n 一看握草！！\n\n![terminal Screenshot](http://i1.piimg.com/4851/65566d8ca8c24f2f.png)\n\npush出错了？其实不然，cocoapods官网已经有了我们的代码，不信可以搜搜看，See Podspec还可以看到我们的项目在Specs仓库中的具体位置。\n![coocapods Screenshot](http://i1.piimg.com/4851/a084bbacd8500f82.png)\n问题是我们的电脑~/.cocoapods/repos/master/Specs目录并未更新，执行：\n    \n    //更新pod库\n    pod setup\n这一步具体做了什么东西呢？将官方的Specs仓库文件目录下载下来，然后和我们本地的Specs目录进行比对，增加的增加，删除的删除。\n\n第一次会有点慢，之后再setup的话基本上是秒更，最后setup completed,好了现在是最新的了，再来search一下，\n![terminal Screenshot](http://i1.piimg.com/4851/65566d8ca8c24f2f.png)\n\n要命了，仍然搜不到，我当初就是卡在了这一步，卡的莫名其妙的，因为实在想不通还有什么会影响search，后来在[stackoverflow](http://stackoverflow.com)上有提到search_index.json，这是搜索的缓存目录，\n\n    //清除索引缓存\n    rm ~/Library/Caches/CocoaPods/search_index.json\n之后pod search DynamicLabel，等待重建索引后：\n![terminal Screenshot](http://i1.piimg.com/4851/82256f629a06c02b.png)\n\n### 6、写在最后\n好了至此制作自己的整个开源库的过程就完成了，如果以后要更新版本，同样修改podspec文件重新push就好了，要注意的是如果你之前提交过pod，那么你需要去[Claim your Pod](https://trunk.cocoapods.org/claims/new)认领:\n![Claim your Pod Screenshot](http://i1.piimg.com/4851/8741e76fd78a0318.png)\n\n至此结束，也望大神不吝指教，邮件henvyluk@163.com,同时欢迎跳转我的[GitHub主页](https://github.com/henvyluk)讨论，再会！","slug":"为你的库添加cocoapods支持","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck05d9e5o000fjs4ab8uihlw4","content":"<h1 id=\"为你的库添加cocoapods支持\"><a href=\"#为你的库添加cocoapods支持\" class=\"headerlink\" title=\"为你的库添加cocoapods支持\"></a>为你的库添加cocoapods支持</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>本文意在教大家一步一步将自己的pods发布到CocoaPods中，将自己写的组件或库开源出去，让别人轻轻pod install一下即可安装。</p>\n<a id=\"more\"></a>\n\n<p>自己在上传pods过程中也遇到过一些小坑，也在此做了说明。测试文件为一个很简单的DynamicLabel类，旨在上传pods的过程，写的不好的地方望砖下留情。</p>\n<h3 id=\"1、环境\"><a href=\"#1、环境\" class=\"headerlink\" title=\"1、环境\"></a>1、环境</h3><p>cocoapods的安装这里就不再说了，另外要说明的是你首先要把项目push到github，并release一个版本打上tag标签（目的在于让cocoapods能够根据你提供的tag来锁定版本），如果没有push可cd到你的项目根目录如下：</p>\n<pre><code>//添加\ngit add -A\n//commit\ngit commit -m&quot;version description&quot;\n//push\ngit push origin master\n\n//打上标签\ngit tag&apos;0.0.3&apos;\n//推送\ngit push --tags</code></pre><h3 id=\"2、创建podspec文件\"><a href=\"#2、创建podspec文件\" class=\"headerlink\" title=\"2、创建podspec文件\"></a>2、创建podspec文件</h3><p>cd到你的项目根目录如下：</p>\n<pre><code>//创建podspec文件\npod spec create DynamicLabel</code></pre><p>之后会生成一个.podspec文件，我这里用sublime打开，可以看到里面有很多待编辑项，顾名思义，我这里编辑项如下：</p>\n<pre><code>s.name         = &quot;DynamicLabel&quot;\ns.version      = &quot;0.0.3&quot;\ns.summary      = &quot;limited label Scroll display&quot;\ns.description  = &lt;&lt;-DESC\nlimited label Scroll display.\n               DESC\n\ns.homepage     = &quot;https://github.com/henvyluk/DynamicLabel&quot;\ns.license      = &quot;MIT&quot;\ns.author             = { &quot;henvyluk&quot; =&gt; &quot;henvyluk@163.com&quot; }\ns.platform     = :ios, &quot;7.0&quot;\ns.source       = { :git =&gt; &quot;https://github.com/henvyluk/DynamicLabel.git&quot;, :tag =&gt; &quot;0.0.3&quot; }\n\ns.source_files  = &quot;Classes&quot;, &quot;DynamicLabel/Classes/**/*.{h,m}&quot;\n\ns.exclude_files = &quot;Classes/Exclude&quot;\n\ns.framework  = &quot;UIKit&quot;\ns.requires_arc = true</code></pre><p>  值得注意的是s.source_files需要根据podspec文件的相对位置来写，表示DynamicLabel 下的Classes文件夹下的所有文件下的所有.h/.m文件，s.framework是你的项目所用到的库，我这里只用到了UIKit，如果你的项目中依赖多个库，可以使用：</p>\n<pre><code>s.frameworks = &quot;SomeFramework&quot;, &quot;AnotherFramework&quot;</code></pre><p>当我们开发的库中也可能还依赖第三方库，例如JSONKit，那么可以使用:</p>\n<pre><code>s.dependency &quot;JSONKit&quot;, &quot;~&gt; 1.4&quot;</code></pre><p>  另外如果要添加xib文件，在pod中,xib不能当成源文件(即s.source_files),虽然可能会通过检测，但是pod install之后会报错，所以必须要将xib放入资源文件中(即s.resources)，我就遇到过这种情况，只好更新了一个版本，</p>\n<pre><code>&quot;Unable to run command &apos;StripNIB xxx.nib&apos; - this target might include its own product&quot;.</code></pre><p>再一个添加图片资源的话，类似于xib,不需其它操作，我是将xib和图片都放在s.Resource中形如：</p>\n<pre><code>s.resources = &quot;xxxx/xxx/*.{png,xib}&quot;</code></pre><p>  这里看一下我的文件目录：<br>  <img src=\"http://p1.bqimg.com/4851/bcbaadb24d2d15bf.png\" alt=\"finder Screenshot\"></p>\n<p>确认完毕后可通过如下做文件校验：</p>\n<pre><code>pod lib lint</code></pre><p> 此时如果有红色错误The spec did not pass validation, due to 1 error可通过在上述指令后加–verbose来看出错误出在哪里，根据提示的信息在做修改，这里提醒s.source_files处容易出错，注意文件的位置，以及s.framework不要出错，否则会项目内的代码不识别。</p>\n<p>当出现如下的提示时就代表验证通过了，可以进行下一步了：</p>\n<p> <img src=\"http://p1.bqimg.com/4851/132b0f8ba0964752.png\" alt=\"terminal Screenshot\"></p>\n<h3 id=\"3、注册Trunk\"><a href=\"#3、注册Trunk\" class=\"headerlink\" title=\"3、注册Trunk\"></a>3、注册Trunk</h3><pre><code>//分别是你的邮箱和描述\npod trunk register henvyluk@163.com --description=&apos;henvy&apos;</code></pre><p>之后你的邮箱会收到确认邮件，点击邮件中的链接后验证后：</p>\n<pre><code>pod trunk me</code></pre><p>如图则表示注册成功，可以进行接下来的push了<br>  <img src=\"http://p1.bqimg.com/4851/5ee9c81e4b1a20ab.png\" alt=\"terminal Screenshot\"></p>\n<h3 id=\"4、Trunk-push\"><a href=\"#4、Trunk-push\" class=\"headerlink\" title=\"4、Trunk push\"></a>4、Trunk push</h3><p>执行：</p>\n<pre><code>pod trunk push</code></pre><p>如果push过程中出错，再检查一下podspec文件，我之前因为版本匹配问题出了错。如果看到如下图即代表上传成功，我的pod版本比较新，好像旧的版本跟这有点区别，会给dataURL和日至打印，这个新版本的比较人性化一点，但为啥我觉得很幼稚有木有。<br><img src=\"http://i1.piimg.com/4851/9afe61b7af212484.png\" alt=\"terminal Screenshot\"></p>\n<h3 id=\"5、验证\"><a href=\"#5、验证\" class=\"headerlink\" title=\"5、验证\"></a>5、验证</h3><p>说是push成功了怎么说也要验证一下吧，来search一下：</p>\n<pre><code>pod search DynamicLabel</code></pre><p> 一看握草！！</p>\n<p><img src=\"http://i1.piimg.com/4851/65566d8ca8c24f2f.png\" alt=\"terminal Screenshot\"></p>\n<p>push出错了？其实不然，cocoapods官网已经有了我们的代码，不信可以搜搜看，See Podspec还可以看到我们的项目在Specs仓库中的具体位置。<br><img src=\"http://i1.piimg.com/4851/a084bbacd8500f82.png\" alt=\"coocapods Screenshot\"><br>问题是我们的电脑~/.cocoapods/repos/master/Specs目录并未更新，执行：</p>\n<pre><code>//更新pod库\npod setup</code></pre><p>这一步具体做了什么东西呢？将官方的Specs仓库文件目录下载下来，然后和我们本地的Specs目录进行比对，增加的增加，删除的删除。</p>\n<p>第一次会有点慢，之后再setup的话基本上是秒更，最后setup completed,好了现在是最新的了，再来search一下，<br><img src=\"http://i1.piimg.com/4851/65566d8ca8c24f2f.png\" alt=\"terminal Screenshot\"></p>\n<p>要命了，仍然搜不到，我当初就是卡在了这一步，卡的莫名其妙的，因为实在想不通还有什么会影响search，后来在<a href=\"http://stackoverflow.com\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>上有提到search_index.json，这是搜索的缓存目录，</p>\n<pre><code>//清除索引缓存\nrm ~/Library/Caches/CocoaPods/search_index.json</code></pre><p>之后pod search DynamicLabel，等待重建索引后：<br><img src=\"http://i1.piimg.com/4851/82256f629a06c02b.png\" alt=\"terminal Screenshot\"></p>\n<h3 id=\"6、写在最后\"><a href=\"#6、写在最后\" class=\"headerlink\" title=\"6、写在最后\"></a>6、写在最后</h3><p>好了至此制作自己的整个开源库的过程就完成了，如果以后要更新版本，同样修改podspec文件重新push就好了，要注意的是如果你之前提交过pod，那么你需要去<a href=\"https://trunk.cocoapods.org/claims/new\" target=\"_blank\" rel=\"noopener\">Claim your Pod</a>认领:<br><img src=\"http://i1.piimg.com/4851/8741e76fd78a0318.png\" alt=\"Claim your Pod Screenshot\"></p>\n<p>至此结束，也望大神不吝指教，邮件<a href=\"mailto:henvyluk@163.com\" target=\"_blank\" rel=\"noopener\">henvyluk@163.com</a>,同时欢迎跳转我的<a href=\"https://github.com/henvyluk\" target=\"_blank\" rel=\"noopener\">GitHub主页</a>讨论，再会！</p>\n","site":{"data":{}},"length":3207,"excerpt":"<h1 id=\"为你的库添加cocoapods支持\"><a href=\"#为你的库添加cocoapods支持\" class=\"headerlink\" title=\"为你的库添加cocoapods支持\"></a>为你的库添加cocoapods支持</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>本文意在教大家一步一步将自己的pods发布到CocoaPods中，将自己写的组件或库开源出去，让别人轻轻pod install一下即可安装。</p>","more":"<p>自己在上传pods过程中也遇到过一些小坑，也在此做了说明。测试文件为一个很简单的DynamicLabel类，旨在上传pods的过程，写的不好的地方望砖下留情。</p>\n<h3 id=\"1、环境\"><a href=\"#1、环境\" class=\"headerlink\" title=\"1、环境\"></a>1、环境</h3><p>cocoapods的安装这里就不再说了，另外要说明的是你首先要把项目push到github，并release一个版本打上tag标签（目的在于让cocoapods能够根据你提供的tag来锁定版本），如果没有push可cd到你的项目根目录如下：</p>\n<pre><code>//添加\ngit add -A\n//commit\ngit commit -m&quot;version description&quot;\n//push\ngit push origin master\n\n//打上标签\ngit tag&apos;0.0.3&apos;\n//推送\ngit push --tags</code></pre><h3 id=\"2、创建podspec文件\"><a href=\"#2、创建podspec文件\" class=\"headerlink\" title=\"2、创建podspec文件\"></a>2、创建podspec文件</h3><p>cd到你的项目根目录如下：</p>\n<pre><code>//创建podspec文件\npod spec create DynamicLabel</code></pre><p>之后会生成一个.podspec文件，我这里用sublime打开，可以看到里面有很多待编辑项，顾名思义，我这里编辑项如下：</p>\n<pre><code>s.name         = &quot;DynamicLabel&quot;\ns.version      = &quot;0.0.3&quot;\ns.summary      = &quot;limited label Scroll display&quot;\ns.description  = &lt;&lt;-DESC\nlimited label Scroll display.\n               DESC\n\ns.homepage     = &quot;https://github.com/henvyluk/DynamicLabel&quot;\ns.license      = &quot;MIT&quot;\ns.author             = { &quot;henvyluk&quot; =&gt; &quot;henvyluk@163.com&quot; }\ns.platform     = :ios, &quot;7.0&quot;\ns.source       = { :git =&gt; &quot;https://github.com/henvyluk/DynamicLabel.git&quot;, :tag =&gt; &quot;0.0.3&quot; }\n\ns.source_files  = &quot;Classes&quot;, &quot;DynamicLabel/Classes/**/*.{h,m}&quot;\n\ns.exclude_files = &quot;Classes/Exclude&quot;\n\ns.framework  = &quot;UIKit&quot;\ns.requires_arc = true</code></pre><p>  值得注意的是s.source_files需要根据podspec文件的相对位置来写，表示DynamicLabel 下的Classes文件夹下的所有文件下的所有.h/.m文件，s.framework是你的项目所用到的库，我这里只用到了UIKit，如果你的项目中依赖多个库，可以使用：</p>\n<pre><code>s.frameworks = &quot;SomeFramework&quot;, &quot;AnotherFramework&quot;</code></pre><p>当我们开发的库中也可能还依赖第三方库，例如JSONKit，那么可以使用:</p>\n<pre><code>s.dependency &quot;JSONKit&quot;, &quot;~&gt; 1.4&quot;</code></pre><p>  另外如果要添加xib文件，在pod中,xib不能当成源文件(即s.source_files),虽然可能会通过检测，但是pod install之后会报错，所以必须要将xib放入资源文件中(即s.resources)，我就遇到过这种情况，只好更新了一个版本，</p>\n<pre><code>&quot;Unable to run command &apos;StripNIB xxx.nib&apos; - this target might include its own product&quot;.</code></pre><p>再一个添加图片资源的话，类似于xib,不需其它操作，我是将xib和图片都放在s.Resource中形如：</p>\n<pre><code>s.resources = &quot;xxxx/xxx/*.{png,xib}&quot;</code></pre><p>  这里看一下我的文件目录：<br>  <img src=\"http://p1.bqimg.com/4851/bcbaadb24d2d15bf.png\" alt=\"finder Screenshot\"></p>\n<p>确认完毕后可通过如下做文件校验：</p>\n<pre><code>pod lib lint</code></pre><p> 此时如果有红色错误The spec did not pass validation, due to 1 error可通过在上述指令后加–verbose来看出错误出在哪里，根据提示的信息在做修改，这里提醒s.source_files处容易出错，注意文件的位置，以及s.framework不要出错，否则会项目内的代码不识别。</p>\n<p>当出现如下的提示时就代表验证通过了，可以进行下一步了：</p>\n<p> <img src=\"http://p1.bqimg.com/4851/132b0f8ba0964752.png\" alt=\"terminal Screenshot\"></p>\n<h3 id=\"3、注册Trunk\"><a href=\"#3、注册Trunk\" class=\"headerlink\" title=\"3、注册Trunk\"></a>3、注册Trunk</h3><pre><code>//分别是你的邮箱和描述\npod trunk register henvyluk@163.com --description=&apos;henvy&apos;</code></pre><p>之后你的邮箱会收到确认邮件，点击邮件中的链接后验证后：</p>\n<pre><code>pod trunk me</code></pre><p>如图则表示注册成功，可以进行接下来的push了<br>  <img src=\"http://p1.bqimg.com/4851/5ee9c81e4b1a20ab.png\" alt=\"terminal Screenshot\"></p>\n<h3 id=\"4、Trunk-push\"><a href=\"#4、Trunk-push\" class=\"headerlink\" title=\"4、Trunk push\"></a>4、Trunk push</h3><p>执行：</p>\n<pre><code>pod trunk push</code></pre><p>如果push过程中出错，再检查一下podspec文件，我之前因为版本匹配问题出了错。如果看到如下图即代表上传成功，我的pod版本比较新，好像旧的版本跟这有点区别，会给dataURL和日至打印，这个新版本的比较人性化一点，但为啥我觉得很幼稚有木有。<br><img src=\"http://i1.piimg.com/4851/9afe61b7af212484.png\" alt=\"terminal Screenshot\"></p>\n<h3 id=\"5、验证\"><a href=\"#5、验证\" class=\"headerlink\" title=\"5、验证\"></a>5、验证</h3><p>说是push成功了怎么说也要验证一下吧，来search一下：</p>\n<pre><code>pod search DynamicLabel</code></pre><p> 一看握草！！</p>\n<p><img src=\"http://i1.piimg.com/4851/65566d8ca8c24f2f.png\" alt=\"terminal Screenshot\"></p>\n<p>push出错了？其实不然，cocoapods官网已经有了我们的代码，不信可以搜搜看，See Podspec还可以看到我们的项目在Specs仓库中的具体位置。<br><img src=\"http://i1.piimg.com/4851/a084bbacd8500f82.png\" alt=\"coocapods Screenshot\"><br>问题是我们的电脑~/.cocoapods/repos/master/Specs目录并未更新，执行：</p>\n<pre><code>//更新pod库\npod setup</code></pre><p>这一步具体做了什么东西呢？将官方的Specs仓库文件目录下载下来，然后和我们本地的Specs目录进行比对，增加的增加，删除的删除。</p>\n<p>第一次会有点慢，之后再setup的话基本上是秒更，最后setup completed,好了现在是最新的了，再来search一下，<br><img src=\"http://i1.piimg.com/4851/65566d8ca8c24f2f.png\" alt=\"terminal Screenshot\"></p>\n<p>要命了，仍然搜不到，我当初就是卡在了这一步，卡的莫名其妙的，因为实在想不通还有什么会影响search，后来在<a href=\"http://stackoverflow.com\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>上有提到search_index.json，这是搜索的缓存目录，</p>\n<pre><code>//清除索引缓存\nrm ~/Library/Caches/CocoaPods/search_index.json</code></pre><p>之后pod search DynamicLabel，等待重建索引后：<br><img src=\"http://i1.piimg.com/4851/82256f629a06c02b.png\" alt=\"terminal Screenshot\"></p>\n<h3 id=\"6、写在最后\"><a href=\"#6、写在最后\" class=\"headerlink\" title=\"6、写在最后\"></a>6、写在最后</h3><p>好了至此制作自己的整个开源库的过程就完成了，如果以后要更新版本，同样修改podspec文件重新push就好了，要注意的是如果你之前提交过pod，那么你需要去<a href=\"https://trunk.cocoapods.org/claims/new\" target=\"_blank\" rel=\"noopener\">Claim your Pod</a>认领:<br><img src=\"http://i1.piimg.com/4851/8741e76fd78a0318.png\" alt=\"Claim your Pod Screenshot\"></p>\n<p>至此结束，也望大神不吝指教，邮件<a href=\"mailto:henvyluk@163.com\" target=\"_blank\" rel=\"noopener\">henvyluk@163.com</a>,同时欢迎跳转我的<a href=\"https://github.com/henvyluk\" target=\"_blank\" rel=\"noopener\">GitHub主页</a>讨论，再会！</p>"},{"title":"内功修炼篇--runtime","urlPath":"runtime","date":"2016-12-20T16:00:00.000Z","updated":"2016-12-20T16:00:00.000Z","_content":"\n## 前言\n因为前些日子写了个关于导航栏控制器的Demo[地址在这](https://github.com/henvyluk/HLNavigationController)，开篇我想先稍微讲一下这个，我是觉得原生的导航栏在UI如此丰富以及多层VC的情形下，导航条的颜色、按钮、标题、隐藏等定性的修改显得不够圆滑，因此就想采用一种透明的方式，将VC用NC包装一层再push出去，这里就用到了AssociatedObjects，为所推的VC添加了属性。关联对象只是运行时中的一点，本篇文章想就关联对象和运行时的一些其他常见用法姑且谈谈吾之愚见，望抛砖引玉。\n\n<!-- more -->\n\n## 正文\n\n其实网上关于运行时的东西多如牛毛，但感觉都像在一遍一遍的嚼舌根又不好理解，我就坦诚相见，拒绝抽象。\n\n    #import <objc/runtime.h>\n运行时其实就是用C编写的我们oc的基石，我们通过运行时所提供的方法等可以跨越oc层直接与C交互，当然对性能也会有所提升。运行时会对一个类进行完全的分解，将类或者对象的每一个部分抽象成一种类型，如果把oc的类比作一个组装机器人，那他就会被运行时拆分为手臂、腿、身体等，我们可以通过运行时直接获取到机器人的手臂一样，这对于操作一个类的属性或者方法是非常方便的。\n\n我们在开发中切实可以用到的一些场景我做了归纳，下面一一讲解：   \n### 1、关联对象\n关联对象相关的函数主要有三个，命名相当友好到一看就知道其实就是get/set方法，我们可以在category中使用它们实现动态向类中添加属性和方法。\n\n* objc_setAssociatedObject\n* objc_getAssociatedObject\n* objc_removeAssociatedObjects\n\n看一个添加属性的例子，我们创建一个NSObject的分类CategoryProperty：\n    \n    @interface NSObject (CategoryProperty)\n    \n    @property (nonatomic, strong) NSObject *property;\n    \n    @end\n    \n    @implementation NSObject (CategoryProperty)\n\n    - (NSObject *)property {\n    return objc_getAssociatedObject(self, @selector(property));\n    }\n\n    - (void)setProperty:(NSObject *)value {\n    objc_setAssociatedObject(self, @selector(property), value, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    }\n\n    @end\n##### key值\n这三个函数的参数key值推荐三种命名方式：\n\n* 声明 `static char kAssociatedObjectKey`，使用 `&kAssociatedObjectKey` 作为 `key` 值;\n* 声明 `static void *kAssociatedObjectKey` = `&kAssociatedObjectKey` ，使用 `kAssociatedObjectKey` 作为 `key` 值；\n* 用 `selector` ，使用 `getter` 方法的名称作为 `key` 值。\n\n上面的例子用的是第三种方法，省的命名了也算简单。\n##### 关联策略\n至于关联策略有五种可供选择，有强弱引用和原子非原子的区分，在绝大多数情况下，我们都会使用`OBJC_ASSOCIATION_RETAIN_NONATOMIC` 的关联策略，这可以保证我们持有关联对象不会被过早的释放。\n\n在看一个添加方法的例子，我们创建一个UIButton的分类block：\n    \n    typedef void (^btnBlock)();\n\n    @interface UIButton (block)\n\n    - (void)handelWithBlock:(btnBlock)block;\n\n    @end\n\n    static const char btnKey;\n\n    @implementation UIButton (block)\n    \n    - (void)handelWithBlock:(btnBlock)block{\n    if (block){\n        objc_setAssociatedObject(self, &btnKey, block, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n        }\n    [self addTarget:self action:@selector(btnAction) forControlEvents:UIControlEventTouchUpInside];\n    }\n    \n    - (void)btnAction{\n    btnBlock block = objc_getAssociatedObject(self, &btnKey);\n    block();\n    }\n    \n    @end\n这样我们就为button添加了一个block的方法，在调用button的时候就可以直接用handelWithBlock来回调了。\n### 2、方法交换\n顾名思义，就是两个方法执行交换，我们建一个UIViewController的分类VCCategory：\n\n    @implementation UIViewController (VCCategory)\n\n    + (void)load\n    {\n    //方法交换应该被保证在程序中只会执行一次\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        SEL systemSel = @selector(viewWillAppear:);\n        SEL henvySel = @selector(hl_viewWillAppear:);\n        Method systemMethod = class_getInstanceMethod([self class], systemSel);\n        Method henvyMethod = class_getInstanceMethod([self class], henvySel);\n        BOOL isAdd = class_addMethod(self, systemSel, method_getImplementation(henvyMethod), method_getTypeEncoding(henvyMethod));\n        if (isAdd) {\n            //如果成功，说明类中不存在这个方法的实现\n            //将被交换方法的实现替换到这个并不存在的实现\n            class_replaceMethod(self, henvySel, method_getImplementation(systemMethod), method_getTypeEncoding(systemMethod));\n        }else{\n            //否则，交换两个方法的实现\n            method_exchangeImplementations(systemMethod, henvyMethod);\n        }\n    });\n    }\n    - (void)hl_viewWillAppear:(BOOL)animated{\n    //这里自己调用自己，表面上循环引用其实已经被viewWillAppear替换掉了\n    [self hl_viewWillAppear:animated];\n    NSLog(@\"henvy\");\n    }\n    @end\n这个时候在一个自己定义的viewController中viewWillAppear方法中就可以看到输出henvy。\n### 3、发送消息\n发送消息即objc_msgSend方法很简单，这里就举个很简单的例子,比如你要调用形如一下的一个方法，\n    \n    //类、方法、参数\n    [someObject messageName:parameter];\n还可以用objc_msgSend写作为：\n\n    objc_msgSend（someObject,@selector（messageName),parameter)；\n### 4、字典转模型\nKVC是把字典中所有值给模型的属性赋值，这个是要求字典中的Key必须要在模型里能找到相应的值，如果找不到就会报错，因此我们可以通过重写KVC中的forUndefinedKey这个方法。当然我们可以通过runtime的方式去实现，把KVC的原理倒过来，通过遍历模型的值，从字典中取值，这里新建一个模型ModelClass：\n\n    + (instancetype)modelWithDict:(NSDictionary *)dict{\n    \n    id objc = [[self alloc] init];\n    // count:成员变量个数\n    unsigned int count = 0;\n    // 获取成员变量数组\n    Ivar *ivarList = class_copyIvarList(self, &count);\n    \n    // 遍历所有成员变量\n    for (int i = 0; i < count; i++) {\n        // 获取成员变量\n        Ivar ivar = ivarList[i];\n        \n        // 获取成员变量名字\n        NSString *ivarName = [NSString stringWithUTF8String:ivar_getName(ivar)];\n        // 获取成员变量类型\n        NSString *ivarType = [NSString stringWithUTF8String:ivar_getTypeEncoding(ivar)];\n        // 格式化\n        ivarType = [ivarType stringByReplacingOccurrencesOfString:@\"\\\"\" withString:@\"\"];\n        ivarType = [ivarType stringByReplacingOccurrencesOfString:@\"@\" withString:@\"\"];\n        // 获取key\n        NSString *key = [ivarName substringFromIndex:1];\n        \n        // 去字典中查找对应value        \n        id value = dict[key];\n        \n        // 二级转换:判断下value是否是字典\n        if ([value isKindOfClass:[NSDictionary class]] && ![ivarType hasPrefix:@\"NS\"]) {\n            // 获取类\n            Class modelClass = NSClassFromString(ivarType);\n            value = [modelClass modelWithDict:value];\n        }\n        // 给模型中属性赋值\n        if (value) {\n            [objc setValue:value forKey:key];\n        }\n    }\n    \n    return objc;\n    }\n\n### 写在最后\n总体上来说运行时在开发中比较常用的到的场景我就先总结这么多，当然也欢迎大神能够来补充是最好不过，文章中的测试代码我都写在前言的[Demo](https://github.com/henvyluk/HLNavigationController)里了，同时也欢迎到我的[Github](https://github.com/henvyluk)讨论，如果本文有什么不太对的地方，也请一定要给我指正，感激不尽！\n\n祝大家晚安！另外送上一首歌[【李志—墙上的向日葵】](http://music.163.com/#/song?id=30212877)\n","source":"_posts/内功修炼篇--runtime.md","raw":"---\ntitle: 内功修炼篇--runtime\nurlPath: runtime\ndate: 2016-12-21\nupdated: 2016-12-21\n---\n\n## 前言\n因为前些日子写了个关于导航栏控制器的Demo[地址在这](https://github.com/henvyluk/HLNavigationController)，开篇我想先稍微讲一下这个，我是觉得原生的导航栏在UI如此丰富以及多层VC的情形下，导航条的颜色、按钮、标题、隐藏等定性的修改显得不够圆滑，因此就想采用一种透明的方式，将VC用NC包装一层再push出去，这里就用到了AssociatedObjects，为所推的VC添加了属性。关联对象只是运行时中的一点，本篇文章想就关联对象和运行时的一些其他常见用法姑且谈谈吾之愚见，望抛砖引玉。\n\n<!-- more -->\n\n## 正文\n\n其实网上关于运行时的东西多如牛毛，但感觉都像在一遍一遍的嚼舌根又不好理解，我就坦诚相见，拒绝抽象。\n\n    #import <objc/runtime.h>\n运行时其实就是用C编写的我们oc的基石，我们通过运行时所提供的方法等可以跨越oc层直接与C交互，当然对性能也会有所提升。运行时会对一个类进行完全的分解，将类或者对象的每一个部分抽象成一种类型，如果把oc的类比作一个组装机器人，那他就会被运行时拆分为手臂、腿、身体等，我们可以通过运行时直接获取到机器人的手臂一样，这对于操作一个类的属性或者方法是非常方便的。\n\n我们在开发中切实可以用到的一些场景我做了归纳，下面一一讲解：   \n### 1、关联对象\n关联对象相关的函数主要有三个，命名相当友好到一看就知道其实就是get/set方法，我们可以在category中使用它们实现动态向类中添加属性和方法。\n\n* objc_setAssociatedObject\n* objc_getAssociatedObject\n* objc_removeAssociatedObjects\n\n看一个添加属性的例子，我们创建一个NSObject的分类CategoryProperty：\n    \n    @interface NSObject (CategoryProperty)\n    \n    @property (nonatomic, strong) NSObject *property;\n    \n    @end\n    \n    @implementation NSObject (CategoryProperty)\n\n    - (NSObject *)property {\n    return objc_getAssociatedObject(self, @selector(property));\n    }\n\n    - (void)setProperty:(NSObject *)value {\n    objc_setAssociatedObject(self, @selector(property), value, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    }\n\n    @end\n##### key值\n这三个函数的参数key值推荐三种命名方式：\n\n* 声明 `static char kAssociatedObjectKey`，使用 `&kAssociatedObjectKey` 作为 `key` 值;\n* 声明 `static void *kAssociatedObjectKey` = `&kAssociatedObjectKey` ，使用 `kAssociatedObjectKey` 作为 `key` 值；\n* 用 `selector` ，使用 `getter` 方法的名称作为 `key` 值。\n\n上面的例子用的是第三种方法，省的命名了也算简单。\n##### 关联策略\n至于关联策略有五种可供选择，有强弱引用和原子非原子的区分，在绝大多数情况下，我们都会使用`OBJC_ASSOCIATION_RETAIN_NONATOMIC` 的关联策略，这可以保证我们持有关联对象不会被过早的释放。\n\n在看一个添加方法的例子，我们创建一个UIButton的分类block：\n    \n    typedef void (^btnBlock)();\n\n    @interface UIButton (block)\n\n    - (void)handelWithBlock:(btnBlock)block;\n\n    @end\n\n    static const char btnKey;\n\n    @implementation UIButton (block)\n    \n    - (void)handelWithBlock:(btnBlock)block{\n    if (block){\n        objc_setAssociatedObject(self, &btnKey, block, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n        }\n    [self addTarget:self action:@selector(btnAction) forControlEvents:UIControlEventTouchUpInside];\n    }\n    \n    - (void)btnAction{\n    btnBlock block = objc_getAssociatedObject(self, &btnKey);\n    block();\n    }\n    \n    @end\n这样我们就为button添加了一个block的方法，在调用button的时候就可以直接用handelWithBlock来回调了。\n### 2、方法交换\n顾名思义，就是两个方法执行交换，我们建一个UIViewController的分类VCCategory：\n\n    @implementation UIViewController (VCCategory)\n\n    + (void)load\n    {\n    //方法交换应该被保证在程序中只会执行一次\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        SEL systemSel = @selector(viewWillAppear:);\n        SEL henvySel = @selector(hl_viewWillAppear:);\n        Method systemMethod = class_getInstanceMethod([self class], systemSel);\n        Method henvyMethod = class_getInstanceMethod([self class], henvySel);\n        BOOL isAdd = class_addMethod(self, systemSel, method_getImplementation(henvyMethod), method_getTypeEncoding(henvyMethod));\n        if (isAdd) {\n            //如果成功，说明类中不存在这个方法的实现\n            //将被交换方法的实现替换到这个并不存在的实现\n            class_replaceMethod(self, henvySel, method_getImplementation(systemMethod), method_getTypeEncoding(systemMethod));\n        }else{\n            //否则，交换两个方法的实现\n            method_exchangeImplementations(systemMethod, henvyMethod);\n        }\n    });\n    }\n    - (void)hl_viewWillAppear:(BOOL)animated{\n    //这里自己调用自己，表面上循环引用其实已经被viewWillAppear替换掉了\n    [self hl_viewWillAppear:animated];\n    NSLog(@\"henvy\");\n    }\n    @end\n这个时候在一个自己定义的viewController中viewWillAppear方法中就可以看到输出henvy。\n### 3、发送消息\n发送消息即objc_msgSend方法很简单，这里就举个很简单的例子,比如你要调用形如一下的一个方法，\n    \n    //类、方法、参数\n    [someObject messageName:parameter];\n还可以用objc_msgSend写作为：\n\n    objc_msgSend（someObject,@selector（messageName),parameter)；\n### 4、字典转模型\nKVC是把字典中所有值给模型的属性赋值，这个是要求字典中的Key必须要在模型里能找到相应的值，如果找不到就会报错，因此我们可以通过重写KVC中的forUndefinedKey这个方法。当然我们可以通过runtime的方式去实现，把KVC的原理倒过来，通过遍历模型的值，从字典中取值，这里新建一个模型ModelClass：\n\n    + (instancetype)modelWithDict:(NSDictionary *)dict{\n    \n    id objc = [[self alloc] init];\n    // count:成员变量个数\n    unsigned int count = 0;\n    // 获取成员变量数组\n    Ivar *ivarList = class_copyIvarList(self, &count);\n    \n    // 遍历所有成员变量\n    for (int i = 0; i < count; i++) {\n        // 获取成员变量\n        Ivar ivar = ivarList[i];\n        \n        // 获取成员变量名字\n        NSString *ivarName = [NSString stringWithUTF8String:ivar_getName(ivar)];\n        // 获取成员变量类型\n        NSString *ivarType = [NSString stringWithUTF8String:ivar_getTypeEncoding(ivar)];\n        // 格式化\n        ivarType = [ivarType stringByReplacingOccurrencesOfString:@\"\\\"\" withString:@\"\"];\n        ivarType = [ivarType stringByReplacingOccurrencesOfString:@\"@\" withString:@\"\"];\n        // 获取key\n        NSString *key = [ivarName substringFromIndex:1];\n        \n        // 去字典中查找对应value        \n        id value = dict[key];\n        \n        // 二级转换:判断下value是否是字典\n        if ([value isKindOfClass:[NSDictionary class]] && ![ivarType hasPrefix:@\"NS\"]) {\n            // 获取类\n            Class modelClass = NSClassFromString(ivarType);\n            value = [modelClass modelWithDict:value];\n        }\n        // 给模型中属性赋值\n        if (value) {\n            [objc setValue:value forKey:key];\n        }\n    }\n    \n    return objc;\n    }\n\n### 写在最后\n总体上来说运行时在开发中比较常用的到的场景我就先总结这么多，当然也欢迎大神能够来补充是最好不过，文章中的测试代码我都写在前言的[Demo](https://github.com/henvyluk/HLNavigationController)里了，同时也欢迎到我的[Github](https://github.com/henvyluk)讨论，如果本文有什么不太对的地方，也请一定要给我指正，感激不尽！\n\n祝大家晚安！另外送上一首歌[【李志—墙上的向日葵】](http://music.163.com/#/song?id=30212877)\n","slug":"内功修炼篇--runtime","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck05d9e5r000hjs4a41t3b7e5","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>因为前些日子写了个关于导航栏控制器的Demo<a href=\"https://github.com/henvyluk/HLNavigationController\" target=\"_blank\" rel=\"noopener\">地址在这</a>，开篇我想先稍微讲一下这个，我是觉得原生的导航栏在UI如此丰富以及多层VC的情形下，导航条的颜色、按钮、标题、隐藏等定性的修改显得不够圆滑，因此就想采用一种透明的方式，将VC用NC包装一层再push出去，这里就用到了AssociatedObjects，为所推的VC添加了属性。关联对象只是运行时中的一点，本篇文章想就关联对象和运行时的一些其他常见用法姑且谈谈吾之愚见，望抛砖引玉。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>其实网上关于运行时的东西多如牛毛，但感觉都像在一遍一遍的嚼舌根又不好理解，我就坦诚相见，拒绝抽象。</p>\n<pre><code>#import &lt;objc/runtime.h&gt;</code></pre><p>运行时其实就是用C编写的我们oc的基石，我们通过运行时所提供的方法等可以跨越oc层直接与C交互，当然对性能也会有所提升。运行时会对一个类进行完全的分解，将类或者对象的每一个部分抽象成一种类型，如果把oc的类比作一个组装机器人，那他就会被运行时拆分为手臂、腿、身体等，我们可以通过运行时直接获取到机器人的手臂一样，这对于操作一个类的属性或者方法是非常方便的。</p>\n<p>我们在开发中切实可以用到的一些场景我做了归纳，下面一一讲解：   </p>\n<h3 id=\"1、关联对象\"><a href=\"#1、关联对象\" class=\"headerlink\" title=\"1、关联对象\"></a>1、关联对象</h3><p>关联对象相关的函数主要有三个，命名相当友好到一看就知道其实就是get/set方法，我们可以在category中使用它们实现动态向类中添加属性和方法。</p>\n<ul>\n<li>objc_setAssociatedObject</li>\n<li>objc_getAssociatedObject</li>\n<li>objc_removeAssociatedObjects</li>\n</ul>\n<p>看一个添加属性的例子，我们创建一个NSObject的分类CategoryProperty：</p>\n<pre><code>@interface NSObject (CategoryProperty)\n\n@property (nonatomic, strong) NSObject *property;\n\n@end\n\n@implementation NSObject (CategoryProperty)\n\n- (NSObject *)property {\nreturn objc_getAssociatedObject(self, @selector(property));\n}\n\n- (void)setProperty:(NSObject *)value {\nobjc_setAssociatedObject(self, @selector(property), value, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n@end</code></pre><h5 id=\"key值\"><a href=\"#key值\" class=\"headerlink\" title=\"key值\"></a>key值</h5><p>这三个函数的参数key值推荐三种命名方式：</p>\n<ul>\n<li>声明 <code>static char kAssociatedObjectKey</code>，使用 <code>&amp;kAssociatedObjectKey</code> 作为 <code>key</code> 值;</li>\n<li>声明 <code>static void *kAssociatedObjectKey</code> = <code>&amp;kAssociatedObjectKey</code> ，使用 <code>kAssociatedObjectKey</code> 作为 <code>key</code> 值；</li>\n<li>用 <code>selector</code> ，使用 <code>getter</code> 方法的名称作为 <code>key</code> 值。</li>\n</ul>\n<p>上面的例子用的是第三种方法，省的命名了也算简单。</p>\n<h5 id=\"关联策略\"><a href=\"#关联策略\" class=\"headerlink\" title=\"关联策略\"></a>关联策略</h5><p>至于关联策略有五种可供选择，有强弱引用和原子非原子的区分，在绝大多数情况下，我们都会使用<code>OBJC_ASSOCIATION_RETAIN_NONATOMIC</code> 的关联策略，这可以保证我们持有关联对象不会被过早的释放。</p>\n<p>在看一个添加方法的例子，我们创建一个UIButton的分类block：</p>\n<pre><code>typedef void (^btnBlock)();\n\n@interface UIButton (block)\n\n- (void)handelWithBlock:(btnBlock)block;\n\n@end\n\nstatic const char btnKey;\n\n@implementation UIButton (block)\n\n- (void)handelWithBlock:(btnBlock)block{\nif (block){\n    objc_setAssociatedObject(self, &amp;btnKey, block, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    }\n[self addTarget:self action:@selector(btnAction) forControlEvents:UIControlEventTouchUpInside];\n}\n\n- (void)btnAction{\nbtnBlock block = objc_getAssociatedObject(self, &amp;btnKey);\nblock();\n}\n\n@end</code></pre><p>这样我们就为button添加了一个block的方法，在调用button的时候就可以直接用handelWithBlock来回调了。</p>\n<h3 id=\"2、方法交换\"><a href=\"#2、方法交换\" class=\"headerlink\" title=\"2、方法交换\"></a>2、方法交换</h3><p>顾名思义，就是两个方法执行交换，我们建一个UIViewController的分类VCCategory：</p>\n<pre><code>@implementation UIViewController (VCCategory)\n\n+ (void)load\n{\n//方法交换应该被保证在程序中只会执行一次\nstatic dispatch_once_t onceToken;\ndispatch_once(&amp;onceToken, ^{\n    SEL systemSel = @selector(viewWillAppear:);\n    SEL henvySel = @selector(hl_viewWillAppear:);\n    Method systemMethod = class_getInstanceMethod([self class], systemSel);\n    Method henvyMethod = class_getInstanceMethod([self class], henvySel);\n    BOOL isAdd = class_addMethod(self, systemSel, method_getImplementation(henvyMethod), method_getTypeEncoding(henvyMethod));\n    if (isAdd) {\n        //如果成功，说明类中不存在这个方法的实现\n        //将被交换方法的实现替换到这个并不存在的实现\n        class_replaceMethod(self, henvySel, method_getImplementation(systemMethod), method_getTypeEncoding(systemMethod));\n    }else{\n        //否则，交换两个方法的实现\n        method_exchangeImplementations(systemMethod, henvyMethod);\n    }\n});\n}\n- (void)hl_viewWillAppear:(BOOL)animated{\n//这里自己调用自己，表面上循环引用其实已经被viewWillAppear替换掉了\n[self hl_viewWillAppear:animated];\nNSLog(@&quot;henvy&quot;);\n}\n@end</code></pre><p>这个时候在一个自己定义的viewController中viewWillAppear方法中就可以看到输出henvy。</p>\n<h3 id=\"3、发送消息\"><a href=\"#3、发送消息\" class=\"headerlink\" title=\"3、发送消息\"></a>3、发送消息</h3><p>发送消息即objc_msgSend方法很简单，这里就举个很简单的例子,比如你要调用形如一下的一个方法，</p>\n<pre><code>//类、方法、参数\n[someObject messageName:parameter];</code></pre><p>还可以用objc_msgSend写作为：</p>\n<pre><code>objc_msgSend（someObject,@selector（messageName),parameter)；</code></pre><h3 id=\"4、字典转模型\"><a href=\"#4、字典转模型\" class=\"headerlink\" title=\"4、字典转模型\"></a>4、字典转模型</h3><p>KVC是把字典中所有值给模型的属性赋值，这个是要求字典中的Key必须要在模型里能找到相应的值，如果找不到就会报错，因此我们可以通过重写KVC中的forUndefinedKey这个方法。当然我们可以通过runtime的方式去实现，把KVC的原理倒过来，通过遍历模型的值，从字典中取值，这里新建一个模型ModelClass：</p>\n<pre><code>+ (instancetype)modelWithDict:(NSDictionary *)dict{\n\nid objc = [[self alloc] init];\n// count:成员变量个数\nunsigned int count = 0;\n// 获取成员变量数组\nIvar *ivarList = class_copyIvarList(self, &amp;count);\n\n// 遍历所有成员变量\nfor (int i = 0; i &lt; count; i++) {\n    // 获取成员变量\n    Ivar ivar = ivarList[i];\n\n    // 获取成员变量名字\n    NSString *ivarName = [NSString stringWithUTF8String:ivar_getName(ivar)];\n    // 获取成员变量类型\n    NSString *ivarType = [NSString stringWithUTF8String:ivar_getTypeEncoding(ivar)];\n    // 格式化\n    ivarType = [ivarType stringByReplacingOccurrencesOfString:@&quot;\\&quot;&quot; withString:@&quot;&quot;];\n    ivarType = [ivarType stringByReplacingOccurrencesOfString:@&quot;@&quot; withString:@&quot;&quot;];\n    // 获取key\n    NSString *key = [ivarName substringFromIndex:1];\n\n    // 去字典中查找对应value        \n    id value = dict[key];\n\n    // 二级转换:判断下value是否是字典\n    if ([value isKindOfClass:[NSDictionary class]] &amp;&amp; ![ivarType hasPrefix:@&quot;NS&quot;]) {\n        // 获取类\n        Class modelClass = NSClassFromString(ivarType);\n        value = [modelClass modelWithDict:value];\n    }\n    // 给模型中属性赋值\n    if (value) {\n        [objc setValue:value forKey:key];\n    }\n}\n\nreturn objc;\n}</code></pre><h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><p>总体上来说运行时在开发中比较常用的到的场景我就先总结这么多，当然也欢迎大神能够来补充是最好不过，文章中的测试代码我都写在前言的<a href=\"https://github.com/henvyluk/HLNavigationController\" target=\"_blank\" rel=\"noopener\">Demo</a>里了，同时也欢迎到我的<a href=\"https://github.com/henvyluk\" target=\"_blank\" rel=\"noopener\">Github</a>讨论，如果本文有什么不太对的地方，也请一定要给我指正，感激不尽！</p>\n<p>祝大家晚安！另外送上一首歌<a href=\"http://music.163.com/#/song?id=30212877\" target=\"_blank\" rel=\"noopener\">【李志—墙上的向日葵】</a></p>\n","site":{"data":{}},"length":4872,"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>因为前些日子写了个关于导航栏控制器的Demo<a href=\"https://github.com/henvyluk/HLNavigationController\" target=\"_blank\" rel=\"noopener\">地址在这</a>，开篇我想先稍微讲一下这个，我是觉得原生的导航栏在UI如此丰富以及多层VC的情形下，导航条的颜色、按钮、标题、隐藏等定性的修改显得不够圆滑，因此就想采用一种透明的方式，将VC用NC包装一层再push出去，这里就用到了AssociatedObjects，为所推的VC添加了属性。关联对象只是运行时中的一点，本篇文章想就关联对象和运行时的一些其他常见用法姑且谈谈吾之愚见，望抛砖引玉。</p>","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>其实网上关于运行时的东西多如牛毛，但感觉都像在一遍一遍的嚼舌根又不好理解，我就坦诚相见，拒绝抽象。</p>\n<pre><code>#import &lt;objc/runtime.h&gt;</code></pre><p>运行时其实就是用C编写的我们oc的基石，我们通过运行时所提供的方法等可以跨越oc层直接与C交互，当然对性能也会有所提升。运行时会对一个类进行完全的分解，将类或者对象的每一个部分抽象成一种类型，如果把oc的类比作一个组装机器人，那他就会被运行时拆分为手臂、腿、身体等，我们可以通过运行时直接获取到机器人的手臂一样，这对于操作一个类的属性或者方法是非常方便的。</p>\n<p>我们在开发中切实可以用到的一些场景我做了归纳，下面一一讲解：   </p>\n<h3 id=\"1、关联对象\"><a href=\"#1、关联对象\" class=\"headerlink\" title=\"1、关联对象\"></a>1、关联对象</h3><p>关联对象相关的函数主要有三个，命名相当友好到一看就知道其实就是get/set方法，我们可以在category中使用它们实现动态向类中添加属性和方法。</p>\n<ul>\n<li>objc_setAssociatedObject</li>\n<li>objc_getAssociatedObject</li>\n<li>objc_removeAssociatedObjects</li>\n</ul>\n<p>看一个添加属性的例子，我们创建一个NSObject的分类CategoryProperty：</p>\n<pre><code>@interface NSObject (CategoryProperty)\n\n@property (nonatomic, strong) NSObject *property;\n\n@end\n\n@implementation NSObject (CategoryProperty)\n\n- (NSObject *)property {\nreturn objc_getAssociatedObject(self, @selector(property));\n}\n\n- (void)setProperty:(NSObject *)value {\nobjc_setAssociatedObject(self, @selector(property), value, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n@end</code></pre><h5 id=\"key值\"><a href=\"#key值\" class=\"headerlink\" title=\"key值\"></a>key值</h5><p>这三个函数的参数key值推荐三种命名方式：</p>\n<ul>\n<li>声明 <code>static char kAssociatedObjectKey</code>，使用 <code>&amp;kAssociatedObjectKey</code> 作为 <code>key</code> 值;</li>\n<li>声明 <code>static void *kAssociatedObjectKey</code> = <code>&amp;kAssociatedObjectKey</code> ，使用 <code>kAssociatedObjectKey</code> 作为 <code>key</code> 值；</li>\n<li>用 <code>selector</code> ，使用 <code>getter</code> 方法的名称作为 <code>key</code> 值。</li>\n</ul>\n<p>上面的例子用的是第三种方法，省的命名了也算简单。</p>\n<h5 id=\"关联策略\"><a href=\"#关联策略\" class=\"headerlink\" title=\"关联策略\"></a>关联策略</h5><p>至于关联策略有五种可供选择，有强弱引用和原子非原子的区分，在绝大多数情况下，我们都会使用<code>OBJC_ASSOCIATION_RETAIN_NONATOMIC</code> 的关联策略，这可以保证我们持有关联对象不会被过早的释放。</p>\n<p>在看一个添加方法的例子，我们创建一个UIButton的分类block：</p>\n<pre><code>typedef void (^btnBlock)();\n\n@interface UIButton (block)\n\n- (void)handelWithBlock:(btnBlock)block;\n\n@end\n\nstatic const char btnKey;\n\n@implementation UIButton (block)\n\n- (void)handelWithBlock:(btnBlock)block{\nif (block){\n    objc_setAssociatedObject(self, &amp;btnKey, block, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    }\n[self addTarget:self action:@selector(btnAction) forControlEvents:UIControlEventTouchUpInside];\n}\n\n- (void)btnAction{\nbtnBlock block = objc_getAssociatedObject(self, &amp;btnKey);\nblock();\n}\n\n@end</code></pre><p>这样我们就为button添加了一个block的方法，在调用button的时候就可以直接用handelWithBlock来回调了。</p>\n<h3 id=\"2、方法交换\"><a href=\"#2、方法交换\" class=\"headerlink\" title=\"2、方法交换\"></a>2、方法交换</h3><p>顾名思义，就是两个方法执行交换，我们建一个UIViewController的分类VCCategory：</p>\n<pre><code>@implementation UIViewController (VCCategory)\n\n+ (void)load\n{\n//方法交换应该被保证在程序中只会执行一次\nstatic dispatch_once_t onceToken;\ndispatch_once(&amp;onceToken, ^{\n    SEL systemSel = @selector(viewWillAppear:);\n    SEL henvySel = @selector(hl_viewWillAppear:);\n    Method systemMethod = class_getInstanceMethod([self class], systemSel);\n    Method henvyMethod = class_getInstanceMethod([self class], henvySel);\n    BOOL isAdd = class_addMethod(self, systemSel, method_getImplementation(henvyMethod), method_getTypeEncoding(henvyMethod));\n    if (isAdd) {\n        //如果成功，说明类中不存在这个方法的实现\n        //将被交换方法的实现替换到这个并不存在的实现\n        class_replaceMethod(self, henvySel, method_getImplementation(systemMethod), method_getTypeEncoding(systemMethod));\n    }else{\n        //否则，交换两个方法的实现\n        method_exchangeImplementations(systemMethod, henvyMethod);\n    }\n});\n}\n- (void)hl_viewWillAppear:(BOOL)animated{\n//这里自己调用自己，表面上循环引用其实已经被viewWillAppear替换掉了\n[self hl_viewWillAppear:animated];\nNSLog(@&quot;henvy&quot;);\n}\n@end</code></pre><p>这个时候在一个自己定义的viewController中viewWillAppear方法中就可以看到输出henvy。</p>\n<h3 id=\"3、发送消息\"><a href=\"#3、发送消息\" class=\"headerlink\" title=\"3、发送消息\"></a>3、发送消息</h3><p>发送消息即objc_msgSend方法很简单，这里就举个很简单的例子,比如你要调用形如一下的一个方法，</p>\n<pre><code>//类、方法、参数\n[someObject messageName:parameter];</code></pre><p>还可以用objc_msgSend写作为：</p>\n<pre><code>objc_msgSend（someObject,@selector（messageName),parameter)；</code></pre><h3 id=\"4、字典转模型\"><a href=\"#4、字典转模型\" class=\"headerlink\" title=\"4、字典转模型\"></a>4、字典转模型</h3><p>KVC是把字典中所有值给模型的属性赋值，这个是要求字典中的Key必须要在模型里能找到相应的值，如果找不到就会报错，因此我们可以通过重写KVC中的forUndefinedKey这个方法。当然我们可以通过runtime的方式去实现，把KVC的原理倒过来，通过遍历模型的值，从字典中取值，这里新建一个模型ModelClass：</p>\n<pre><code>+ (instancetype)modelWithDict:(NSDictionary *)dict{\n\nid objc = [[self alloc] init];\n// count:成员变量个数\nunsigned int count = 0;\n// 获取成员变量数组\nIvar *ivarList = class_copyIvarList(self, &amp;count);\n\n// 遍历所有成员变量\nfor (int i = 0; i &lt; count; i++) {\n    // 获取成员变量\n    Ivar ivar = ivarList[i];\n\n    // 获取成员变量名字\n    NSString *ivarName = [NSString stringWithUTF8String:ivar_getName(ivar)];\n    // 获取成员变量类型\n    NSString *ivarType = [NSString stringWithUTF8String:ivar_getTypeEncoding(ivar)];\n    // 格式化\n    ivarType = [ivarType stringByReplacingOccurrencesOfString:@&quot;\\&quot;&quot; withString:@&quot;&quot;];\n    ivarType = [ivarType stringByReplacingOccurrencesOfString:@&quot;@&quot; withString:@&quot;&quot;];\n    // 获取key\n    NSString *key = [ivarName substringFromIndex:1];\n\n    // 去字典中查找对应value        \n    id value = dict[key];\n\n    // 二级转换:判断下value是否是字典\n    if ([value isKindOfClass:[NSDictionary class]] &amp;&amp; ![ivarType hasPrefix:@&quot;NS&quot;]) {\n        // 获取类\n        Class modelClass = NSClassFromString(ivarType);\n        value = [modelClass modelWithDict:value];\n    }\n    // 给模型中属性赋值\n    if (value) {\n        [objc setValue:value forKey:key];\n    }\n}\n\nreturn objc;\n}</code></pre><h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><p>总体上来说运行时在开发中比较常用的到的场景我就先总结这么多，当然也欢迎大神能够来补充是最好不过，文章中的测试代码我都写在前言的<a href=\"https://github.com/henvyluk/HLNavigationController\" target=\"_blank\" rel=\"noopener\">Demo</a>里了，同时也欢迎到我的<a href=\"https://github.com/henvyluk\" target=\"_blank\" rel=\"noopener\">Github</a>讨论，如果本文有什么不太对的地方，也请一定要给我指正，感激不尽！</p>\n<p>祝大家晚安！另外送上一首歌<a href=\"http://music.163.com/#/song?id=30212877\" target=\"_blank\" rel=\"noopener\">【李志—墙上的向日葵】</a></p>"},{"title":"实现Webview的看图模式","urlPath":"WebviewPictureMode","date":"2017-02-08T16:00:00.000Z","updated":"2017-02-08T16:00:00.000Z","_content":"\n## 前言\n由于项目需求，看了看关于js和webview交互的一些东西，由于以前没接触过这块，算是自己的一个盲区，因此记录下来，代码实现的过程很简短。\n\n<!-- more -->\n\n## 正文\n###1、获取 `<img>` 元素\n在webview的代理方法`webViewDidFinishLoad`中用js实现对页面图片URL数组的获取：\n  \n    static  NSString *const jsGetImages =\n    @\"function getImages(){\\\n    var objs = document.getElementsByTagName(\\\"img\\\");\\\n    var imgScr = '';\\\n    for(var i=0;i<objs.length;i++){\\\n    imgScr = imgScr + objs[i].src + '+';\\\n    };\\\n    return imgScr;\\\n    };\";\n    //注入js方法\n    [webView stringByEvaluatingJavaScriptFromString:jsGetImages];\n    NSString *urlResurlt = [webView stringByEvaluatingJavaScriptFromString:@\"getImages()\"];\nurlResurlt获取到的是URL字符串，将其拆分到数组：\n\n    _mUrlArray = [NSMutableArray arrayWithArray:[urlResurlt componentsSeparatedByString:@\"+\"]];\n    //去除最后一个空元素\n    if (_mUrlArray.count >= 2) {\n        [_mUrlArray removeLastObject];\n    }\n###2、添加图片可点击js\n    \n    [_webView stringByEvaluatingJavaScriptFromString:@\"function registerImageClickAction(){\\\n     var imgs=document.getElementsByTagName('img');\\\n     var length=imgs.length;\\\n     for(var i=0;i<length;i++){\\\n     img=imgs[i];\\\n     img.onclick=function(){\\\n     window.location.href='image-preview:'+this.src}\\\n     }\\\n     }\"];\n    [_webView stringByEvaluatingJavaScriptFromString:@\"registerImageClickAction();\"];\n    \n \n###3、捕获到图片的点击事件\n在webView的`shouldStartLoadWithRequest`代理方法中获取被点击图片的url：\n\n    - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {\n    \n    if ([request.URL.scheme isEqualToString:@\"image-preview\"]) {\n        NSString* path = [request.URL.absoluteString substringFromIndex:[@\"image-preview:\" length]];\n        path = [path stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n        //path 就是被点击图片的url\n        [self loadPhotoWith:path];\n        return NO;\n    }\n    return YES;\n    }\n###4、显示图片\n这里我用的是IDMPhotoBrowser：\n   \n  \n     - (void)loadPhotoWith: (NSString *)path {\n    // URLs array\n    __block NSInteger index;//图片点击的序号\n    NSMutableArray *photosURL = [NSMutableArray array];\n    [_mUrlArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        NSURL *url = [NSURL URLWithString:obj];\n        [photosURL addObject:url];\n        if ([path isEqualToString:obj]) {\n             index = idx;\n        }\n    }];\n\n    // Create an array to store IDMPhoto objects\n    NSMutableArray *photos = [NSMutableArray new];\n    \n    for (NSURL *url in photosURL) {\n        IDMPhoto *photo = [IDMPhoto photoWithURL:url];\n        [photos addObject:photo];\n    }\n    IDMPhotoBrowser *browser = [[IDMPhotoBrowser alloc] initWithPhotos:photos];\n    browser.displayCounterLabel = YES;\n    browser.displayActionButton = NO;\n    browser.displayArrowButton = YES;\n    [browser setInitialPageIndex:index];\n    [self presentViewController:browser animated:YES completion:nil];\n    }\n","source":"_posts/实现Webview的看图模式.md","raw":"---\ntitle: 实现Webview的看图模式\nurlPath: WebviewPictureMode\ndate: 2017-02-09 \nupdated: 2017-02-09\n---\n\n## 前言\n由于项目需求，看了看关于js和webview交互的一些东西，由于以前没接触过这块，算是自己的一个盲区，因此记录下来，代码实现的过程很简短。\n\n<!-- more -->\n\n## 正文\n###1、获取 `<img>` 元素\n在webview的代理方法`webViewDidFinishLoad`中用js实现对页面图片URL数组的获取：\n  \n    static  NSString *const jsGetImages =\n    @\"function getImages(){\\\n    var objs = document.getElementsByTagName(\\\"img\\\");\\\n    var imgScr = '';\\\n    for(var i=0;i<objs.length;i++){\\\n    imgScr = imgScr + objs[i].src + '+';\\\n    };\\\n    return imgScr;\\\n    };\";\n    //注入js方法\n    [webView stringByEvaluatingJavaScriptFromString:jsGetImages];\n    NSString *urlResurlt = [webView stringByEvaluatingJavaScriptFromString:@\"getImages()\"];\nurlResurlt获取到的是URL字符串，将其拆分到数组：\n\n    _mUrlArray = [NSMutableArray arrayWithArray:[urlResurlt componentsSeparatedByString:@\"+\"]];\n    //去除最后一个空元素\n    if (_mUrlArray.count >= 2) {\n        [_mUrlArray removeLastObject];\n    }\n###2、添加图片可点击js\n    \n    [_webView stringByEvaluatingJavaScriptFromString:@\"function registerImageClickAction(){\\\n     var imgs=document.getElementsByTagName('img');\\\n     var length=imgs.length;\\\n     for(var i=0;i<length;i++){\\\n     img=imgs[i];\\\n     img.onclick=function(){\\\n     window.location.href='image-preview:'+this.src}\\\n     }\\\n     }\"];\n    [_webView stringByEvaluatingJavaScriptFromString:@\"registerImageClickAction();\"];\n    \n \n###3、捕获到图片的点击事件\n在webView的`shouldStartLoadWithRequest`代理方法中获取被点击图片的url：\n\n    - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {\n    \n    if ([request.URL.scheme isEqualToString:@\"image-preview\"]) {\n        NSString* path = [request.URL.absoluteString substringFromIndex:[@\"image-preview:\" length]];\n        path = [path stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n        //path 就是被点击图片的url\n        [self loadPhotoWith:path];\n        return NO;\n    }\n    return YES;\n    }\n###4、显示图片\n这里我用的是IDMPhotoBrowser：\n   \n  \n     - (void)loadPhotoWith: (NSString *)path {\n    // URLs array\n    __block NSInteger index;//图片点击的序号\n    NSMutableArray *photosURL = [NSMutableArray array];\n    [_mUrlArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        NSURL *url = [NSURL URLWithString:obj];\n        [photosURL addObject:url];\n        if ([path isEqualToString:obj]) {\n             index = idx;\n        }\n    }];\n\n    // Create an array to store IDMPhoto objects\n    NSMutableArray *photos = [NSMutableArray new];\n    \n    for (NSURL *url in photosURL) {\n        IDMPhoto *photo = [IDMPhoto photoWithURL:url];\n        [photos addObject:photo];\n    }\n    IDMPhotoBrowser *browser = [[IDMPhotoBrowser alloc] initWithPhotos:photos];\n    browser.displayCounterLabel = YES;\n    browser.displayActionButton = NO;\n    browser.displayArrowButton = YES;\n    [browser setInitialPageIndex:index];\n    [self presentViewController:browser animated:YES completion:nil];\n    }\n","slug":"实现Webview的看图模式","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck05d9e5v000kjs4av7f31bm6","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于项目需求，看了看关于js和webview交互的一些东西，由于以前没接触过这块，算是自己的一个盲区，因此记录下来，代码实现的过程很简短。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>###1、获取 <code>&lt;img&gt;</code> 元素<br>在webview的代理方法<code>webViewDidFinishLoad</code>中用js实现对页面图片URL数组的获取：</p>\n<pre><code>static  NSString *const jsGetImages =\n@&quot;function getImages(){\\\nvar objs = document.getElementsByTagName(\\&quot;img\\&quot;);\\\nvar imgScr = &apos;&apos;;\\\nfor(var i=0;i&lt;objs.length;i++){\\\nimgScr = imgScr + objs[i].src + &apos;+&apos;;\\\n};\\\nreturn imgScr;\\\n};&quot;;\n//注入js方法\n[webView stringByEvaluatingJavaScriptFromString:jsGetImages];\nNSString *urlResurlt = [webView stringByEvaluatingJavaScriptFromString:@&quot;getImages()&quot;];</code></pre><p>urlResurlt获取到的是URL字符串，将其拆分到数组：</p>\n<pre><code>_mUrlArray = [NSMutableArray arrayWithArray:[urlResurlt componentsSeparatedByString:@&quot;+&quot;]];\n//去除最后一个空元素\nif (_mUrlArray.count &gt;= 2) {\n    [_mUrlArray removeLastObject];\n}</code></pre><p>###2、添加图片可点击js</p>\n<pre><code>[_webView stringByEvaluatingJavaScriptFromString:@&quot;function registerImageClickAction(){\\\n var imgs=document.getElementsByTagName(&apos;img&apos;);\\\n var length=imgs.length;\\\n for(var i=0;i&lt;length;i++){\\\n img=imgs[i];\\\n img.onclick=function(){\\\n window.location.href=&apos;image-preview:&apos;+this.src}\\\n }\\\n }&quot;];\n[_webView stringByEvaluatingJavaScriptFromString:@&quot;registerImageClickAction();&quot;];</code></pre><p>###3、捕获到图片的点击事件<br>在webView的<code>shouldStartLoadWithRequest</code>代理方法中获取被点击图片的url：</p>\n<pre><code>- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {\n\nif ([request.URL.scheme isEqualToString:@&quot;image-preview&quot;]) {\n    NSString* path = [request.URL.absoluteString substringFromIndex:[@&quot;image-preview:&quot; length]];\n    path = [path stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    //path 就是被点击图片的url\n    [self loadPhotoWith:path];\n    return NO;\n}\nreturn YES;\n}</code></pre><p>###4、显示图片<br>这里我用的是IDMPhotoBrowser：</p>\n<pre><code> - (void)loadPhotoWith: (NSString *)path {\n// URLs array\n__block NSInteger index;//图片点击的序号\nNSMutableArray *photosURL = [NSMutableArray array];\n[_mUrlArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n    NSURL *url = [NSURL URLWithString:obj];\n    [photosURL addObject:url];\n    if ([path isEqualToString:obj]) {\n         index = idx;\n    }\n}];\n\n// Create an array to store IDMPhoto objects\nNSMutableArray *photos = [NSMutableArray new];\n\nfor (NSURL *url in photosURL) {\n    IDMPhoto *photo = [IDMPhoto photoWithURL:url];\n    [photos addObject:photo];\n}\nIDMPhotoBrowser *browser = [[IDMPhotoBrowser alloc] initWithPhotos:photos];\nbrowser.displayCounterLabel = YES;\nbrowser.displayActionButton = NO;\nbrowser.displayArrowButton = YES;\n[browser setInitialPageIndex:index];\n[self presentViewController:browser animated:YES completion:nil];\n}</code></pre>","site":{"data":{}},"length":2707,"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于项目需求，看了看关于js和webview交互的一些东西，由于以前没接触过这块，算是自己的一个盲区，因此记录下来，代码实现的过程很简短。</p>","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>###1、获取 <code>&lt;img&gt;</code> 元素<br>在webview的代理方法<code>webViewDidFinishLoad</code>中用js实现对页面图片URL数组的获取：</p>\n<pre><code>static  NSString *const jsGetImages =\n@&quot;function getImages(){\\\nvar objs = document.getElementsByTagName(\\&quot;img\\&quot;);\\\nvar imgScr = &apos;&apos;;\\\nfor(var i=0;i&lt;objs.length;i++){\\\nimgScr = imgScr + objs[i].src + &apos;+&apos;;\\\n};\\\nreturn imgScr;\\\n};&quot;;\n//注入js方法\n[webView stringByEvaluatingJavaScriptFromString:jsGetImages];\nNSString *urlResurlt = [webView stringByEvaluatingJavaScriptFromString:@&quot;getImages()&quot;];</code></pre><p>urlResurlt获取到的是URL字符串，将其拆分到数组：</p>\n<pre><code>_mUrlArray = [NSMutableArray arrayWithArray:[urlResurlt componentsSeparatedByString:@&quot;+&quot;]];\n//去除最后一个空元素\nif (_mUrlArray.count &gt;= 2) {\n    [_mUrlArray removeLastObject];\n}</code></pre><p>###2、添加图片可点击js</p>\n<pre><code>[_webView stringByEvaluatingJavaScriptFromString:@&quot;function registerImageClickAction(){\\\n var imgs=document.getElementsByTagName(&apos;img&apos;);\\\n var length=imgs.length;\\\n for(var i=0;i&lt;length;i++){\\\n img=imgs[i];\\\n img.onclick=function(){\\\n window.location.href=&apos;image-preview:&apos;+this.src}\\\n }\\\n }&quot;];\n[_webView stringByEvaluatingJavaScriptFromString:@&quot;registerImageClickAction();&quot;];</code></pre><p>###3、捕获到图片的点击事件<br>在webView的<code>shouldStartLoadWithRequest</code>代理方法中获取被点击图片的url：</p>\n<pre><code>- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {\n\nif ([request.URL.scheme isEqualToString:@&quot;image-preview&quot;]) {\n    NSString* path = [request.URL.absoluteString substringFromIndex:[@&quot;image-preview:&quot; length]];\n    path = [path stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    //path 就是被点击图片的url\n    [self loadPhotoWith:path];\n    return NO;\n}\nreturn YES;\n}</code></pre><p>###4、显示图片<br>这里我用的是IDMPhotoBrowser：</p>\n<pre><code> - (void)loadPhotoWith: (NSString *)path {\n// URLs array\n__block NSInteger index;//图片点击的序号\nNSMutableArray *photosURL = [NSMutableArray array];\n[_mUrlArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n    NSURL *url = [NSURL URLWithString:obj];\n    [photosURL addObject:url];\n    if ([path isEqualToString:obj]) {\n         index = idx;\n    }\n}];\n\n// Create an array to store IDMPhoto objects\nNSMutableArray *photos = [NSMutableArray new];\n\nfor (NSURL *url in photosURL) {\n    IDMPhoto *photo = [IDMPhoto photoWithURL:url];\n    [photos addObject:photo];\n}\nIDMPhotoBrowser *browser = [[IDMPhotoBrowser alloc] initWithPhotos:photos];\nbrowser.displayCounterLabel = YES;\nbrowser.displayActionButton = NO;\nbrowser.displayArrowButton = YES;\n[browser setInitialPageIndex:index];\n[self presentViewController:browser animated:YES completion:nil];\n}</code></pre>"},{"title":"Block深度软文","urlPath":"Block","date":"2016-12-28T16:00:00.000Z","updated":"2016-12-28T16:00:00.000Z","_content":"\n## 前言\n深究block可以说会涉及不少东西，笔者欲通过循序渐进的方式来谈及block相关，略陈固陋。\n\n阅读本文前，希望我们还是先一起来过一下几个概念：\n\n* 指针和对象，都是内存块。一个大，一个小。一个在栈中，一个在堆中。\n* iOS中，我们可以生命一个指针，也可以通过alloc获取一块内存。\n* 我们可以直接消灭一个指针，将其置为nil，但是我们没办法直接消灭一块对象内存。对于对象内存，我们永远只能依靠系统去回收。即当这个对象不被任何指针所拥有时，系统就会收回该对象内存。\n* 函数在栈区，函数调用完毕后其stack frame将被弹出结束其生命周期。\n* Objective-C的对象在内存中是以堆的方式分配空间。\n\n<!-- more -->\n\n## 正文\n###1、ARC strong和weak指针\n在讲block之前呢先讲一下strong和weak指针的问题，以便于更好的理解下面block中的循环引用以及变量截获等问题。我们知道ARC消除了手动管理内存的烦琐，编译器会自动在适当的地方插入适当的retain、release、autorelease语句。规则很简单，只要还有一个变量指向对象，对象就会保持在内存中。当指针指向新值，或者指针不再存在时，相关联的对象就会自动释放。如下图动画模拟引用计数回收器，红色闪烁表示引用计数行为，引用计数的优势在于垃圾会被很快检测到，你可以看到红色闪烁过后紧接着该区域变黑（[图片来自](https://github.com/kenfox/gc-viz)）。\n\n![REF_COUNT](http://i1.piimg.com/582490/0e069c17c9f92dee.gif)\n\n* strong指针\n\n比如在控制器上有个nameField属性，我在文本框中输入henvy，那么就可以说，nameField的text属性是NSString对象的指针，也就是拥有者，该对象保存了文本输入框的内容。\n\n![](http://p1.bpimg.com/582490/6a231599ff8c1e3b.png)\n\n如果执行了`NSString *name = self.nameField.text;`后，@“henvy”对象就有了多个拥有者，也就是有两个指针指向同一个对象。\n\n![](http://p1.bpimg.com/582490/e393fb17d17140dd.png)\n\n接下来我又在文本框中输入了新的内容比如@\"Leslie\"，此时nameFeild的text属性就指向了新的NSString对象。但原来的NSString对象仍然还有一个所有者(name变量)，因此会继续保留在内存中。\n\n![](http://p1.bpimg.com/582490/e52fc130e059e8f5.png)\n\n当name变量获得新值,或者不再存在时(如局部变量方法返回时、实例变量对象释放时),原先的NSString对象就不再拥有任何所有者,retain计数降为0,这时对象会被释放\n如，给name变量赋予一个新值`name = @\"Eason\"`时。\n\n![](http://i1.piimg.com/582490/f851f317dea65dcf.png)\n\n我们称name和nameField.text指针为\"Strong指针\"，因为它们能够保持对象的生命。默认所有成员变量和局部变量都是Strong指针。\n\n* weak指针\n\nweak型的指针变量依然可以指向一个对象，但不属于对象的拥有者，就像我是很喜欢你，但是却得不到你一样。依然是我们上面的例子在输入框输入henvy后执行`__weak NSString *name = self.nameField.text;`后，虽然同时指向但name并不真正拥有henvy。\n\n![](http://p1.bpimg.com/582490/95bd32d9b0749d01.png)\n\n此时如果文本框内容重新输入@“Leslie”，则原先的henvy对象就没有拥有者，就会被释放，此时name变量会自动变成nil，称为空指针。weak型的指针变量自动变为nil避免了野指针的产生。\n\n![](http://i1.piimg.com/582490/e1b0134308dc1e59.png)\n\n举一个典型的weak指针的例子，即我们的代理模式，控制器ViewController强引用一个myTableView，myTableView的dataSource和delegate都是weak指针,指向你的ViewController。这也是cocoa设定的一个规则，即父对象建立子对象的强引用，而子对象只对父对象建立弱引用。\n\n![](http://p1.bpimg.com/582490/1c82867a795ee3d8.png)\n\n###2、Block的类型\n好吧原谅我前面ARC讲了那么多，当然还是希望读者能够体会笔者的良苦用心。\n\n* NSGlobalBlock\n\n该类型的block存储在程序的数据区域(text段)，不引用外部变量，只对自己的参数做操作，自给自足的状态，可以当做函数使用，例如：\n\n\n    typedef int (^GlobalBlock)(int);\n    GlobalBlock block = ^(int count){\n        return count;\n    };  //nslog:<__NSGlobalBlock__: 0x10d090200>\n* NSStackBlock\n\n该类型的block在非ARC模式存储在栈区，内部引用外部变量，当栈block结束运行的时候会被请出栈，生命周期结束，再次调用当然crash掉，避免这一点可以通过手动copy将其拷贝到安全的堆上来，脱离栈的危险地带，因为本身栈区就是过河拆桥、兔死狗烹的状态。不像堆区讲究循环利用，生死由天定（无指针拥有被系统回收）。当然在ARC模式完全不用担心，ARC模式改写了天规杜绝NSStackBlock状况的发生，他会自动将block拷贝到堆上去（block作为方法或函数的参数传递时，编译器不会自动调用copy方法），从而演变成了第三种NSMallocBlock，此时的堆上的block就会像一个ObjC对象一样被放入autoreleasepool里面，从而保证了返回后的block仍然可以正确执行。因此在本该是NSStackBlock的情况下打印结果就会变成NSMallocBlock。\n\n    typedef void (^StackBlock)();\n    NSString *str = @\"henvy\";\n    StackBlock block = ^{\n        NSLog(@\"%@\",str);\n    };  //nslog :<__NSMallocBlock__: 0x7fe412d18790>\n* NSMallocBlock\n\n该类型的block存储在堆区，引用外部变量，由NSStackBlock Block_copy()生成。在ARC模式下可以理解为只存在NSGlobalBlock和NSMallocBlock两种类型。\n###3、Block对外部变量的存储管理\n我们都知道内存有堆和栈两个部分，堆在高地址向下走，栈在低地址向上走。在每个函数调用的时候，系统都会为其生成一个栈的stack frame，该函数结束后这个frame被弹出去；然而堆对象的生存不从属于某个函数，即便是创建这个堆对象的函数结束了，堆对象也可以继续存在，因此内存泄漏都是堆对象惹的祸，ObjC里的引用计数就是用来管理堆对象这个东西，由于arc中没有引用计数的概念，只有强引用和弱引用的概念。当一个变量没有指针指向它时，就会被系统释放。因此我们通过下面的代码分别来测试。\n\n* 静态变量、全局变量、全局静态变量\n\n        - (void)testStaticObj\n        {\n        static NSString *staticString = nil;\n        staticString = @\"henvy\";\n    \n        printf(\"%p\\n\", &staticString);//0x10b0d6138\n        printf(\"%p\\n\", staticString);//0x10b0d5290\n\n        void (^testBlock)() = ^{\n        \n        printf(\"%p\\n\", &staticString);//0x10b0d6138\n        printf(\"%p\\n\", staticString);//0x0\n\n        NSLog(@\"%@\", staticString);//null\n        };\n        staticString = nil;\n    \n        testBlock();\n        }  \n我这里只放上静态变量的测试代码，同全局变量、全局静态变量。我们发现staticString对象在block的外部和内部对象地址、指针地址都不变，且都在堆区。全局变量和全局静态变量由于作用域在全局，所以在block内访问和读写这两类变量和普通函数没什么区别，而静态变量作用域在block之外，静态变量通过指针传递，将变量传递到block内，进而来修改变量的值，即所谓的地址传递。\n\n* 局部变量\n        \n        - (void)testLocalObj\n        {\n        NSString *localString = nil;\n        localString = @\"henvy\";\n    \n        printf(\"%p\\n\", &localString); //0x7fff569cca48\n        printf(\"%p\\n\", localString); //0x109234290\n\n        void (^testBlock)(void) = ^{\n        \n        printf(\"%p\\n\", &localString); //0x7fcd20511100\n        printf(\"%p\\n\", localString); //0x109234290\n\n        NSLog(@\"%@\", localString); //henvy\n        };\n        localString = nil;\n\n        testBlock();\n        printf(\"%p\\n\", &localString); //0x7fff569cca48\n        printf(\"%p\\n\", localString); //0x0\n        }\n我们发现局部变量在block定义前在栈上开辟指针空间，在堆上开辟对象空间，当然遵循ObjC对象的规则，在block内部指针位置发生了变化，对象位置不变，在block定义后同定义前。因而我们发现block对于局部变量只对其对象的值进行了拷贝，并不关心局部变量在外面的死活，跟block内部没有半点关系，正所谓的值传递。\n\n* block变量\n    \n        - (void)testBlockObj\n        {\n        __block NSString *blockString = @\"henvy\";\n        printf(\"%p\\n\", &blockString); //0x7fff54507a38\n        printf(\"%p\\n\", blockString); //0x10b6f9290\n\n        void (^testBlock)(void) = ^{\n        printf(\"%p\\n\", &blockString); //0x7feb79c1e4b8\n        printf(\"%p\\n\", blockString); //0x10b6f9290\n        \n        NSLog(@\"%@\", blockString);//henvy\n        };\n    \n        testBlock();\n        printf(\"%p\\n\", &blockString); //0x7feb79c1e4b8\n        printf(\"%p\\n\", blockString); //0x10b6f9290\n        }\n我们发现`__block`修饰符的变量在block内部指针地址发生了变化，在block定义后地址彻底改为了新的地址，也就是说值彻底发生了变化，此时的blockString已经不是当年的那个blockString了。\n\n总结一下：静态变量、全局变量和全局静态变量是通过指针传递，将变量传递到block内，进而来修改变量值。而外部变量是通过值传递，自然没法对获取到的外部变量进行修改，当我们需要修改外部变量时，可以用`__block`标记变量，也就是说没有`__block`标记的变量，其值会被复制一份到block私有内存区，而有`__block`标记的变量，其地址会被记录一份在block私有内存区。\n### 4、Block循环引用\n了解了强弱引用之后循环引用的问题就很好理解了，在ARC下，copy到堆上的block会强引用进入到该block中的外部变量，这因而导致循环引用的问题，一旦出现循环引用那么对象就会常驻内存，这显然是谁都不想看到的结果。此时需要用到`__weak`来打破这个闭合的环。\n\n* __weak\n\nViewController控制器内有两个属性：\n\n    @property (nonatomic, copy)NSString *string;\n    @property (nonatomic, copy)void(^myBlock)();\n在先分析下面的代码：\n\n    self.string = @\"henvy\";\n    self.myBlock = ^{\n        NSLog(@\"%@\",self.string);\n    };\n    self.myBlock();\n首先self强引用myBlock，当myBlock被copy到堆上时，myBlock开始强引用self.string，myBlock的拥有者self在Block作用域内部又引用了自己，因此导致了Block的拥有者永远无法释放内存，就出现了循环引用的内存泄漏。解决办法是`__weak`：\n\n    #define HLWeakSelf(type)  __weak typeof(type) weak##type = type\n    self.string = @\"henvy\";\n    HLWeakSelf(self);\n    self.myBlock = ^{\n        NSLog(@\"%@\",weakself.string);\n    };\n    self.myBlock();\n`__weak`就在Block内部对拥有者使用弱引用，通过这种方式告诉block，不要在block内部对self进行强制strong引用了。\n\n* weak-strong dance\n\n在有些特殊情况下，我们在block中又使用`__strong`来修饰这个在block外刚刚用`__weak`修饰的变量。这么做其实是为了避免在block的执行过程中，突然出现self被释放的尴尬情况而导致crash，官方说法weak-strong dance。列举经典到发光的AFNetworking中`AFNetworkReachabilityManager.m`的一段代码：\n\n    __weak __typeof(self)weakSelf = self;\n    AFNetworkReachabilityStatusBlock callback = ^(AFNetworkReachabilityStatus status) {\n    __strong __typeof(weakSelf)strongSelf = weakSelf;\n\n    strongSelf.networkReachabilityStatus = status;\n    if (strongSelf.networkReachabilityStatusBlock) {\n        strongSelf.networkReachabilityStatusBlock(status);\n    }\n    };\n\n为了验证weak-strong dance下面我在一个HLBlockVC类中做如下实验，实验目的在于观察block中的weakSelf到底有没有释放，在该类中会并发两个线程，一个for循环到50后将weakSelf指针置空，另一个线程继续for循环到100，实验可能存在两种结果，一个是for循环到50block结束运行即失败，另一种情况block仍然继续输出到100即实验成功，下面代码说话：\n\n在HLBlockVC类的viewDidLoad方法中加载一个线程：\n\n    __block HLBlockVC *block = [[HLBlockVC alloc]init];\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        [block toPrintNum];\n    });\n    for (int i = 0; i < 51; i ++) {\n        if (i == 50) {\n            block = nil;\n            NSLog(@\"BLOCK WAS NIL\");\n        }\n    }\n添加toPrintNum方法，此时单单用weakSelf：\n\n    - (void) toPrintNum{\n    typedef void (^testBlock)();\n    __weak __typeof(self)weakSelf = self;\n    testBlock block = ^{        \n        for (int i = 0; i < 100; i ++) {\n            [weakSelf go:i];\n        }\n    };\n    block();\n    }\n    \n    -(void)go:(int)number{\n    NSLog(@\"%d\",number);\n    }\n \n    2016-12-30 17:02:23.791 blockDemo[8520:343178] 48\n    2016-12-30 17:02:23.791 blockDemo[8520:343098] BLOCK WILL NIL\n    2016-12-30 17:02:23.792 blockDemo[8520:343178] 49\n    2016-12-30 17:02:23.792 blockDemo[8520:343098] BLOCK WILL NIL\n    2016-12-30 17:02:23.792 blockDemo[8520:343178] 50\n    2016-12-30 17:02:23.792 blockDemo[8520:343098] BLOCK WAS NIL\n代码很清晰，看上面的打印在循环到50的时候block被干掉了，执行结束，weakSelf下没问题。接下来换上weak-strong dance：\n\n    - (void) toPrintNum{\n    typedef void (^testBlock)();\n    __weak __typeof(self) weakSelf = self;\n    testBlock block = ^{\n        __strong __typeof(weakSelf) strongSelf = weakSelf;\n        \n        for (int i = 0; i < 100; i ++) {\n            [strongSelf go:i];\n        }\n    };\n    block();\n    }\n\n    2016-12-30 18:03:42.934 blockDemo[8752:353486] 97\n    2016-12-30 18:03:42.935 blockDemo[8752:353486] 98\n    2016-12-30 18:03:42.935 blockDemo[8752:353486] 99\n通过打印的数据可以看出__strong已经安全的保护了block中的weakSelf使之运行至block结束。可以说weak-strong dance是一种强引用 --> 弱引用 --> 强引用的变换过程，可能会被误解为绕了一圈什么都没做，其实不然，前者的强变弱是为了打破闭环的僵局，后者弱变强是为了block能够一直持有弱引用的对象生命，而strongSelf是一个自动变量会在函数执行完释放。\n\n### 5、写在最后\n回想一下或许很多时候我们遇到的问题很小，确实，就像文中的weak-strong dance，小到我们连遇到他犯错的机会都甚少，但坚持把小事做透、以小见大方能防微杜渐，步步为营！\n\n夜深人静，除了键盘声，就是耳机里传来的歌声[【旅行团--生命是场马拉松】](http://music.163.com/#/song?id=29750167)夹杂着深夜琐碎的思绪，希望每一次发文都是对自己的一次洗礼。最后，晚安。","source":"_posts/Block深度软文.md","raw":"---\ntitle: Block深度软文\nurlPath: Block\ndate: 2016-12-29 \nupdated: 2016-12-29\n---\n\n## 前言\n深究block可以说会涉及不少东西，笔者欲通过循序渐进的方式来谈及block相关，略陈固陋。\n\n阅读本文前，希望我们还是先一起来过一下几个概念：\n\n* 指针和对象，都是内存块。一个大，一个小。一个在栈中，一个在堆中。\n* iOS中，我们可以生命一个指针，也可以通过alloc获取一块内存。\n* 我们可以直接消灭一个指针，将其置为nil，但是我们没办法直接消灭一块对象内存。对于对象内存，我们永远只能依靠系统去回收。即当这个对象不被任何指针所拥有时，系统就会收回该对象内存。\n* 函数在栈区，函数调用完毕后其stack frame将被弹出结束其生命周期。\n* Objective-C的对象在内存中是以堆的方式分配空间。\n\n<!-- more -->\n\n## 正文\n###1、ARC strong和weak指针\n在讲block之前呢先讲一下strong和weak指针的问题，以便于更好的理解下面block中的循环引用以及变量截获等问题。我们知道ARC消除了手动管理内存的烦琐，编译器会自动在适当的地方插入适当的retain、release、autorelease语句。规则很简单，只要还有一个变量指向对象，对象就会保持在内存中。当指针指向新值，或者指针不再存在时，相关联的对象就会自动释放。如下图动画模拟引用计数回收器，红色闪烁表示引用计数行为，引用计数的优势在于垃圾会被很快检测到，你可以看到红色闪烁过后紧接着该区域变黑（[图片来自](https://github.com/kenfox/gc-viz)）。\n\n![REF_COUNT](http://i1.piimg.com/582490/0e069c17c9f92dee.gif)\n\n* strong指针\n\n比如在控制器上有个nameField属性，我在文本框中输入henvy，那么就可以说，nameField的text属性是NSString对象的指针，也就是拥有者，该对象保存了文本输入框的内容。\n\n![](http://p1.bpimg.com/582490/6a231599ff8c1e3b.png)\n\n如果执行了`NSString *name = self.nameField.text;`后，@“henvy”对象就有了多个拥有者，也就是有两个指针指向同一个对象。\n\n![](http://p1.bpimg.com/582490/e393fb17d17140dd.png)\n\n接下来我又在文本框中输入了新的内容比如@\"Leslie\"，此时nameFeild的text属性就指向了新的NSString对象。但原来的NSString对象仍然还有一个所有者(name变量)，因此会继续保留在内存中。\n\n![](http://p1.bpimg.com/582490/e52fc130e059e8f5.png)\n\n当name变量获得新值,或者不再存在时(如局部变量方法返回时、实例变量对象释放时),原先的NSString对象就不再拥有任何所有者,retain计数降为0,这时对象会被释放\n如，给name变量赋予一个新值`name = @\"Eason\"`时。\n\n![](http://i1.piimg.com/582490/f851f317dea65dcf.png)\n\n我们称name和nameField.text指针为\"Strong指针\"，因为它们能够保持对象的生命。默认所有成员变量和局部变量都是Strong指针。\n\n* weak指针\n\nweak型的指针变量依然可以指向一个对象，但不属于对象的拥有者，就像我是很喜欢你，但是却得不到你一样。依然是我们上面的例子在输入框输入henvy后执行`__weak NSString *name = self.nameField.text;`后，虽然同时指向但name并不真正拥有henvy。\n\n![](http://p1.bpimg.com/582490/95bd32d9b0749d01.png)\n\n此时如果文本框内容重新输入@“Leslie”，则原先的henvy对象就没有拥有者，就会被释放，此时name变量会自动变成nil，称为空指针。weak型的指针变量自动变为nil避免了野指针的产生。\n\n![](http://i1.piimg.com/582490/e1b0134308dc1e59.png)\n\n举一个典型的weak指针的例子，即我们的代理模式，控制器ViewController强引用一个myTableView，myTableView的dataSource和delegate都是weak指针,指向你的ViewController。这也是cocoa设定的一个规则，即父对象建立子对象的强引用，而子对象只对父对象建立弱引用。\n\n![](http://p1.bpimg.com/582490/1c82867a795ee3d8.png)\n\n###2、Block的类型\n好吧原谅我前面ARC讲了那么多，当然还是希望读者能够体会笔者的良苦用心。\n\n* NSGlobalBlock\n\n该类型的block存储在程序的数据区域(text段)，不引用外部变量，只对自己的参数做操作，自给自足的状态，可以当做函数使用，例如：\n\n\n    typedef int (^GlobalBlock)(int);\n    GlobalBlock block = ^(int count){\n        return count;\n    };  //nslog:<__NSGlobalBlock__: 0x10d090200>\n* NSStackBlock\n\n该类型的block在非ARC模式存储在栈区，内部引用外部变量，当栈block结束运行的时候会被请出栈，生命周期结束，再次调用当然crash掉，避免这一点可以通过手动copy将其拷贝到安全的堆上来，脱离栈的危险地带，因为本身栈区就是过河拆桥、兔死狗烹的状态。不像堆区讲究循环利用，生死由天定（无指针拥有被系统回收）。当然在ARC模式完全不用担心，ARC模式改写了天规杜绝NSStackBlock状况的发生，他会自动将block拷贝到堆上去（block作为方法或函数的参数传递时，编译器不会自动调用copy方法），从而演变成了第三种NSMallocBlock，此时的堆上的block就会像一个ObjC对象一样被放入autoreleasepool里面，从而保证了返回后的block仍然可以正确执行。因此在本该是NSStackBlock的情况下打印结果就会变成NSMallocBlock。\n\n    typedef void (^StackBlock)();\n    NSString *str = @\"henvy\";\n    StackBlock block = ^{\n        NSLog(@\"%@\",str);\n    };  //nslog :<__NSMallocBlock__: 0x7fe412d18790>\n* NSMallocBlock\n\n该类型的block存储在堆区，引用外部变量，由NSStackBlock Block_copy()生成。在ARC模式下可以理解为只存在NSGlobalBlock和NSMallocBlock两种类型。\n###3、Block对外部变量的存储管理\n我们都知道内存有堆和栈两个部分，堆在高地址向下走，栈在低地址向上走。在每个函数调用的时候，系统都会为其生成一个栈的stack frame，该函数结束后这个frame被弹出去；然而堆对象的生存不从属于某个函数，即便是创建这个堆对象的函数结束了，堆对象也可以继续存在，因此内存泄漏都是堆对象惹的祸，ObjC里的引用计数就是用来管理堆对象这个东西，由于arc中没有引用计数的概念，只有强引用和弱引用的概念。当一个变量没有指针指向它时，就会被系统释放。因此我们通过下面的代码分别来测试。\n\n* 静态变量、全局变量、全局静态变量\n\n        - (void)testStaticObj\n        {\n        static NSString *staticString = nil;\n        staticString = @\"henvy\";\n    \n        printf(\"%p\\n\", &staticString);//0x10b0d6138\n        printf(\"%p\\n\", staticString);//0x10b0d5290\n\n        void (^testBlock)() = ^{\n        \n        printf(\"%p\\n\", &staticString);//0x10b0d6138\n        printf(\"%p\\n\", staticString);//0x0\n\n        NSLog(@\"%@\", staticString);//null\n        };\n        staticString = nil;\n    \n        testBlock();\n        }  \n我这里只放上静态变量的测试代码，同全局变量、全局静态变量。我们发现staticString对象在block的外部和内部对象地址、指针地址都不变，且都在堆区。全局变量和全局静态变量由于作用域在全局，所以在block内访问和读写这两类变量和普通函数没什么区别，而静态变量作用域在block之外，静态变量通过指针传递，将变量传递到block内，进而来修改变量的值，即所谓的地址传递。\n\n* 局部变量\n        \n        - (void)testLocalObj\n        {\n        NSString *localString = nil;\n        localString = @\"henvy\";\n    \n        printf(\"%p\\n\", &localString); //0x7fff569cca48\n        printf(\"%p\\n\", localString); //0x109234290\n\n        void (^testBlock)(void) = ^{\n        \n        printf(\"%p\\n\", &localString); //0x7fcd20511100\n        printf(\"%p\\n\", localString); //0x109234290\n\n        NSLog(@\"%@\", localString); //henvy\n        };\n        localString = nil;\n\n        testBlock();\n        printf(\"%p\\n\", &localString); //0x7fff569cca48\n        printf(\"%p\\n\", localString); //0x0\n        }\n我们发现局部变量在block定义前在栈上开辟指针空间，在堆上开辟对象空间，当然遵循ObjC对象的规则，在block内部指针位置发生了变化，对象位置不变，在block定义后同定义前。因而我们发现block对于局部变量只对其对象的值进行了拷贝，并不关心局部变量在外面的死活，跟block内部没有半点关系，正所谓的值传递。\n\n* block变量\n    \n        - (void)testBlockObj\n        {\n        __block NSString *blockString = @\"henvy\";\n        printf(\"%p\\n\", &blockString); //0x7fff54507a38\n        printf(\"%p\\n\", blockString); //0x10b6f9290\n\n        void (^testBlock)(void) = ^{\n        printf(\"%p\\n\", &blockString); //0x7feb79c1e4b8\n        printf(\"%p\\n\", blockString); //0x10b6f9290\n        \n        NSLog(@\"%@\", blockString);//henvy\n        };\n    \n        testBlock();\n        printf(\"%p\\n\", &blockString); //0x7feb79c1e4b8\n        printf(\"%p\\n\", blockString); //0x10b6f9290\n        }\n我们发现`__block`修饰符的变量在block内部指针地址发生了变化，在block定义后地址彻底改为了新的地址，也就是说值彻底发生了变化，此时的blockString已经不是当年的那个blockString了。\n\n总结一下：静态变量、全局变量和全局静态变量是通过指针传递，将变量传递到block内，进而来修改变量值。而外部变量是通过值传递，自然没法对获取到的外部变量进行修改，当我们需要修改外部变量时，可以用`__block`标记变量，也就是说没有`__block`标记的变量，其值会被复制一份到block私有内存区，而有`__block`标记的变量，其地址会被记录一份在block私有内存区。\n### 4、Block循环引用\n了解了强弱引用之后循环引用的问题就很好理解了，在ARC下，copy到堆上的block会强引用进入到该block中的外部变量，这因而导致循环引用的问题，一旦出现循环引用那么对象就会常驻内存，这显然是谁都不想看到的结果。此时需要用到`__weak`来打破这个闭合的环。\n\n* __weak\n\nViewController控制器内有两个属性：\n\n    @property (nonatomic, copy)NSString *string;\n    @property (nonatomic, copy)void(^myBlock)();\n在先分析下面的代码：\n\n    self.string = @\"henvy\";\n    self.myBlock = ^{\n        NSLog(@\"%@\",self.string);\n    };\n    self.myBlock();\n首先self强引用myBlock，当myBlock被copy到堆上时，myBlock开始强引用self.string，myBlock的拥有者self在Block作用域内部又引用了自己，因此导致了Block的拥有者永远无法释放内存，就出现了循环引用的内存泄漏。解决办法是`__weak`：\n\n    #define HLWeakSelf(type)  __weak typeof(type) weak##type = type\n    self.string = @\"henvy\";\n    HLWeakSelf(self);\n    self.myBlock = ^{\n        NSLog(@\"%@\",weakself.string);\n    };\n    self.myBlock();\n`__weak`就在Block内部对拥有者使用弱引用，通过这种方式告诉block，不要在block内部对self进行强制strong引用了。\n\n* weak-strong dance\n\n在有些特殊情况下，我们在block中又使用`__strong`来修饰这个在block外刚刚用`__weak`修饰的变量。这么做其实是为了避免在block的执行过程中，突然出现self被释放的尴尬情况而导致crash，官方说法weak-strong dance。列举经典到发光的AFNetworking中`AFNetworkReachabilityManager.m`的一段代码：\n\n    __weak __typeof(self)weakSelf = self;\n    AFNetworkReachabilityStatusBlock callback = ^(AFNetworkReachabilityStatus status) {\n    __strong __typeof(weakSelf)strongSelf = weakSelf;\n\n    strongSelf.networkReachabilityStatus = status;\n    if (strongSelf.networkReachabilityStatusBlock) {\n        strongSelf.networkReachabilityStatusBlock(status);\n    }\n    };\n\n为了验证weak-strong dance下面我在一个HLBlockVC类中做如下实验，实验目的在于观察block中的weakSelf到底有没有释放，在该类中会并发两个线程，一个for循环到50后将weakSelf指针置空，另一个线程继续for循环到100，实验可能存在两种结果，一个是for循环到50block结束运行即失败，另一种情况block仍然继续输出到100即实验成功，下面代码说话：\n\n在HLBlockVC类的viewDidLoad方法中加载一个线程：\n\n    __block HLBlockVC *block = [[HLBlockVC alloc]init];\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        [block toPrintNum];\n    });\n    for (int i = 0; i < 51; i ++) {\n        if (i == 50) {\n            block = nil;\n            NSLog(@\"BLOCK WAS NIL\");\n        }\n    }\n添加toPrintNum方法，此时单单用weakSelf：\n\n    - (void) toPrintNum{\n    typedef void (^testBlock)();\n    __weak __typeof(self)weakSelf = self;\n    testBlock block = ^{        \n        for (int i = 0; i < 100; i ++) {\n            [weakSelf go:i];\n        }\n    };\n    block();\n    }\n    \n    -(void)go:(int)number{\n    NSLog(@\"%d\",number);\n    }\n \n    2016-12-30 17:02:23.791 blockDemo[8520:343178] 48\n    2016-12-30 17:02:23.791 blockDemo[8520:343098] BLOCK WILL NIL\n    2016-12-30 17:02:23.792 blockDemo[8520:343178] 49\n    2016-12-30 17:02:23.792 blockDemo[8520:343098] BLOCK WILL NIL\n    2016-12-30 17:02:23.792 blockDemo[8520:343178] 50\n    2016-12-30 17:02:23.792 blockDemo[8520:343098] BLOCK WAS NIL\n代码很清晰，看上面的打印在循环到50的时候block被干掉了，执行结束，weakSelf下没问题。接下来换上weak-strong dance：\n\n    - (void) toPrintNum{\n    typedef void (^testBlock)();\n    __weak __typeof(self) weakSelf = self;\n    testBlock block = ^{\n        __strong __typeof(weakSelf) strongSelf = weakSelf;\n        \n        for (int i = 0; i < 100; i ++) {\n            [strongSelf go:i];\n        }\n    };\n    block();\n    }\n\n    2016-12-30 18:03:42.934 blockDemo[8752:353486] 97\n    2016-12-30 18:03:42.935 blockDemo[8752:353486] 98\n    2016-12-30 18:03:42.935 blockDemo[8752:353486] 99\n通过打印的数据可以看出__strong已经安全的保护了block中的weakSelf使之运行至block结束。可以说weak-strong dance是一种强引用 --> 弱引用 --> 强引用的变换过程，可能会被误解为绕了一圈什么都没做，其实不然，前者的强变弱是为了打破闭环的僵局，后者弱变强是为了block能够一直持有弱引用的对象生命，而strongSelf是一个自动变量会在函数执行完释放。\n\n### 5、写在最后\n回想一下或许很多时候我们遇到的问题很小，确实，就像文中的weak-strong dance，小到我们连遇到他犯错的机会都甚少，但坚持把小事做透、以小见大方能防微杜渐，步步为营！\n\n夜深人静，除了键盘声，就是耳机里传来的歌声[【旅行团--生命是场马拉松】](http://music.163.com/#/song?id=29750167)夹杂着深夜琐碎的思绪，希望每一次发文都是对自己的一次洗礼。最后，晚安。","slug":"Block深度软文","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck05d9ek20011js4aah30sxdo","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>深究block可以说会涉及不少东西，笔者欲通过循序渐进的方式来谈及block相关，略陈固陋。</p>\n<p>阅读本文前，希望我们还是先一起来过一下几个概念：</p>\n<ul>\n<li>指针和对象，都是内存块。一个大，一个小。一个在栈中，一个在堆中。</li>\n<li>iOS中，我们可以生命一个指针，也可以通过alloc获取一块内存。</li>\n<li>我们可以直接消灭一个指针，将其置为nil，但是我们没办法直接消灭一块对象内存。对于对象内存，我们永远只能依靠系统去回收。即当这个对象不被任何指针所拥有时，系统就会收回该对象内存。</li>\n<li>函数在栈区，函数调用完毕后其stack frame将被弹出结束其生命周期。</li>\n<li>Objective-C的对象在内存中是以堆的方式分配空间。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>###1、ARC strong和weak指针<br>在讲block之前呢先讲一下strong和weak指针的问题，以便于更好的理解下面block中的循环引用以及变量截获等问题。我们知道ARC消除了手动管理内存的烦琐，编译器会自动在适当的地方插入适当的retain、release、autorelease语句。规则很简单，只要还有一个变量指向对象，对象就会保持在内存中。当指针指向新值，或者指针不再存在时，相关联的对象就会自动释放。如下图动画模拟引用计数回收器，红色闪烁表示引用计数行为，引用计数的优势在于垃圾会被很快检测到，你可以看到红色闪烁过后紧接着该区域变黑（<a href=\"https://github.com/kenfox/gc-viz\" target=\"_blank\" rel=\"noopener\">图片来自</a>）。</p>\n<p><img src=\"http://i1.piimg.com/582490/0e069c17c9f92dee.gif\" alt=\"REF_COUNT\"></p>\n<ul>\n<li>strong指针</li>\n</ul>\n<p>比如在控制器上有个nameField属性，我在文本框中输入henvy，那么就可以说，nameField的text属性是NSString对象的指针，也就是拥有者，该对象保存了文本输入框的内容。</p>\n<p><img src=\"http://p1.bpimg.com/582490/6a231599ff8c1e3b.png\" alt></p>\n<p>如果执行了<code>NSString *name = self.nameField.text;</code>后，@“henvy”对象就有了多个拥有者，也就是有两个指针指向同一个对象。</p>\n<p><img src=\"http://p1.bpimg.com/582490/e393fb17d17140dd.png\" alt></p>\n<p>接下来我又在文本框中输入了新的内容比如@”Leslie”，此时nameFeild的text属性就指向了新的NSString对象。但原来的NSString对象仍然还有一个所有者(name变量)，因此会继续保留在内存中。</p>\n<p><img src=\"http://p1.bpimg.com/582490/e52fc130e059e8f5.png\" alt></p>\n<p>当name变量获得新值,或者不再存在时(如局部变量方法返回时、实例变量对象释放时),原先的NSString对象就不再拥有任何所有者,retain计数降为0,这时对象会被释放<br>如，给name变量赋予一个新值<code>name = @&quot;Eason&quot;</code>时。</p>\n<p><img src=\"http://i1.piimg.com/582490/f851f317dea65dcf.png\" alt></p>\n<p>我们称name和nameField.text指针为”Strong指针”，因为它们能够保持对象的生命。默认所有成员变量和局部变量都是Strong指针。</p>\n<ul>\n<li>weak指针</li>\n</ul>\n<p>weak型的指针变量依然可以指向一个对象，但不属于对象的拥有者，就像我是很喜欢你，但是却得不到你一样。依然是我们上面的例子在输入框输入henvy后执行<code>__weak NSString *name = self.nameField.text;</code>后，虽然同时指向但name并不真正拥有henvy。</p>\n<p><img src=\"http://p1.bpimg.com/582490/95bd32d9b0749d01.png\" alt></p>\n<p>此时如果文本框内容重新输入@“Leslie”，则原先的henvy对象就没有拥有者，就会被释放，此时name变量会自动变成nil，称为空指针。weak型的指针变量自动变为nil避免了野指针的产生。</p>\n<p><img src=\"http://i1.piimg.com/582490/e1b0134308dc1e59.png\" alt></p>\n<p>举一个典型的weak指针的例子，即我们的代理模式，控制器ViewController强引用一个myTableView，myTableView的dataSource和delegate都是weak指针,指向你的ViewController。这也是cocoa设定的一个规则，即父对象建立子对象的强引用，而子对象只对父对象建立弱引用。</p>\n<p><img src=\"http://p1.bpimg.com/582490/1c82867a795ee3d8.png\" alt></p>\n<p>###2、Block的类型<br>好吧原谅我前面ARC讲了那么多，当然还是希望读者能够体会笔者的良苦用心。</p>\n<ul>\n<li>NSGlobalBlock</li>\n</ul>\n<p>该类型的block存储在程序的数据区域(text段)，不引用外部变量，只对自己的参数做操作，自给自足的状态，可以当做函数使用，例如：</p>\n<pre><code>typedef int (^GlobalBlock)(int);\nGlobalBlock block = ^(int count){\n    return count;\n};  //nslog:&lt;__NSGlobalBlock__: 0x10d090200&gt;</code></pre><ul>\n<li>NSStackBlock</li>\n</ul>\n<p>该类型的block在非ARC模式存储在栈区，内部引用外部变量，当栈block结束运行的时候会被请出栈，生命周期结束，再次调用当然crash掉，避免这一点可以通过手动copy将其拷贝到安全的堆上来，脱离栈的危险地带，因为本身栈区就是过河拆桥、兔死狗烹的状态。不像堆区讲究循环利用，生死由天定（无指针拥有被系统回收）。当然在ARC模式完全不用担心，ARC模式改写了天规杜绝NSStackBlock状况的发生，他会自动将block拷贝到堆上去（block作为方法或函数的参数传递时，编译器不会自动调用copy方法），从而演变成了第三种NSMallocBlock，此时的堆上的block就会像一个ObjC对象一样被放入autoreleasepool里面，从而保证了返回后的block仍然可以正确执行。因此在本该是NSStackBlock的情况下打印结果就会变成NSMallocBlock。</p>\n<pre><code>typedef void (^StackBlock)();\nNSString *str = @&quot;henvy&quot;;\nStackBlock block = ^{\n    NSLog(@&quot;%@&quot;,str);\n};  //nslog :&lt;__NSMallocBlock__: 0x7fe412d18790&gt;</code></pre><ul>\n<li>NSMallocBlock</li>\n</ul>\n<p>该类型的block存储在堆区，引用外部变量，由NSStackBlock Block_copy()生成。在ARC模式下可以理解为只存在NSGlobalBlock和NSMallocBlock两种类型。</p>\n<p>###3、Block对外部变量的存储管理<br>我们都知道内存有堆和栈两个部分，堆在高地址向下走，栈在低地址向上走。在每个函数调用的时候，系统都会为其生成一个栈的stack frame，该函数结束后这个frame被弹出去；然而堆对象的生存不从属于某个函数，即便是创建这个堆对象的函数结束了，堆对象也可以继续存在，因此内存泄漏都是堆对象惹的祸，ObjC里的引用计数就是用来管理堆对象这个东西，由于arc中没有引用计数的概念，只有强引用和弱引用的概念。当一个变量没有指针指向它时，就会被系统释放。因此我们通过下面的代码分别来测试。</p>\n<ul>\n<li><p>静态变量、全局变量、全局静态变量</p>\n<pre><code>- (void)testStaticObj\n{\nstatic NSString *staticString = nil;\nstaticString = @&quot;henvy&quot;;\n\nprintf(&quot;%p\\n&quot;, &amp;staticString);//0x10b0d6138\nprintf(&quot;%p\\n&quot;, staticString);//0x10b0d5290\n\nvoid (^testBlock)() = ^{\n\nprintf(&quot;%p\\n&quot;, &amp;staticString);//0x10b0d6138\nprintf(&quot;%p\\n&quot;, staticString);//0x0\n\nNSLog(@&quot;%@&quot;, staticString);//null\n};\nstaticString = nil;\n\ntestBlock();\n}  </code></pre><p>我这里只放上静态变量的测试代码，同全局变量、全局静态变量。我们发现staticString对象在block的外部和内部对象地址、指针地址都不变，且都在堆区。全局变量和全局静态变量由于作用域在全局，所以在block内访问和读写这两类变量和普通函数没什么区别，而静态变量作用域在block之外，静态变量通过指针传递，将变量传递到block内，进而来修改变量的值，即所谓的地址传递。</p>\n</li>\n<li><p>局部变量</p>\n<pre><code>- (void)testLocalObj\n{\nNSString *localString = nil;\nlocalString = @&quot;henvy&quot;;\n\nprintf(&quot;%p\\n&quot;, &amp;localString); //0x7fff569cca48\nprintf(&quot;%p\\n&quot;, localString); //0x109234290\n\nvoid (^testBlock)(void) = ^{\n\nprintf(&quot;%p\\n&quot;, &amp;localString); //0x7fcd20511100\nprintf(&quot;%p\\n&quot;, localString); //0x109234290\n\nNSLog(@&quot;%@&quot;, localString); //henvy\n};\nlocalString = nil;\n\ntestBlock();\nprintf(&quot;%p\\n&quot;, &amp;localString); //0x7fff569cca48\nprintf(&quot;%p\\n&quot;, localString); //0x0\n}</code></pre><p>我们发现局部变量在block定义前在栈上开辟指针空间，在堆上开辟对象空间，当然遵循ObjC对象的规则，在block内部指针位置发生了变化，对象位置不变，在block定义后同定义前。因而我们发现block对于局部变量只对其对象的值进行了拷贝，并不关心局部变量在外面的死活，跟block内部没有半点关系，正所谓的值传递。</p>\n</li>\n<li><p>block变量</p>\n<pre><code>- (void)testBlockObj\n{\n__block NSString *blockString = @&quot;henvy&quot;;\nprintf(&quot;%p\\n&quot;, &amp;blockString); //0x7fff54507a38\nprintf(&quot;%p\\n&quot;, blockString); //0x10b6f9290\n\nvoid (^testBlock)(void) = ^{\nprintf(&quot;%p\\n&quot;, &amp;blockString); //0x7feb79c1e4b8\nprintf(&quot;%p\\n&quot;, blockString); //0x10b6f9290\n\nNSLog(@&quot;%@&quot;, blockString);//henvy\n};\n\ntestBlock();\nprintf(&quot;%p\\n&quot;, &amp;blockString); //0x7feb79c1e4b8\nprintf(&quot;%p\\n&quot;, blockString); //0x10b6f9290\n}</code></pre><p>我们发现<code>__block</code>修饰符的变量在block内部指针地址发生了变化，在block定义后地址彻底改为了新的地址，也就是说值彻底发生了变化，此时的blockString已经不是当年的那个blockString了。</p>\n</li>\n</ul>\n<p>总结一下：静态变量、全局变量和全局静态变量是通过指针传递，将变量传递到block内，进而来修改变量值。而外部变量是通过值传递，自然没法对获取到的外部变量进行修改，当我们需要修改外部变量时，可以用<code>__block</code>标记变量，也就是说没有<code>__block</code>标记的变量，其值会被复制一份到block私有内存区，而有<code>__block</code>标记的变量，其地址会被记录一份在block私有内存区。</p>\n<h3 id=\"4、Block循环引用\"><a href=\"#4、Block循环引用\" class=\"headerlink\" title=\"4、Block循环引用\"></a>4、Block循环引用</h3><p>了解了强弱引用之后循环引用的问题就很好理解了，在ARC下，copy到堆上的block会强引用进入到该block中的外部变量，这因而导致循环引用的问题，一旦出现循环引用那么对象就会常驻内存，这显然是谁都不想看到的结果。此时需要用到<code>__weak</code>来打破这个闭合的环。</p>\n<ul>\n<li>__weak</li>\n</ul>\n<p>ViewController控制器内有两个属性：</p>\n<pre><code>@property (nonatomic, copy)NSString *string;\n@property (nonatomic, copy)void(^myBlock)();</code></pre><p>在先分析下面的代码：</p>\n<pre><code>self.string = @&quot;henvy&quot;;\nself.myBlock = ^{\n    NSLog(@&quot;%@&quot;,self.string);\n};\nself.myBlock();</code></pre><p>首先self强引用myBlock，当myBlock被copy到堆上时，myBlock开始强引用self.string，myBlock的拥有者self在Block作用域内部又引用了自己，因此导致了Block的拥有者永远无法释放内存，就出现了循环引用的内存泄漏。解决办法是<code>__weak</code>：</p>\n<pre><code>#define HLWeakSelf(type)  __weak typeof(type) weak##type = type\nself.string = @&quot;henvy&quot;;\nHLWeakSelf(self);\nself.myBlock = ^{\n    NSLog(@&quot;%@&quot;,weakself.string);\n};\nself.myBlock();</code></pre><p><code>__weak</code>就在Block内部对拥有者使用弱引用，通过这种方式告诉block，不要在block内部对self进行强制strong引用了。</p>\n<ul>\n<li>weak-strong dance</li>\n</ul>\n<p>在有些特殊情况下，我们在block中又使用<code>__strong</code>来修饰这个在block外刚刚用<code>__weak</code>修饰的变量。这么做其实是为了避免在block的执行过程中，突然出现self被释放的尴尬情况而导致crash，官方说法weak-strong dance。列举经典到发光的AFNetworking中<code>AFNetworkReachabilityManager.m</code>的一段代码：</p>\n<pre><code>__weak __typeof(self)weakSelf = self;\nAFNetworkReachabilityStatusBlock callback = ^(AFNetworkReachabilityStatus status) {\n__strong __typeof(weakSelf)strongSelf = weakSelf;\n\nstrongSelf.networkReachabilityStatus = status;\nif (strongSelf.networkReachabilityStatusBlock) {\n    strongSelf.networkReachabilityStatusBlock(status);\n}\n};</code></pre><p>为了验证weak-strong dance下面我在一个HLBlockVC类中做如下实验，实验目的在于观察block中的weakSelf到底有没有释放，在该类中会并发两个线程，一个for循环到50后将weakSelf指针置空，另一个线程继续for循环到100，实验可能存在两种结果，一个是for循环到50block结束运行即失败，另一种情况block仍然继续输出到100即实验成功，下面代码说话：</p>\n<p>在HLBlockVC类的viewDidLoad方法中加载一个线程：</p>\n<pre><code>__block HLBlockVC *block = [[HLBlockVC alloc]init];\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    [block toPrintNum];\n});\nfor (int i = 0; i &lt; 51; i ++) {\n    if (i == 50) {\n        block = nil;\n        NSLog(@&quot;BLOCK WAS NIL&quot;);\n    }\n}</code></pre><p>添加toPrintNum方法，此时单单用weakSelf：</p>\n<pre><code>- (void) toPrintNum{\ntypedef void (^testBlock)();\n__weak __typeof(self)weakSelf = self;\ntestBlock block = ^{        \n    for (int i = 0; i &lt; 100; i ++) {\n        [weakSelf go:i];\n    }\n};\nblock();\n}\n\n-(void)go:(int)number{\nNSLog(@&quot;%d&quot;,number);\n}\n\n2016-12-30 17:02:23.791 blockDemo[8520:343178] 48\n2016-12-30 17:02:23.791 blockDemo[8520:343098] BLOCK WILL NIL\n2016-12-30 17:02:23.792 blockDemo[8520:343178] 49\n2016-12-30 17:02:23.792 blockDemo[8520:343098] BLOCK WILL NIL\n2016-12-30 17:02:23.792 blockDemo[8520:343178] 50\n2016-12-30 17:02:23.792 blockDemo[8520:343098] BLOCK WAS NIL</code></pre><p>代码很清晰，看上面的打印在循环到50的时候block被干掉了，执行结束，weakSelf下没问题。接下来换上weak-strong dance：</p>\n<pre><code>- (void) toPrintNum{\ntypedef void (^testBlock)();\n__weak __typeof(self) weakSelf = self;\ntestBlock block = ^{\n    __strong __typeof(weakSelf) strongSelf = weakSelf;\n\n    for (int i = 0; i &lt; 100; i ++) {\n        [strongSelf go:i];\n    }\n};\nblock();\n}\n\n2016-12-30 18:03:42.934 blockDemo[8752:353486] 97\n2016-12-30 18:03:42.935 blockDemo[8752:353486] 98\n2016-12-30 18:03:42.935 blockDemo[8752:353486] 99</code></pre><p>通过打印的数据可以看出__strong已经安全的保护了block中的weakSelf使之运行至block结束。可以说weak-strong dance是一种强引用 –&gt; 弱引用 –&gt; 强引用的变换过程，可能会被误解为绕了一圈什么都没做，其实不然，前者的强变弱是为了打破闭环的僵局，后者弱变强是为了block能够一直持有弱引用的对象生命，而strongSelf是一个自动变量会在函数执行完释放。</p>\n<h3 id=\"5、写在最后\"><a href=\"#5、写在最后\" class=\"headerlink\" title=\"5、写在最后\"></a>5、写在最后</h3><p>回想一下或许很多时候我们遇到的问题很小，确实，就像文中的weak-strong dance，小到我们连遇到他犯错的机会都甚少，但坚持把小事做透、以小见大方能防微杜渐，步步为营！</p>\n<p>夜深人静，除了键盘声，就是耳机里传来的歌声<a href=\"http://music.163.com/#/song?id=29750167\" target=\"_blank\" rel=\"noopener\">【旅行团–生命是场马拉松】</a>夹杂着深夜琐碎的思绪，希望每一次发文都是对自己的一次洗礼。最后，晚安。</p>\n","site":{"data":{}},"length":8190,"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>深究block可以说会涉及不少东西，笔者欲通过循序渐进的方式来谈及block相关，略陈固陋。</p>\n<p>阅读本文前，希望我们还是先一起来过一下几个概念：</p>\n<ul>\n<li>指针和对象，都是内存块。一个大，一个小。一个在栈中，一个在堆中。</li>\n<li>iOS中，我们可以生命一个指针，也可以通过alloc获取一块内存。</li>\n<li>我们可以直接消灭一个指针，将其置为nil，但是我们没办法直接消灭一块对象内存。对于对象内存，我们永远只能依靠系统去回收。即当这个对象不被任何指针所拥有时，系统就会收回该对象内存。</li>\n<li>函数在栈区，函数调用完毕后其stack frame将被弹出结束其生命周期。</li>\n<li>Objective-C的对象在内存中是以堆的方式分配空间。</li>\n</ul>","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>###1、ARC strong和weak指针<br>在讲block之前呢先讲一下strong和weak指针的问题，以便于更好的理解下面block中的循环引用以及变量截获等问题。我们知道ARC消除了手动管理内存的烦琐，编译器会自动在适当的地方插入适当的retain、release、autorelease语句。规则很简单，只要还有一个变量指向对象，对象就会保持在内存中。当指针指向新值，或者指针不再存在时，相关联的对象就会自动释放。如下图动画模拟引用计数回收器，红色闪烁表示引用计数行为，引用计数的优势在于垃圾会被很快检测到，你可以看到红色闪烁过后紧接着该区域变黑（<a href=\"https://github.com/kenfox/gc-viz\" target=\"_blank\" rel=\"noopener\">图片来自</a>）。</p>\n<p><img src=\"http://i1.piimg.com/582490/0e069c17c9f92dee.gif\" alt=\"REF_COUNT\"></p>\n<ul>\n<li>strong指针</li>\n</ul>\n<p>比如在控制器上有个nameField属性，我在文本框中输入henvy，那么就可以说，nameField的text属性是NSString对象的指针，也就是拥有者，该对象保存了文本输入框的内容。</p>\n<p><img src=\"http://p1.bpimg.com/582490/6a231599ff8c1e3b.png\" alt></p>\n<p>如果执行了<code>NSString *name = self.nameField.text;</code>后，@“henvy”对象就有了多个拥有者，也就是有两个指针指向同一个对象。</p>\n<p><img src=\"http://p1.bpimg.com/582490/e393fb17d17140dd.png\" alt></p>\n<p>接下来我又在文本框中输入了新的内容比如@”Leslie”，此时nameFeild的text属性就指向了新的NSString对象。但原来的NSString对象仍然还有一个所有者(name变量)，因此会继续保留在内存中。</p>\n<p><img src=\"http://p1.bpimg.com/582490/e52fc130e059e8f5.png\" alt></p>\n<p>当name变量获得新值,或者不再存在时(如局部变量方法返回时、实例变量对象释放时),原先的NSString对象就不再拥有任何所有者,retain计数降为0,这时对象会被释放<br>如，给name变量赋予一个新值<code>name = @&quot;Eason&quot;</code>时。</p>\n<p><img src=\"http://i1.piimg.com/582490/f851f317dea65dcf.png\" alt></p>\n<p>我们称name和nameField.text指针为”Strong指针”，因为它们能够保持对象的生命。默认所有成员变量和局部变量都是Strong指针。</p>\n<ul>\n<li>weak指针</li>\n</ul>\n<p>weak型的指针变量依然可以指向一个对象，但不属于对象的拥有者，就像我是很喜欢你，但是却得不到你一样。依然是我们上面的例子在输入框输入henvy后执行<code>__weak NSString *name = self.nameField.text;</code>后，虽然同时指向但name并不真正拥有henvy。</p>\n<p><img src=\"http://p1.bpimg.com/582490/95bd32d9b0749d01.png\" alt></p>\n<p>此时如果文本框内容重新输入@“Leslie”，则原先的henvy对象就没有拥有者，就会被释放，此时name变量会自动变成nil，称为空指针。weak型的指针变量自动变为nil避免了野指针的产生。</p>\n<p><img src=\"http://i1.piimg.com/582490/e1b0134308dc1e59.png\" alt></p>\n<p>举一个典型的weak指针的例子，即我们的代理模式，控制器ViewController强引用一个myTableView，myTableView的dataSource和delegate都是weak指针,指向你的ViewController。这也是cocoa设定的一个规则，即父对象建立子对象的强引用，而子对象只对父对象建立弱引用。</p>\n<p><img src=\"http://p1.bpimg.com/582490/1c82867a795ee3d8.png\" alt></p>\n<p>###2、Block的类型<br>好吧原谅我前面ARC讲了那么多，当然还是希望读者能够体会笔者的良苦用心。</p>\n<ul>\n<li>NSGlobalBlock</li>\n</ul>\n<p>该类型的block存储在程序的数据区域(text段)，不引用外部变量，只对自己的参数做操作，自给自足的状态，可以当做函数使用，例如：</p>\n<pre><code>typedef int (^GlobalBlock)(int);\nGlobalBlock block = ^(int count){\n    return count;\n};  //nslog:&lt;__NSGlobalBlock__: 0x10d090200&gt;</code></pre><ul>\n<li>NSStackBlock</li>\n</ul>\n<p>该类型的block在非ARC模式存储在栈区，内部引用外部变量，当栈block结束运行的时候会被请出栈，生命周期结束，再次调用当然crash掉，避免这一点可以通过手动copy将其拷贝到安全的堆上来，脱离栈的危险地带，因为本身栈区就是过河拆桥、兔死狗烹的状态。不像堆区讲究循环利用，生死由天定（无指针拥有被系统回收）。当然在ARC模式完全不用担心，ARC模式改写了天规杜绝NSStackBlock状况的发生，他会自动将block拷贝到堆上去（block作为方法或函数的参数传递时，编译器不会自动调用copy方法），从而演变成了第三种NSMallocBlock，此时的堆上的block就会像一个ObjC对象一样被放入autoreleasepool里面，从而保证了返回后的block仍然可以正确执行。因此在本该是NSStackBlock的情况下打印结果就会变成NSMallocBlock。</p>\n<pre><code>typedef void (^StackBlock)();\nNSString *str = @&quot;henvy&quot;;\nStackBlock block = ^{\n    NSLog(@&quot;%@&quot;,str);\n};  //nslog :&lt;__NSMallocBlock__: 0x7fe412d18790&gt;</code></pre><ul>\n<li>NSMallocBlock</li>\n</ul>\n<p>该类型的block存储在堆区，引用外部变量，由NSStackBlock Block_copy()生成。在ARC模式下可以理解为只存在NSGlobalBlock和NSMallocBlock两种类型。</p>\n<p>###3、Block对外部变量的存储管理<br>我们都知道内存有堆和栈两个部分，堆在高地址向下走，栈在低地址向上走。在每个函数调用的时候，系统都会为其生成一个栈的stack frame，该函数结束后这个frame被弹出去；然而堆对象的生存不从属于某个函数，即便是创建这个堆对象的函数结束了，堆对象也可以继续存在，因此内存泄漏都是堆对象惹的祸，ObjC里的引用计数就是用来管理堆对象这个东西，由于arc中没有引用计数的概念，只有强引用和弱引用的概念。当一个变量没有指针指向它时，就会被系统释放。因此我们通过下面的代码分别来测试。</p>\n<ul>\n<li><p>静态变量、全局变量、全局静态变量</p>\n<pre><code>- (void)testStaticObj\n{\nstatic NSString *staticString = nil;\nstaticString = @&quot;henvy&quot;;\n\nprintf(&quot;%p\\n&quot;, &amp;staticString);//0x10b0d6138\nprintf(&quot;%p\\n&quot;, staticString);//0x10b0d5290\n\nvoid (^testBlock)() = ^{\n\nprintf(&quot;%p\\n&quot;, &amp;staticString);//0x10b0d6138\nprintf(&quot;%p\\n&quot;, staticString);//0x0\n\nNSLog(@&quot;%@&quot;, staticString);//null\n};\nstaticString = nil;\n\ntestBlock();\n}  </code></pre><p>我这里只放上静态变量的测试代码，同全局变量、全局静态变量。我们发现staticString对象在block的外部和内部对象地址、指针地址都不变，且都在堆区。全局变量和全局静态变量由于作用域在全局，所以在block内访问和读写这两类变量和普通函数没什么区别，而静态变量作用域在block之外，静态变量通过指针传递，将变量传递到block内，进而来修改变量的值，即所谓的地址传递。</p>\n</li>\n<li><p>局部变量</p>\n<pre><code>- (void)testLocalObj\n{\nNSString *localString = nil;\nlocalString = @&quot;henvy&quot;;\n\nprintf(&quot;%p\\n&quot;, &amp;localString); //0x7fff569cca48\nprintf(&quot;%p\\n&quot;, localString); //0x109234290\n\nvoid (^testBlock)(void) = ^{\n\nprintf(&quot;%p\\n&quot;, &amp;localString); //0x7fcd20511100\nprintf(&quot;%p\\n&quot;, localString); //0x109234290\n\nNSLog(@&quot;%@&quot;, localString); //henvy\n};\nlocalString = nil;\n\ntestBlock();\nprintf(&quot;%p\\n&quot;, &amp;localString); //0x7fff569cca48\nprintf(&quot;%p\\n&quot;, localString); //0x0\n}</code></pre><p>我们发现局部变量在block定义前在栈上开辟指针空间，在堆上开辟对象空间，当然遵循ObjC对象的规则，在block内部指针位置发生了变化，对象位置不变，在block定义后同定义前。因而我们发现block对于局部变量只对其对象的值进行了拷贝，并不关心局部变量在外面的死活，跟block内部没有半点关系，正所谓的值传递。</p>\n</li>\n<li><p>block变量</p>\n<pre><code>- (void)testBlockObj\n{\n__block NSString *blockString = @&quot;henvy&quot;;\nprintf(&quot;%p\\n&quot;, &amp;blockString); //0x7fff54507a38\nprintf(&quot;%p\\n&quot;, blockString); //0x10b6f9290\n\nvoid (^testBlock)(void) = ^{\nprintf(&quot;%p\\n&quot;, &amp;blockString); //0x7feb79c1e4b8\nprintf(&quot;%p\\n&quot;, blockString); //0x10b6f9290\n\nNSLog(@&quot;%@&quot;, blockString);//henvy\n};\n\ntestBlock();\nprintf(&quot;%p\\n&quot;, &amp;blockString); //0x7feb79c1e4b8\nprintf(&quot;%p\\n&quot;, blockString); //0x10b6f9290\n}</code></pre><p>我们发现<code>__block</code>修饰符的变量在block内部指针地址发生了变化，在block定义后地址彻底改为了新的地址，也就是说值彻底发生了变化，此时的blockString已经不是当年的那个blockString了。</p>\n</li>\n</ul>\n<p>总结一下：静态变量、全局变量和全局静态变量是通过指针传递，将变量传递到block内，进而来修改变量值。而外部变量是通过值传递，自然没法对获取到的外部变量进行修改，当我们需要修改外部变量时，可以用<code>__block</code>标记变量，也就是说没有<code>__block</code>标记的变量，其值会被复制一份到block私有内存区，而有<code>__block</code>标记的变量，其地址会被记录一份在block私有内存区。</p>\n<h3 id=\"4、Block循环引用\"><a href=\"#4、Block循环引用\" class=\"headerlink\" title=\"4、Block循环引用\"></a>4、Block循环引用</h3><p>了解了强弱引用之后循环引用的问题就很好理解了，在ARC下，copy到堆上的block会强引用进入到该block中的外部变量，这因而导致循环引用的问题，一旦出现循环引用那么对象就会常驻内存，这显然是谁都不想看到的结果。此时需要用到<code>__weak</code>来打破这个闭合的环。</p>\n<ul>\n<li>__weak</li>\n</ul>\n<p>ViewController控制器内有两个属性：</p>\n<pre><code>@property (nonatomic, copy)NSString *string;\n@property (nonatomic, copy)void(^myBlock)();</code></pre><p>在先分析下面的代码：</p>\n<pre><code>self.string = @&quot;henvy&quot;;\nself.myBlock = ^{\n    NSLog(@&quot;%@&quot;,self.string);\n};\nself.myBlock();</code></pre><p>首先self强引用myBlock，当myBlock被copy到堆上时，myBlock开始强引用self.string，myBlock的拥有者self在Block作用域内部又引用了自己，因此导致了Block的拥有者永远无法释放内存，就出现了循环引用的内存泄漏。解决办法是<code>__weak</code>：</p>\n<pre><code>#define HLWeakSelf(type)  __weak typeof(type) weak##type = type\nself.string = @&quot;henvy&quot;;\nHLWeakSelf(self);\nself.myBlock = ^{\n    NSLog(@&quot;%@&quot;,weakself.string);\n};\nself.myBlock();</code></pre><p><code>__weak</code>就在Block内部对拥有者使用弱引用，通过这种方式告诉block，不要在block内部对self进行强制strong引用了。</p>\n<ul>\n<li>weak-strong dance</li>\n</ul>\n<p>在有些特殊情况下，我们在block中又使用<code>__strong</code>来修饰这个在block外刚刚用<code>__weak</code>修饰的变量。这么做其实是为了避免在block的执行过程中，突然出现self被释放的尴尬情况而导致crash，官方说法weak-strong dance。列举经典到发光的AFNetworking中<code>AFNetworkReachabilityManager.m</code>的一段代码：</p>\n<pre><code>__weak __typeof(self)weakSelf = self;\nAFNetworkReachabilityStatusBlock callback = ^(AFNetworkReachabilityStatus status) {\n__strong __typeof(weakSelf)strongSelf = weakSelf;\n\nstrongSelf.networkReachabilityStatus = status;\nif (strongSelf.networkReachabilityStatusBlock) {\n    strongSelf.networkReachabilityStatusBlock(status);\n}\n};</code></pre><p>为了验证weak-strong dance下面我在一个HLBlockVC类中做如下实验，实验目的在于观察block中的weakSelf到底有没有释放，在该类中会并发两个线程，一个for循环到50后将weakSelf指针置空，另一个线程继续for循环到100，实验可能存在两种结果，一个是for循环到50block结束运行即失败，另一种情况block仍然继续输出到100即实验成功，下面代码说话：</p>\n<p>在HLBlockVC类的viewDidLoad方法中加载一个线程：</p>\n<pre><code>__block HLBlockVC *block = [[HLBlockVC alloc]init];\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    [block toPrintNum];\n});\nfor (int i = 0; i &lt; 51; i ++) {\n    if (i == 50) {\n        block = nil;\n        NSLog(@&quot;BLOCK WAS NIL&quot;);\n    }\n}</code></pre><p>添加toPrintNum方法，此时单单用weakSelf：</p>\n<pre><code>- (void) toPrintNum{\ntypedef void (^testBlock)();\n__weak __typeof(self)weakSelf = self;\ntestBlock block = ^{        \n    for (int i = 0; i &lt; 100; i ++) {\n        [weakSelf go:i];\n    }\n};\nblock();\n}\n\n-(void)go:(int)number{\nNSLog(@&quot;%d&quot;,number);\n}\n\n2016-12-30 17:02:23.791 blockDemo[8520:343178] 48\n2016-12-30 17:02:23.791 blockDemo[8520:343098] BLOCK WILL NIL\n2016-12-30 17:02:23.792 blockDemo[8520:343178] 49\n2016-12-30 17:02:23.792 blockDemo[8520:343098] BLOCK WILL NIL\n2016-12-30 17:02:23.792 blockDemo[8520:343178] 50\n2016-12-30 17:02:23.792 blockDemo[8520:343098] BLOCK WAS NIL</code></pre><p>代码很清晰，看上面的打印在循环到50的时候block被干掉了，执行结束，weakSelf下没问题。接下来换上weak-strong dance：</p>\n<pre><code>- (void) toPrintNum{\ntypedef void (^testBlock)();\n__weak __typeof(self) weakSelf = self;\ntestBlock block = ^{\n    __strong __typeof(weakSelf) strongSelf = weakSelf;\n\n    for (int i = 0; i &lt; 100; i ++) {\n        [strongSelf go:i];\n    }\n};\nblock();\n}\n\n2016-12-30 18:03:42.934 blockDemo[8752:353486] 97\n2016-12-30 18:03:42.935 blockDemo[8752:353486] 98\n2016-12-30 18:03:42.935 blockDemo[8752:353486] 99</code></pre><p>通过打印的数据可以看出__strong已经安全的保护了block中的weakSelf使之运行至block结束。可以说weak-strong dance是一种强引用 –&gt; 弱引用 –&gt; 强引用的变换过程，可能会被误解为绕了一圈什么都没做，其实不然，前者的强变弱是为了打破闭环的僵局，后者弱变强是为了block能够一直持有弱引用的对象生命，而strongSelf是一个自动变量会在函数执行完释放。</p>\n<h3 id=\"5、写在最后\"><a href=\"#5、写在最后\" class=\"headerlink\" title=\"5、写在最后\"></a>5、写在最后</h3><p>回想一下或许很多时候我们遇到的问题很小，确实，就像文中的weak-strong dance，小到我们连遇到他犯错的机会都甚少，但坚持把小事做透、以小见大方能防微杜渐，步步为营！</p>\n<p>夜深人静，除了键盘声，就是耳机里传来的歌声<a href=\"http://music.163.com/#/song?id=29750167\" target=\"_blank\" rel=\"noopener\">【旅行团–生命是场马拉松】</a>夹杂着深夜琐碎的思绪，希望每一次发文都是对自己的一次洗礼。最后，晚安。</p>"},{"title":"PSOF Terms & Privacy Policy.","urlPath":"PSOF&TermsPrivacyPolicy","date":"2018-08-08T16:00:00.000Z","updated":"2018-08-09T16:00:00.000Z","_content":"\n\n## Terms of Use\n####1. Accept the terms\n\nThe PSOF Mobile App (hereafter referred to as \"this APP\") is available to you in accordance with the following Terms of Service.\n\n<!-- more -->\n \n\nThese terms may be updated by us at any time without prior notice. The PSOF Use Agreement (hereinafter referred to as the “Usage Agreement”) will be posted on the APP with the modified content or content link. Once the revised usage agreement is announced, it effectively replaces the original usage agreement. You should read this usage agreement carefully before using the services provided by this app. If you do not agree to the use agreement and/or modify it at any time, please stop using all the services provided by us immediately; once you use the service, you are deemed to have understood and fully agreed to the contents of this agreement. , including any modifications made by us to the use agreement at any time, and become the APP user (hereinafter referred to as \"user\").\n\n<!--more-->\n\n####2. Compliance with the law\nYou agree to abide by all the provisions of the relevant laws and regulations of the People's Republic of China and assume full responsibility for any use of your password and your account for any use of the Service and its results. If your conduct violates any of the provisions of national laws and regulations and may constitute a crime, you will be held criminally liable and you will bear full legal responsibility. At the same time, if we have reason to believe that any of your actions, including but not limited to any of your statements and other acts that violate or may violate any of the laws and regulations of the country, we may terminate the offer to you at any time without prior notice. service.\n\n####3. Registration obligations\nIn order to use this service, you agree to the following: According to the service registration instructions, please fill in the correct registration email address, password, and ensure the validity and legality of the updated login mailbox, avatar and other information in the future. We reserve the right to suspend or terminate your account and services if you provide any material that is illegal, unethical, or that we believe is not suitable for display on our side; or if we have reason to suspect that your information is a program or malicious operation. You are not allowed to use all or any part of the Service now and in the future.We are not responsible for any registration of any user, including but not limited to the identification, verification of the authenticity, correctness, completeness, suitability and/or responsibility of any registration information.\n\n####4. User account, password and security\nAfter completing the registration process for this service and successfully registering, you can use your username and password to log in to your account in this app (\"Account\"). It is your responsibility and obligation to protect the security of your account.\nYou are solely responsible for all activities that use your password and account number. You agree to:\n\n 4.1 If your account is unauthorised or if there are any other security issues, you will pass us immediately;\n\n 4.2 If you lose any damages or damages in order to keep your account and password, we cannot and do not bear the heat and responsibility;\n\n 4.3 Each user is solely responsible for all actions and events in his account. You are solely responsible for any damage caused to you, us or third parties without your account and password.\n \n####5. Our Privacy Policy\nThe registration information you provide and certain other information that we have about you will be governed by China's privacy laws and our PSOF APP Privacy Policy.\n\n####6. Provider's responsibility \nIn accordance with the relevant laws and regulations, we hereby solemnly draw your attention to the fact that any text images or other materials (hereinafter referred to as \"contents\") posted and uploaded via the Service, whether transmitted publicly or privately, are the responsibility of the content provider. . We only provide content storage space for users, and we cannot control the content transmitted through this service, so the correctness, integrity or quality of the content is not guaranteed. You are aware that you may be exposed to unpleasant, inappropriate or objectionable content when using the Service. In no event shall we be liable for any content, but we have the right to stop transmitting any of the foregoing and act accordingly, including but not limited to suspending the user from using all or part of the service, keeping the records and Report by relevant authorities.\n\n\n####7. User behavior \nThe User agrees that the Service will not be used for any illegal or improper activities, including but not limited to the following:\n\n1) Publish or otherwise transmit information containing one of the following:\n\n• Oppose the basic principles established by the Constitution;\n\n• Endanger national security, divulge state secrets, subvert state power, and undermine national unity;\n\n• Damage to national honours and interests;\n\n• Inciting ethnic hatred, ethnic discrimination, and undermining national unity;\n\n• Destroy national religious policies and promote cults and feudal superstitions;\n\n• Spread rumors, disrupt social order and undermine social stability;\n\n• spreading obscenity, pornography, gambling, violence, murder, terror or abetment;\n\n• Insulting or slandering others and infringing on the legal rights of others;\n\n• Contains false, fraudulent, harmful, coercive, infringing on the privacy, harassment, infringement, slander, vulgarity, embarrassment, or other morally objectionable content;\n\n• Contains Chinese laws, regulations, rules, regulations, and other content that is restricted or prohibited by legally binding norms;\n\n• Contains content that we believe is not suitable for display on our side;\n\n2) harming the lawful rights and interests of others in any way;\n\n3) pretending to be any other person or institution, or making a false or false statement or lied about any person or institution;\n\n4) Publish, send e-mail or other content that is known to, but not authorized to transmit, in accordance with any law or contract or legal relationship (eg, due to employment relationships and internal information, proprietary and confidential information known or disclosed under confidentiality contracts) Mode transfer\n\n5) Publish or otherwise transmit the contents of copyrights, patents, trademarks, trade secrets, or other proprietary rights (hereinafter referred to as \"exclusive rights\") that infringe upon others;\n\n6) Publish, send or otherwise transmit any advertising letter, promotional materials, \"spam\", \"spamming letters\", \"chain letters\", \"direct sales\" or any other form of persuasive material;\n\n7) Computer viruses designed to interfere with, disrupt or limit the functionality of any computer software, hardware or communication device (including but not limited to trojan horses, worms, time bombs, cancelbots (below) Any material of computer code, files and programs, or any other computer code, file or program, posted, transmitted or otherwise transmitted;\n\n8) interfere with or damage the server or network connected to the Service or the Service, or violate any rules, procedures, policies or specifications regarding the Service Connection Network;\n\n9) tracking, human flesh search or otherwise harassing others;\n\n10) intentionally or unintentionally violate any applicable local, national law, and any legally binding rules;\n\n11) intercept, tamper with, collect, store or delete other people's personal information, on-site mail or other data, or use such information for any illegal or improper purpose without legal authorization.\n\nYou acknowledge that we have not exercised full control over the user's use. When you use any content, including relying on the correctness, completeness or usefulness of the foregoing, you agree that you will judge and assume all risks without relying on it. On my side. However, in its sole discretion, we reject and remove any content that may be provided by the Service that violates these Terms or otherwise causes us to object.\n\nYou understand and agree that we may save or disclose the content in accordance with the requirements of laws and regulations, or based on good faith, for the following purposes or within reasonable limits, to determine that the content must be preserved or disclosed:\n\na) comply with legal procedures;\n\nb) the implementation of this usage agreement;\n\nc) respond to any third party's claims;\n\nd) protect the rights, property or personal safety of our users, their users and the public;\n\ne) Other circumstances that we believe are necessary.\n\n####8. Service modification\n\nWe reserve the right to modify or terminate this Service (or any part thereof) temporarily or permanently at any time, with or without notice. You agree that you will not be liable to you or any third party for any modification, suspension or termination of the Service.\n\n####9. Termination of service\n\nYou agree that we terminate your account or use of the Service (or any of the Services for any reason, including but not limited to lack of use, or that we believe that you have violated the letter and spirit of this Agreement of Use, for any reason; Partially) and remove and remove any content from you within the Service. You agree that the Service provided under any provision of this Agreement may be interrupted or terminated without prior notice. You acknowledge and agree that we may immediately close or delete your account and all relevant information and documents in your account, and / Or continue to use the aforementioned documents or the Service. In addition, you agree that we will not be liable to you or any third party if the use of the Service is interrupted or terminated or your account and related information and documents are closed or deleted.\n\n###Privacy Policy\n\nThis Privacy Policy explains what information the PSOF APP (collectively referred to as \"the App\") collects and how it is used when you access our software, applications, products, or related services (collectively, the \"Services\"). Except as described in this Privacy Policy, we will not use your information in any other way or share it with anyone else.\n\nThis service and this app value your privacy. We may collect and use your information when you use our services. We hope that this Privacy Policy will explain how we collect, use, store, and how we access, update, control, and protect this information when you use our services. This Privacy Policy is relevant to the application you use and we hope that you will read it carefully and, if necessary, follow the guidelines in this Privacy Policy to make the choices you deem appropriate. For the technical vocabulary involved in this Privacy Policy, we will try to explain it to you in a concise and concise manner, and provide a link for further explanation for your understanding.\n\nInformation we collect\n\nWe may collect your personal information (for example, your email) through our services in the following circumstances: (i) you register your account with this app, (ii) you register our notice, or (iii) you are User content includes personal information (as defined below). Other information that you are sure to provide to us is usually kept with your personal information. You may choose not to provide any information we request from you. However, this may limit your ability to use the service and this app.\n\nIn addition to collecting information on the service, we may also collect information from you when you communicate with us via WeChat, QQ, telephone (including via SMS) or email. This information may include personal information. This information may be matched and stored with the personal information provided or collected for the service.\n\nHow we use your information\n\nWe may or may use personal and browsing information for a variety of purposes, including:\n\nUsed to operate services, monitor service effectiveness, improve service content, layout, and design.\n\nUsed to help provide a smooth and efficient user experience.\n\nUsed for billing, identification and authentication, and to prevent fraud.\n\nUsed to respond to any inquiries or requests you have made.\n\nUsed to monitor, analyze, and describe usage patterns and performance of services, including aggregated data such as total visitor count, traffic, and demographic patterns.\n\nUsed to contact you and provide management notifications and communications about your use of the service, such as security or support and maintenance advice.\n\nUsed for system management and system troubleshooting as well as diagnostic or repair technical issues.\n\nUsed to comply with legal requirements and procedures (for example, responding to subpoenas, court orders, law enforcement or government requests or investigations), pro\n\ntecting our legal rights or the rights of others (for example, by working to reduce the risk of fraud or abuse of services).\n\nUsed to enforce our Terms of Use or other policies or agreements.\n\n\nAbout sharing your information\n\nPersonal Information: We will not share or sell any of your personal information or share your personal information with independent third party marketing purposes.\n\nAnonymous data information: We may share non-personally identifiable information (such as anonymous usage data, association/exit pages and URLs, platform types, clicks, etc.) with relevant third parties to help them understand the usage patterns of our services. Non-personally identifiable information may be stored indefinitely.\n\nMinors use our services\n\nMinors under the age of 18 should obtain written permission from the guardian to use our services. Parents or guardians of underage users are requested to read this Privacy Policy and advise minors to seek parental consent or guidance from their parents or guardians before submitting personal information and using the Services.\n\nchange\n\nWe may revise the terms of this Privacy Policy as appropriate and such amendments form part of this Privacy Policy. If these amendments result in a substantial reduction in your rights under this Privacy Policy, we will send you an email or otherwise notify you by making a prominent notice on the App before the amendment takes effect. In such cases, your continued use of our services constitutes your agreement to be bound by this revised Privacy Policy.","source":"_posts/SparkseedTerms &PrivacyPolicy.md","raw":"---\ntitle: PSOF Terms & Privacy Policy.\nurlPath: PSOF&TermsPrivacyPolicy\ndate: 2018-08-09\nupdated: 2018-08-10\n\n---\n\n\n## Terms of Use\n####1. Accept the terms\n\nThe PSOF Mobile App (hereafter referred to as \"this APP\") is available to you in accordance with the following Terms of Service.\n\n<!-- more -->\n \n\nThese terms may be updated by us at any time without prior notice. The PSOF Use Agreement (hereinafter referred to as the “Usage Agreement”) will be posted on the APP with the modified content or content link. Once the revised usage agreement is announced, it effectively replaces the original usage agreement. You should read this usage agreement carefully before using the services provided by this app. If you do not agree to the use agreement and/or modify it at any time, please stop using all the services provided by us immediately; once you use the service, you are deemed to have understood and fully agreed to the contents of this agreement. , including any modifications made by us to the use agreement at any time, and become the APP user (hereinafter referred to as \"user\").\n\n<!--more-->\n\n####2. Compliance with the law\nYou agree to abide by all the provisions of the relevant laws and regulations of the People's Republic of China and assume full responsibility for any use of your password and your account for any use of the Service and its results. If your conduct violates any of the provisions of national laws and regulations and may constitute a crime, you will be held criminally liable and you will bear full legal responsibility. At the same time, if we have reason to believe that any of your actions, including but not limited to any of your statements and other acts that violate or may violate any of the laws and regulations of the country, we may terminate the offer to you at any time without prior notice. service.\n\n####3. Registration obligations\nIn order to use this service, you agree to the following: According to the service registration instructions, please fill in the correct registration email address, password, and ensure the validity and legality of the updated login mailbox, avatar and other information in the future. We reserve the right to suspend or terminate your account and services if you provide any material that is illegal, unethical, or that we believe is not suitable for display on our side; or if we have reason to suspect that your information is a program or malicious operation. You are not allowed to use all or any part of the Service now and in the future.We are not responsible for any registration of any user, including but not limited to the identification, verification of the authenticity, correctness, completeness, suitability and/or responsibility of any registration information.\n\n####4. User account, password and security\nAfter completing the registration process for this service and successfully registering, you can use your username and password to log in to your account in this app (\"Account\"). It is your responsibility and obligation to protect the security of your account.\nYou are solely responsible for all activities that use your password and account number. You agree to:\n\n 4.1 If your account is unauthorised or if there are any other security issues, you will pass us immediately;\n\n 4.2 If you lose any damages or damages in order to keep your account and password, we cannot and do not bear the heat and responsibility;\n\n 4.3 Each user is solely responsible for all actions and events in his account. You are solely responsible for any damage caused to you, us or third parties without your account and password.\n \n####5. Our Privacy Policy\nThe registration information you provide and certain other information that we have about you will be governed by China's privacy laws and our PSOF APP Privacy Policy.\n\n####6. Provider's responsibility \nIn accordance with the relevant laws and regulations, we hereby solemnly draw your attention to the fact that any text images or other materials (hereinafter referred to as \"contents\") posted and uploaded via the Service, whether transmitted publicly or privately, are the responsibility of the content provider. . We only provide content storage space for users, and we cannot control the content transmitted through this service, so the correctness, integrity or quality of the content is not guaranteed. You are aware that you may be exposed to unpleasant, inappropriate or objectionable content when using the Service. In no event shall we be liable for any content, but we have the right to stop transmitting any of the foregoing and act accordingly, including but not limited to suspending the user from using all or part of the service, keeping the records and Report by relevant authorities.\n\n\n####7. User behavior \nThe User agrees that the Service will not be used for any illegal or improper activities, including but not limited to the following:\n\n1) Publish or otherwise transmit information containing one of the following:\n\n• Oppose the basic principles established by the Constitution;\n\n• Endanger national security, divulge state secrets, subvert state power, and undermine national unity;\n\n• Damage to national honours and interests;\n\n• Inciting ethnic hatred, ethnic discrimination, and undermining national unity;\n\n• Destroy national religious policies and promote cults and feudal superstitions;\n\n• Spread rumors, disrupt social order and undermine social stability;\n\n• spreading obscenity, pornography, gambling, violence, murder, terror or abetment;\n\n• Insulting or slandering others and infringing on the legal rights of others;\n\n• Contains false, fraudulent, harmful, coercive, infringing on the privacy, harassment, infringement, slander, vulgarity, embarrassment, or other morally objectionable content;\n\n• Contains Chinese laws, regulations, rules, regulations, and other content that is restricted or prohibited by legally binding norms;\n\n• Contains content that we believe is not suitable for display on our side;\n\n2) harming the lawful rights and interests of others in any way;\n\n3) pretending to be any other person or institution, or making a false or false statement or lied about any person or institution;\n\n4) Publish, send e-mail or other content that is known to, but not authorized to transmit, in accordance with any law or contract or legal relationship (eg, due to employment relationships and internal information, proprietary and confidential information known or disclosed under confidentiality contracts) Mode transfer\n\n5) Publish or otherwise transmit the contents of copyrights, patents, trademarks, trade secrets, or other proprietary rights (hereinafter referred to as \"exclusive rights\") that infringe upon others;\n\n6) Publish, send or otherwise transmit any advertising letter, promotional materials, \"spam\", \"spamming letters\", \"chain letters\", \"direct sales\" or any other form of persuasive material;\n\n7) Computer viruses designed to interfere with, disrupt or limit the functionality of any computer software, hardware or communication device (including but not limited to trojan horses, worms, time bombs, cancelbots (below) Any material of computer code, files and programs, or any other computer code, file or program, posted, transmitted or otherwise transmitted;\n\n8) interfere with or damage the server or network connected to the Service or the Service, or violate any rules, procedures, policies or specifications regarding the Service Connection Network;\n\n9) tracking, human flesh search or otherwise harassing others;\n\n10) intentionally or unintentionally violate any applicable local, national law, and any legally binding rules;\n\n11) intercept, tamper with, collect, store or delete other people's personal information, on-site mail or other data, or use such information for any illegal or improper purpose without legal authorization.\n\nYou acknowledge that we have not exercised full control over the user's use. When you use any content, including relying on the correctness, completeness or usefulness of the foregoing, you agree that you will judge and assume all risks without relying on it. On my side. However, in its sole discretion, we reject and remove any content that may be provided by the Service that violates these Terms or otherwise causes us to object.\n\nYou understand and agree that we may save or disclose the content in accordance with the requirements of laws and regulations, or based on good faith, for the following purposes or within reasonable limits, to determine that the content must be preserved or disclosed:\n\na) comply with legal procedures;\n\nb) the implementation of this usage agreement;\n\nc) respond to any third party's claims;\n\nd) protect the rights, property or personal safety of our users, their users and the public;\n\ne) Other circumstances that we believe are necessary.\n\n####8. Service modification\n\nWe reserve the right to modify or terminate this Service (or any part thereof) temporarily or permanently at any time, with or without notice. You agree that you will not be liable to you or any third party for any modification, suspension or termination of the Service.\n\n####9. Termination of service\n\nYou agree that we terminate your account or use of the Service (or any of the Services for any reason, including but not limited to lack of use, or that we believe that you have violated the letter and spirit of this Agreement of Use, for any reason; Partially) and remove and remove any content from you within the Service. You agree that the Service provided under any provision of this Agreement may be interrupted or terminated without prior notice. You acknowledge and agree that we may immediately close or delete your account and all relevant information and documents in your account, and / Or continue to use the aforementioned documents or the Service. In addition, you agree that we will not be liable to you or any third party if the use of the Service is interrupted or terminated or your account and related information and documents are closed or deleted.\n\n###Privacy Policy\n\nThis Privacy Policy explains what information the PSOF APP (collectively referred to as \"the App\") collects and how it is used when you access our software, applications, products, or related services (collectively, the \"Services\"). Except as described in this Privacy Policy, we will not use your information in any other way or share it with anyone else.\n\nThis service and this app value your privacy. We may collect and use your information when you use our services. We hope that this Privacy Policy will explain how we collect, use, store, and how we access, update, control, and protect this information when you use our services. This Privacy Policy is relevant to the application you use and we hope that you will read it carefully and, if necessary, follow the guidelines in this Privacy Policy to make the choices you deem appropriate. For the technical vocabulary involved in this Privacy Policy, we will try to explain it to you in a concise and concise manner, and provide a link for further explanation for your understanding.\n\nInformation we collect\n\nWe may collect your personal information (for example, your email) through our services in the following circumstances: (i) you register your account with this app, (ii) you register our notice, or (iii) you are User content includes personal information (as defined below). Other information that you are sure to provide to us is usually kept with your personal information. You may choose not to provide any information we request from you. However, this may limit your ability to use the service and this app.\n\nIn addition to collecting information on the service, we may also collect information from you when you communicate with us via WeChat, QQ, telephone (including via SMS) or email. This information may include personal information. This information may be matched and stored with the personal information provided or collected for the service.\n\nHow we use your information\n\nWe may or may use personal and browsing information for a variety of purposes, including:\n\nUsed to operate services, monitor service effectiveness, improve service content, layout, and design.\n\nUsed to help provide a smooth and efficient user experience.\n\nUsed for billing, identification and authentication, and to prevent fraud.\n\nUsed to respond to any inquiries or requests you have made.\n\nUsed to monitor, analyze, and describe usage patterns and performance of services, including aggregated data such as total visitor count, traffic, and demographic patterns.\n\nUsed to contact you and provide management notifications and communications about your use of the service, such as security or support and maintenance advice.\n\nUsed for system management and system troubleshooting as well as diagnostic or repair technical issues.\n\nUsed to comply with legal requirements and procedures (for example, responding to subpoenas, court orders, law enforcement or government requests or investigations), pro\n\ntecting our legal rights or the rights of others (for example, by working to reduce the risk of fraud or abuse of services).\n\nUsed to enforce our Terms of Use or other policies or agreements.\n\n\nAbout sharing your information\n\nPersonal Information: We will not share or sell any of your personal information or share your personal information with independent third party marketing purposes.\n\nAnonymous data information: We may share non-personally identifiable information (such as anonymous usage data, association/exit pages and URLs, platform types, clicks, etc.) with relevant third parties to help them understand the usage patterns of our services. Non-personally identifiable information may be stored indefinitely.\n\nMinors use our services\n\nMinors under the age of 18 should obtain written permission from the guardian to use our services. Parents or guardians of underage users are requested to read this Privacy Policy and advise minors to seek parental consent or guidance from their parents or guardians before submitting personal information and using the Services.\n\nchange\n\nWe may revise the terms of this Privacy Policy as appropriate and such amendments form part of this Privacy Policy. If these amendments result in a substantial reduction in your rights under this Privacy Policy, we will send you an email or otherwise notify you by making a prominent notice on the App before the amendment takes effect. In such cases, your continued use of our services constitutes your agreement to be bound by this revised Privacy Policy.","slug":"SparkseedTerms &PrivacyPolicy","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck05d9ek50012js4axurfa896","content":"<h2 id=\"Terms-of-Use\"><a href=\"#Terms-of-Use\" class=\"headerlink\" title=\"Terms of Use\"></a>Terms of Use</h2><p>####1. Accept the terms</p>\n<p>The PSOF Mobile App (hereafter referred to as “this APP”) is available to you in accordance with the following Terms of Service.</p>\n<a id=\"more\"></a>\n\n\n<p>These terms may be updated by us at any time without prior notice. The PSOF Use Agreement (hereinafter referred to as the “Usage Agreement”) will be posted on the APP with the modified content or content link. Once the revised usage agreement is announced, it effectively replaces the original usage agreement. You should read this usage agreement carefully before using the services provided by this app. If you do not agree to the use agreement and/or modify it at any time, please stop using all the services provided by us immediately; once you use the service, you are deemed to have understood and fully agreed to the contents of this agreement. , including any modifications made by us to the use agreement at any time, and become the APP user (hereinafter referred to as “user”).</p>\n<!--more-->\n\n<p>####2. Compliance with the law<br>You agree to abide by all the provisions of the relevant laws and regulations of the People’s Republic of China and assume full responsibility for any use of your password and your account for any use of the Service and its results. If your conduct violates any of the provisions of national laws and regulations and may constitute a crime, you will be held criminally liable and you will bear full legal responsibility. At the same time, if we have reason to believe that any of your actions, including but not limited to any of your statements and other acts that violate or may violate any of the laws and regulations of the country, we may terminate the offer to you at any time without prior notice. service.</p>\n<p>####3. Registration obligations<br>In order to use this service, you agree to the following: According to the service registration instructions, please fill in the correct registration email address, password, and ensure the validity and legality of the updated login mailbox, avatar and other information in the future. We reserve the right to suspend or terminate your account and services if you provide any material that is illegal, unethical, or that we believe is not suitable for display on our side; or if we have reason to suspect that your information is a program or malicious operation. You are not allowed to use all or any part of the Service now and in the future.We are not responsible for any registration of any user, including but not limited to the identification, verification of the authenticity, correctness, completeness, suitability and/or responsibility of any registration information.</p>\n<p>####4. User account, password and security<br>After completing the registration process for this service and successfully registering, you can use your username and password to log in to your account in this app (“Account”). It is your responsibility and obligation to protect the security of your account.<br>You are solely responsible for all activities that use your password and account number. You agree to:</p>\n<p> 4.1 If your account is unauthorised or if there are any other security issues, you will pass us immediately;</p>\n<p> 4.2 If you lose any damages or damages in order to keep your account and password, we cannot and do not bear the heat and responsibility;</p>\n<p> 4.3 Each user is solely responsible for all actions and events in his account. You are solely responsible for any damage caused to you, us or third parties without your account and password.</p>\n<p>####5. Our Privacy Policy<br>The registration information you provide and certain other information that we have about you will be governed by China’s privacy laws and our PSOF APP Privacy Policy.</p>\n<p>####6. Provider’s responsibility<br>In accordance with the relevant laws and regulations, we hereby solemnly draw your attention to the fact that any text images or other materials (hereinafter referred to as “contents”) posted and uploaded via the Service, whether transmitted publicly or privately, are the responsibility of the content provider. . We only provide content storage space for users, and we cannot control the content transmitted through this service, so the correctness, integrity or quality of the content is not guaranteed. You are aware that you may be exposed to unpleasant, inappropriate or objectionable content when using the Service. In no event shall we be liable for any content, but we have the right to stop transmitting any of the foregoing and act accordingly, including but not limited to suspending the user from using all or part of the service, keeping the records and Report by relevant authorities.</p>\n<p>####7. User behavior<br>The User agrees that the Service will not be used for any illegal or improper activities, including but not limited to the following:</p>\n<p>1) Publish or otherwise transmit information containing one of the following:</p>\n<p>• Oppose the basic principles established by the Constitution;</p>\n<p>• Endanger national security, divulge state secrets, subvert state power, and undermine national unity;</p>\n<p>• Damage to national honours and interests;</p>\n<p>• Inciting ethnic hatred, ethnic discrimination, and undermining national unity;</p>\n<p>• Destroy national religious policies and promote cults and feudal superstitions;</p>\n<p>• Spread rumors, disrupt social order and undermine social stability;</p>\n<p>• spreading obscenity, pornography, gambling, violence, murder, terror or abetment;</p>\n<p>• Insulting or slandering others and infringing on the legal rights of others;</p>\n<p>• Contains false, fraudulent, harmful, coercive, infringing on the privacy, harassment, infringement, slander, vulgarity, embarrassment, or other morally objectionable content;</p>\n<p>• Contains Chinese laws, regulations, rules, regulations, and other content that is restricted or prohibited by legally binding norms;</p>\n<p>• Contains content that we believe is not suitable for display on our side;</p>\n<p>2) harming the lawful rights and interests of others in any way;</p>\n<p>3) pretending to be any other person or institution, or making a false or false statement or lied about any person or institution;</p>\n<p>4) Publish, send e-mail or other content that is known to, but not authorized to transmit, in accordance with any law or contract or legal relationship (eg, due to employment relationships and internal information, proprietary and confidential information known or disclosed under confidentiality contracts) Mode transfer</p>\n<p>5) Publish or otherwise transmit the contents of copyrights, patents, trademarks, trade secrets, or other proprietary rights (hereinafter referred to as “exclusive rights”) that infringe upon others;</p>\n<p>6) Publish, send or otherwise transmit any advertising letter, promotional materials, “spam”, “spamming letters”, “chain letters”, “direct sales” or any other form of persuasive material;</p>\n<p>7) Computer viruses designed to interfere with, disrupt or limit the functionality of any computer software, hardware or communication device (including but not limited to trojan horses, worms, time bombs, cancelbots (below) Any material of computer code, files and programs, or any other computer code, file or program, posted, transmitted or otherwise transmitted;</p>\n<p>8) interfere with or damage the server or network connected to the Service or the Service, or violate any rules, procedures, policies or specifications regarding the Service Connection Network;</p>\n<p>9) tracking, human flesh search or otherwise harassing others;</p>\n<p>10) intentionally or unintentionally violate any applicable local, national law, and any legally binding rules;</p>\n<p>11) intercept, tamper with, collect, store or delete other people’s personal information, on-site mail or other data, or use such information for any illegal or improper purpose without legal authorization.</p>\n<p>You acknowledge that we have not exercised full control over the user’s use. When you use any content, including relying on the correctness, completeness or usefulness of the foregoing, you agree that you will judge and assume all risks without relying on it. On my side. However, in its sole discretion, we reject and remove any content that may be provided by the Service that violates these Terms or otherwise causes us to object.</p>\n<p>You understand and agree that we may save or disclose the content in accordance with the requirements of laws and regulations, or based on good faith, for the following purposes or within reasonable limits, to determine that the content must be preserved or disclosed:</p>\n<p>a) comply with legal procedures;</p>\n<p>b) the implementation of this usage agreement;</p>\n<p>c) respond to any third party’s claims;</p>\n<p>d) protect the rights, property or personal safety of our users, their users and the public;</p>\n<p>e) Other circumstances that we believe are necessary.</p>\n<p>####8. Service modification</p>\n<p>We reserve the right to modify or terminate this Service (or any part thereof) temporarily or permanently at any time, with or without notice. You agree that you will not be liable to you or any third party for any modification, suspension or termination of the Service.</p>\n<p>####9. Termination of service</p>\n<p>You agree that we terminate your account or use of the Service (or any of the Services for any reason, including but not limited to lack of use, or that we believe that you have violated the letter and spirit of this Agreement of Use, for any reason; Partially) and remove and remove any content from you within the Service. You agree that the Service provided under any provision of this Agreement may be interrupted or terminated without prior notice. You acknowledge and agree that we may immediately close or delete your account and all relevant information and documents in your account, and / Or continue to use the aforementioned documents or the Service. In addition, you agree that we will not be liable to you or any third party if the use of the Service is interrupted or terminated or your account and related information and documents are closed or deleted.</p>\n<p>###Privacy Policy</p>\n<p>This Privacy Policy explains what information the PSOF APP (collectively referred to as “the App”) collects and how it is used when you access our software, applications, products, or related services (collectively, the “Services”). Except as described in this Privacy Policy, we will not use your information in any other way or share it with anyone else.</p>\n<p>This service and this app value your privacy. We may collect and use your information when you use our services. We hope that this Privacy Policy will explain how we collect, use, store, and how we access, update, control, and protect this information when you use our services. This Privacy Policy is relevant to the application you use and we hope that you will read it carefully and, if necessary, follow the guidelines in this Privacy Policy to make the choices you deem appropriate. For the technical vocabulary involved in this Privacy Policy, we will try to explain it to you in a concise and concise manner, and provide a link for further explanation for your understanding.</p>\n<p>Information we collect</p>\n<p>We may collect your personal information (for example, your email) through our services in the following circumstances: (i) you register your account with this app, (ii) you register our notice, or (iii) you are User content includes personal information (as defined below). Other information that you are sure to provide to us is usually kept with your personal information. You may choose not to provide any information we request from you. However, this may limit your ability to use the service and this app.</p>\n<p>In addition to collecting information on the service, we may also collect information from you when you communicate with us via WeChat, QQ, telephone (including via SMS) or email. This information may include personal information. This information may be matched and stored with the personal information provided or collected for the service.</p>\n<p>How we use your information</p>\n<p>We may or may use personal and browsing information for a variety of purposes, including:</p>\n<p>Used to operate services, monitor service effectiveness, improve service content, layout, and design.</p>\n<p>Used to help provide a smooth and efficient user experience.</p>\n<p>Used for billing, identification and authentication, and to prevent fraud.</p>\n<p>Used to respond to any inquiries or requests you have made.</p>\n<p>Used to monitor, analyze, and describe usage patterns and performance of services, including aggregated data such as total visitor count, traffic, and demographic patterns.</p>\n<p>Used to contact you and provide management notifications and communications about your use of the service, such as security or support and maintenance advice.</p>\n<p>Used for system management and system troubleshooting as well as diagnostic or repair technical issues.</p>\n<p>Used to comply with legal requirements and procedures (for example, responding to subpoenas, court orders, law enforcement or government requests or investigations), pro</p>\n<p>tecting our legal rights or the rights of others (for example, by working to reduce the risk of fraud or abuse of services).</p>\n<p>Used to enforce our Terms of Use or other policies or agreements.</p>\n<p>About sharing your information</p>\n<p>Personal Information: We will not share or sell any of your personal information or share your personal information with independent third party marketing purposes.</p>\n<p>Anonymous data information: We may share non-personally identifiable information (such as anonymous usage data, association/exit pages and URLs, platform types, clicks, etc.) with relevant third parties to help them understand the usage patterns of our services. Non-personally identifiable information may be stored indefinitely.</p>\n<p>Minors use our services</p>\n<p>Minors under the age of 18 should obtain written permission from the guardian to use our services. Parents or guardians of underage users are requested to read this Privacy Policy and advise minors to seek parental consent or guidance from their parents or guardians before submitting personal information and using the Services.</p>\n<p>change</p>\n<p>We may revise the terms of this Privacy Policy as appropriate and such amendments form part of this Privacy Policy. If these amendments result in a substantial reduction in your rights under this Privacy Policy, we will send you an email or otherwise notify you by making a prominent notice on the App before the amendment takes effect. In such cases, your continued use of our services constitutes your agreement to be bound by this revised Privacy Policy.</p>\n","site":{"data":{}},"length":14324,"excerpt":"<h2 id=\"Terms-of-Use\"><a href=\"#Terms-of-Use\" class=\"headerlink\" title=\"Terms of Use\"></a>Terms of Use</h2><p>####1. Accept the terms</p>\n<p>The PSOF Mobile App (hereafter referred to as “this APP”) is available to you in accordance with the following Terms of Service.</p>","more":"<p>These terms may be updated by us at any time without prior notice. The PSOF Use Agreement (hereinafter referred to as the “Usage Agreement”) will be posted on the APP with the modified content or content link. Once the revised usage agreement is announced, it effectively replaces the original usage agreement. You should read this usage agreement carefully before using the services provided by this app. If you do not agree to the use agreement and/or modify it at any time, please stop using all the services provided by us immediately; once you use the service, you are deemed to have understood and fully agreed to the contents of this agreement. , including any modifications made by us to the use agreement at any time, and become the APP user (hereinafter referred to as “user”).</p>\n<!--more-->\n\n<p>####2. Compliance with the law<br>You agree to abide by all the provisions of the relevant laws and regulations of the People’s Republic of China and assume full responsibility for any use of your password and your account for any use of the Service and its results. If your conduct violates any of the provisions of national laws and regulations and may constitute a crime, you will be held criminally liable and you will bear full legal responsibility. At the same time, if we have reason to believe that any of your actions, including but not limited to any of your statements and other acts that violate or may violate any of the laws and regulations of the country, we may terminate the offer to you at any time without prior notice. service.</p>\n<p>####3. Registration obligations<br>In order to use this service, you agree to the following: According to the service registration instructions, please fill in the correct registration email address, password, and ensure the validity and legality of the updated login mailbox, avatar and other information in the future. We reserve the right to suspend or terminate your account and services if you provide any material that is illegal, unethical, or that we believe is not suitable for display on our side; or if we have reason to suspect that your information is a program or malicious operation. You are not allowed to use all or any part of the Service now and in the future.We are not responsible for any registration of any user, including but not limited to the identification, verification of the authenticity, correctness, completeness, suitability and/or responsibility of any registration information.</p>\n<p>####4. User account, password and security<br>After completing the registration process for this service and successfully registering, you can use your username and password to log in to your account in this app (“Account”). It is your responsibility and obligation to protect the security of your account.<br>You are solely responsible for all activities that use your password and account number. You agree to:</p>\n<p> 4.1 If your account is unauthorised or if there are any other security issues, you will pass us immediately;</p>\n<p> 4.2 If you lose any damages or damages in order to keep your account and password, we cannot and do not bear the heat and responsibility;</p>\n<p> 4.3 Each user is solely responsible for all actions and events in his account. You are solely responsible for any damage caused to you, us or third parties without your account and password.</p>\n<p>####5. Our Privacy Policy<br>The registration information you provide and certain other information that we have about you will be governed by China’s privacy laws and our PSOF APP Privacy Policy.</p>\n<p>####6. Provider’s responsibility<br>In accordance with the relevant laws and regulations, we hereby solemnly draw your attention to the fact that any text images or other materials (hereinafter referred to as “contents”) posted and uploaded via the Service, whether transmitted publicly or privately, are the responsibility of the content provider. . We only provide content storage space for users, and we cannot control the content transmitted through this service, so the correctness, integrity or quality of the content is not guaranteed. You are aware that you may be exposed to unpleasant, inappropriate or objectionable content when using the Service. In no event shall we be liable for any content, but we have the right to stop transmitting any of the foregoing and act accordingly, including but not limited to suspending the user from using all or part of the service, keeping the records and Report by relevant authorities.</p>\n<p>####7. User behavior<br>The User agrees that the Service will not be used for any illegal or improper activities, including but not limited to the following:</p>\n<p>1) Publish or otherwise transmit information containing one of the following:</p>\n<p>• Oppose the basic principles established by the Constitution;</p>\n<p>• Endanger national security, divulge state secrets, subvert state power, and undermine national unity;</p>\n<p>• Damage to national honours and interests;</p>\n<p>• Inciting ethnic hatred, ethnic discrimination, and undermining national unity;</p>\n<p>• Destroy national religious policies and promote cults and feudal superstitions;</p>\n<p>• Spread rumors, disrupt social order and undermine social stability;</p>\n<p>• spreading obscenity, pornography, gambling, violence, murder, terror or abetment;</p>\n<p>• Insulting or slandering others and infringing on the legal rights of others;</p>\n<p>• Contains false, fraudulent, harmful, coercive, infringing on the privacy, harassment, infringement, slander, vulgarity, embarrassment, or other morally objectionable content;</p>\n<p>• Contains Chinese laws, regulations, rules, regulations, and other content that is restricted or prohibited by legally binding norms;</p>\n<p>• Contains content that we believe is not suitable for display on our side;</p>\n<p>2) harming the lawful rights and interests of others in any way;</p>\n<p>3) pretending to be any other person or institution, or making a false or false statement or lied about any person or institution;</p>\n<p>4) Publish, send e-mail or other content that is known to, but not authorized to transmit, in accordance with any law or contract or legal relationship (eg, due to employment relationships and internal information, proprietary and confidential information known or disclosed under confidentiality contracts) Mode transfer</p>\n<p>5) Publish or otherwise transmit the contents of copyrights, patents, trademarks, trade secrets, or other proprietary rights (hereinafter referred to as “exclusive rights”) that infringe upon others;</p>\n<p>6) Publish, send or otherwise transmit any advertising letter, promotional materials, “spam”, “spamming letters”, “chain letters”, “direct sales” or any other form of persuasive material;</p>\n<p>7) Computer viruses designed to interfere with, disrupt or limit the functionality of any computer software, hardware or communication device (including but not limited to trojan horses, worms, time bombs, cancelbots (below) Any material of computer code, files and programs, or any other computer code, file or program, posted, transmitted or otherwise transmitted;</p>\n<p>8) interfere with or damage the server or network connected to the Service or the Service, or violate any rules, procedures, policies or specifications regarding the Service Connection Network;</p>\n<p>9) tracking, human flesh search or otherwise harassing others;</p>\n<p>10) intentionally or unintentionally violate any applicable local, national law, and any legally binding rules;</p>\n<p>11) intercept, tamper with, collect, store or delete other people’s personal information, on-site mail or other data, or use such information for any illegal or improper purpose without legal authorization.</p>\n<p>You acknowledge that we have not exercised full control over the user’s use. When you use any content, including relying on the correctness, completeness or usefulness of the foregoing, you agree that you will judge and assume all risks without relying on it. On my side. However, in its sole discretion, we reject and remove any content that may be provided by the Service that violates these Terms or otherwise causes us to object.</p>\n<p>You understand and agree that we may save or disclose the content in accordance with the requirements of laws and regulations, or based on good faith, for the following purposes or within reasonable limits, to determine that the content must be preserved or disclosed:</p>\n<p>a) comply with legal procedures;</p>\n<p>b) the implementation of this usage agreement;</p>\n<p>c) respond to any third party’s claims;</p>\n<p>d) protect the rights, property or personal safety of our users, their users and the public;</p>\n<p>e) Other circumstances that we believe are necessary.</p>\n<p>####8. Service modification</p>\n<p>We reserve the right to modify or terminate this Service (or any part thereof) temporarily or permanently at any time, with or without notice. You agree that you will not be liable to you or any third party for any modification, suspension or termination of the Service.</p>\n<p>####9. Termination of service</p>\n<p>You agree that we terminate your account or use of the Service (or any of the Services for any reason, including but not limited to lack of use, or that we believe that you have violated the letter and spirit of this Agreement of Use, for any reason; Partially) and remove and remove any content from you within the Service. You agree that the Service provided under any provision of this Agreement may be interrupted or terminated without prior notice. You acknowledge and agree that we may immediately close or delete your account and all relevant information and documents in your account, and / Or continue to use the aforementioned documents or the Service. In addition, you agree that we will not be liable to you or any third party if the use of the Service is interrupted or terminated or your account and related information and documents are closed or deleted.</p>\n<p>###Privacy Policy</p>\n<p>This Privacy Policy explains what information the PSOF APP (collectively referred to as “the App”) collects and how it is used when you access our software, applications, products, or related services (collectively, the “Services”). Except as described in this Privacy Policy, we will not use your information in any other way or share it with anyone else.</p>\n<p>This service and this app value your privacy. We may collect and use your information when you use our services. We hope that this Privacy Policy will explain how we collect, use, store, and how we access, update, control, and protect this information when you use our services. This Privacy Policy is relevant to the application you use and we hope that you will read it carefully and, if necessary, follow the guidelines in this Privacy Policy to make the choices you deem appropriate. For the technical vocabulary involved in this Privacy Policy, we will try to explain it to you in a concise and concise manner, and provide a link for further explanation for your understanding.</p>\n<p>Information we collect</p>\n<p>We may collect your personal information (for example, your email) through our services in the following circumstances: (i) you register your account with this app, (ii) you register our notice, or (iii) you are User content includes personal information (as defined below). Other information that you are sure to provide to us is usually kept with your personal information. You may choose not to provide any information we request from you. However, this may limit your ability to use the service and this app.</p>\n<p>In addition to collecting information on the service, we may also collect information from you when you communicate with us via WeChat, QQ, telephone (including via SMS) or email. This information may include personal information. This information may be matched and stored with the personal information provided or collected for the service.</p>\n<p>How we use your information</p>\n<p>We may or may use personal and browsing information for a variety of purposes, including:</p>\n<p>Used to operate services, monitor service effectiveness, improve service content, layout, and design.</p>\n<p>Used to help provide a smooth and efficient user experience.</p>\n<p>Used for billing, identification and authentication, and to prevent fraud.</p>\n<p>Used to respond to any inquiries or requests you have made.</p>\n<p>Used to monitor, analyze, and describe usage patterns and performance of services, including aggregated data such as total visitor count, traffic, and demographic patterns.</p>\n<p>Used to contact you and provide management notifications and communications about your use of the service, such as security or support and maintenance advice.</p>\n<p>Used for system management and system troubleshooting as well as diagnostic or repair technical issues.</p>\n<p>Used to comply with legal requirements and procedures (for example, responding to subpoenas, court orders, law enforcement or government requests or investigations), pro</p>\n<p>tecting our legal rights or the rights of others (for example, by working to reduce the risk of fraud or abuse of services).</p>\n<p>Used to enforce our Terms of Use or other policies or agreements.</p>\n<p>About sharing your information</p>\n<p>Personal Information: We will not share or sell any of your personal information or share your personal information with independent third party marketing purposes.</p>\n<p>Anonymous data information: We may share non-personally identifiable information (such as anonymous usage data, association/exit pages and URLs, platform types, clicks, etc.) with relevant third parties to help them understand the usage patterns of our services. Non-personally identifiable information may be stored indefinitely.</p>\n<p>Minors use our services</p>\n<p>Minors under the age of 18 should obtain written permission from the guardian to use our services. Parents or guardians of underage users are requested to read this Privacy Policy and advise minors to seek parental consent or guidance from their parents or guardians before submitting personal information and using the Services.</p>\n<p>change</p>\n<p>We may revise the terms of this Privacy Policy as appropriate and such amendments form part of this Privacy Policy. If these amendments result in a substantial reduction in your rights under this Privacy Policy, we will send you an email or otherwise notify you by making a prominent notice on the App before the amendment takes effect. In such cases, your continued use of our services constitutes your agreement to be bound by this revised Privacy Policy.</p>"},{"title":"iOS非对称RSA加密","urlPath":"RSA","date":"2019-06-19T16:00:00.000Z","updated":"2019-06-19T16:00:00.000Z","_content":"\n### Publickey、Privatekey、Certificate\n\n```\nopenssl genrsa -out private_key.pem 1024 //original key\n\nopenssl req -new -key private_key.pem -out rsaCertReq.csr \n\nopenssl x509 -req -days 3650 -in rsaCertReq.csr -signkey private_key.pem -out rsaCert.crt\n\nopenssl x509 -outform der -in rsaCert.crt -out public_key.der // Create public_key.der For iOS\n\nopenssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt //Create private_key.p12 For iOS\n\nopenssl rsa -in private_key.pem -out rsa_public_key.pem -pubout // Create rsa_public_key.pem For Java\n\nopenssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt //Create pkcs8_private_key.pem For Java\n\n```\n<!-- more -->\n\n上面七个步骤，总共生成7个文件。其中　public_key.der 和 private_key.p12 这对公钥私钥是给iOS用的，rsa_public_key.pem 和 pkcs8_private_key.pem是给JAVA用的。\n它们的源都来自一个私钥：private_key.pem ， 所以iOS端加密的数据，是可以被JAVA端解密的，反过来也一样。\n\n\n### iOS RSA\n\n* head File\n\n```\nimport UIKit\nimport CoreFoundation\nimport CommonCrypto\n\n```\n\n* Attributes\n\n```\n// padding types\nlet kTypeOfWrapPadding = SecPadding.PKCS1\n\n// 公钥引用\nstatic var publicKeyRef: SecKey?\n    \n// 私钥引用\nstatic var privateKeyRef: SecKey?\n```\n* LoadPublicKey\n\n```\nclass func loadPublicKey(_ filePath: String) -> SecKey? {\n        if publicKeyRef != nil {\n            publicKeyRef = nil\n        }\n        \n        var certificateRef: SecCertificate?\n        \n        do {\n            // 用一个.der格式证书创建一个证书对象\n            let certificateData = try Data(contentsOf: URL(fileURLWithPath: filePath))\n            certificateRef = SecCertificateCreateWithData(kCFAllocatorDefault, certificateData as CFData)\n        } catch {\n            print(\"file of public key is error.\")\n            return nil\n        }\n        \n        // 返回一个默认 X509 策略的公钥对象\n        let policyRef = SecPolicyCreateBasicX509()\n        // 包含信任管理信息的结构体\n        var trustRef: SecTrust?\n        \n        // 基于证书和策略创建一个信任管理对象\n        var status = SecTrustCreateWithCertificates(certificateRef!, policyRef, &trustRef)\n        if status != errSecSuccess {\n            print(\"trust create With Certificates unsuccessfully\")\n            return nil\n        }\n        \n        // 信任结果\n        var trustResult = SecTrustResultType.invalid\n        // 评估指定证书和策略的信任管理是否有效\n        status = SecTrustEvaluate(trustRef!, &trustResult)\n        \n        if status != errSecSuccess {\n            print(\"trust evaluate unsuccessfully\")\n            return nil\n        }\n        \n        // 评估之后返回公钥子证书\n        publicKeyRef = SecTrustCopyPublicKey(trustRef!)\n        if publicKeyRef == nil {\n            print(\"public Key create unsuccessfully\")\n            return nil\n        }\n        \n        return publicKeyRef\n    }\n```\n\n* LoadPrivateKey\n\n```\n  class func loadPrivateKey(_ filePath: String, _ password: String) -> SecKey? {\n        if filePath.count <= 0  {\n            print(\"path of public key is nil.\")\n            return nil\n        }\n        \n        if privateKeyRef != nil {\n            privateKeyRef = nil\n        }\n        \n        var pkcs12Data: Data?\n        do {\n            pkcs12Data = try Data(contentsOf: URL(fileURLWithPath: filePath))\n        } catch {\n            print(error)\n            return nil\n        }\n        \n        let kSecImportExportPassphraseString = kSecImportExportPassphrase as String\n        let options = [kSecImportExportPassphraseString: password]\n        var items : CFArray?\n        let status = SecPKCS12Import(pkcs12Data! as CFData, options as CFDictionary, &items)\n        if status != errSecSuccess {\n            print(\"Imports the contents of a PKCS12 formatted blob unsuccessfully\")\n            return nil\n        }\n        \n        if CFArrayGetCount(items) <= 0 {\n            print(\"the number of values currently in the array <= 0\")\n            return nil\n        }\n        \n        let kSecImportItemIdentityString = kSecImportItemIdentity\n        \n        let dict = unsafeBitCast(CFArrayGetValueAtIndex(items, 0),to: CFDictionary.self)\n        let key = Unmanaged.passUnretained(kSecImportItemIdentityString).toOpaque()\n        let value = CFDictionaryGetValue(dict, key)\n        let secIdentity = unsafeBitCast(value, to: SecIdentity.self)\n        \n        let secIdentityCopyPrivateKey = SecIdentityCopyPrivateKey(secIdentity, &privateKeyRef)\n        if secIdentityCopyPrivateKey != errSecSuccess {\n            print(\"return the private key associated with an identity unsuccessfully\")\n            return nil\n        }\n        return privateKeyRef\n    }\n```\n\n* RSAEncrypt\n\n```\npublic class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let encryptData = string.data(using: String.Encoding.utf8) else {\n            print(\"String to be encrypted is nil\")\n            completion?(nil)\n            return\n        }\n        \n        rsaEncrypt(publicKeyPath, encryptData) { (data) in\n            guard let encryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(encryptedData.base64String)\n        }\n    }\n```\n\n```\npublic class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = publicKeyPath,\n            let pkRef = loadPublicKey(pkPath),\n            let dt = data else {\n                print(\"path of public key is nil.\")\n                completion?(nil)\n                return\n        }\n        \n        guard dt.count > 0 && dt.count < SecKeyGetBlockSize(pkRef) - 11\n            else {\n                print(\"The content encrypted is too large\")\n                completion?(nil)\n                return\n        }\n        \n        let cipherBufferSize = SecKeyGetBlockSize(pkRef)\n        var encryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)\n        var outputSize: Int = cipherBufferSize\n        let secKeyEncrypt = SecKeyEncrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &encryptBytes, &outputSize)\n        if errSecSuccess != secKeyEncrypt {\n            print(\"decrypt unsuccessfully\")\n            completion?(nil)\n            return\n        }\n        \n        completion?(Data(bytes: UnsafePointer<UInt8>(encryptBytes), count: outputSize))\n    }\n```\n\n* RSADecrypt\n\n```\npublic class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let str = string,\n            let decryptData = Data(base64Encoded: str) else {\n                print(\"String to be decrypted is nil\")\n                completion?(nil)\n                return\n        }\n        \n        rsaDecrypt(privateKeyPath, password, decryptData) { (data) in\n            guard let decryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(String(data: decryptedData, encoding: String.Encoding.utf8))\n        }\n    }\n```\n```\n public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = privateKeyPath,\n            let pkRef = loadPrivateKey(pkPath, password),\n            let dt = data else {\n                print(\"path of private key is nil.\")\n                completion?(nil)\n                return\n        }\n        \n        let cipherBufferSize = SecKeyGetBlockSize(pkRef)\n        let keyBufferSize = dt.count\n        if keyBufferSize > cipherBufferSize {\n            print(\"The content decrypted is too large\")\n            completion?(nil)\n            return\n        }\n        \n        var decryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)\n        var outputSize = cipherBufferSize\n        let status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &decryptBytes, &outputSize)\n        if errSecSuccess != status {\n            print(\"decrypt unsuccessfully\")\n            completion?(nil)\n            return\n        }\n        \n        completion?(Data(bytes: UnsafePointer<UInt8>(decryptBytes), count: outputSize))\n    }\n```\n### Base64\n\n```\nextension Data {\n    \n    /// Data to base64 String\n    public var base64String: String {\n        return base64EncodedString(options: NSData.Base64EncodingOptions())\n    }\n    \n    /// Array of UInt8\n    public func arrayOfBytes() -> [UInt8] {\n        let count = self.count / MemoryLayout<UInt8>.size\n        var bytesArray = [UInt8](repeating: 0, count: count)\n        (self as NSData).getBytes(&bytesArray, length:count * MemoryLayout<UInt8>.size)\n        return bytesArray\n    }\n}\n```\n### MD5\n* String\n\n\n```\n public func md5() -> String {\n        let str = self.cString(using: String.Encoding.utf8)\n        let strLen = CUnsignedInt(self.lengthOfBytes(using: String.Encoding.utf8))\n        let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n        let result = UnsafeMutablePointer<UInt8>.allocate(capacity: 16)\n        CC_MD5(str!, strLen, result)\n        let hash = NSMutableString()\n        for i in 0 ..< digestLen {\n            hash.appendFormat(\"%02x\", result[i])\n        }\n        free(result)\n        return String(format: hash as String)\n    }\n```\n\n* File\n\n```\npublic func md5_File() -> String? {\n        guard let fileHandle = FileHandle(forReadingAtPath: self) else {\n            return nil\n        }\n        \n        let ctx = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: MemoryLayout<CC_MD5_CTX>.size)\n        \n        CC_MD5_Init(ctx)\n        \n        var done = false\n        \n        while !done {\n            let fileData = fileHandle.readData(ofLength: 256)\n            fileData.withUnsafeBytes {(bytes: UnsafePointer<CChar>) -> () in\n                /// Use `bytes` inside this closure\n                CC_MD5_Update(ctx, bytes, CC_LONG(fileData.count))\n            }\n            \n            if fileData.count == 0 {\n                done = true\n            }\n        }\n        \n        let digest = Int(CC_MD5_DIGEST_LENGTH)\n        let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digest)\n        CC_MD5_Final(result, ctx);\n        \n        var hash = \"\"\n        for i in 0..<digest {\n            hash +=  String(format: \"%02x\", (result[i]))\n        }\n        \n        free(result)\n        free(ctx)\n        \n        return hash;\n    }\n```\n\n### RSA分段加密\n* RSAEncrypt\n\n```\n public class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let encryptData = string.data(using: String.Encoding.utf8) else {\n            print(\"String to be encrypted is nil\")\n            completion?(nil)\n            return\n        }\n        \n        rsaEncrypt(publicKeyPath, encryptData) { (data) in\n            guard let encryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(encryptedData.base64String)\n        }\n    }\n```\n```\n public class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = publicKeyPath,\n            let pkRef = loadPublicKey(pkPath),\n            let dt = data else {\n                print(\"path of public key is nil.\")\n                completion?(nil)\n                return\n        }\n        let blockLen =  SecKeyGetBlockSize(pkRef)\n        var outBuf = [UInt8](repeating: 0, count: blockLen)\n        var outBufLen:Int = blockLen\n        var index = 0\n        let totalLen = dt.count\n        let resData = NSMutableData()\n        \n        while index < totalLen {\n            var curDataLen = totalLen - index\n            if curDataLen > blockLen - 11 {\n                curDataLen = blockLen - 11\n            }\n            let curData: NSData = dt.subdata(in: Range(NSRange(location: index, length: curDataLen))!) as NSData\n            let status: OSStatus = SecKeyEncrypt(pkRef, SecPadding.PKCS1, curData.bytes.assumingMemoryBound(to: UInt8.self), curData.length, &outBuf, &outBufLen)\n            \n            if status == noErr {\n                resData.append(outBuf, length: outBufLen)\n            }else{\n                print(\"encrypt status = \\(status)\")\n            }\n            \n            index += curDataLen\n        }\n        completion?(resData as Data)\n```\n\n* RSADecrypt\n\n```\n  public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let str = string,\n            let decryptData = Data(base64Encoded: str) else {\n                print(\"String to be decrypted is nil\")\n                completion?(nil)\n                return\n        }\n        \n        rsaDecrypt(privateKeyPath, password, decryptData) { (data) in\n            guard let decryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(String(data: decryptedData, encoding: String.Encoding.utf8))\n        }\n    }\n```\n```\n public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = privateKeyPath,\n            let pkRef = loadPrivateKey(pkPath, password),\n            let dt = data else {\n                print(\"path of private key is nil.\")\n                completion?(nil)\n                return\n        }\n        let blockLen = SecKeyGetBlockSize(pkRef)\n        let outBuf = UnsafeMutablePointer<UInt8>.allocate(capacity: blockLen)\n        defer {\n            outBuf.deallocate()\n        }\n        var outBufLen: Int = blockLen\n        var index = 0\n        let totalLen = dt.count\n        let resData = NSMutableData()\n        \n        while index < totalLen {\n            var curDataLen = totalLen - index\n            if curDataLen  > blockLen {\n                curDataLen = blockLen\n            }\n            let curData: Data = dt.subdata(in: index ..< index + curDataLen)\n            var status:OSStatus = noErr\n            curData.withUnsafeBytes { (bytes:UnsafePointer<UInt8>) in\n                //print(bytes)\n                status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, bytes, curData.count, outBuf, &outBufLen)\n            }\n            \n            if status == noErr {\n                resData.append(outBuf, length: outBufLen)\n            }else{\n                print(\"decrypt status = \\(status)\")\n            }\n            index += curDataLen\n        }\n        completion?(resData as Data)\n```","source":"_posts/非对称RSA加密.md","raw":"---\n\ntitle: iOS非对称RSA加密\nurlPath: RSA\ndate: 2019-06-20\nupdated: 2019-06-20\ntag: [iOS, RSA, base64, MD5, 非对称加密]\n\n---\n\n### Publickey、Privatekey、Certificate\n\n```\nopenssl genrsa -out private_key.pem 1024 //original key\n\nopenssl req -new -key private_key.pem -out rsaCertReq.csr \n\nopenssl x509 -req -days 3650 -in rsaCertReq.csr -signkey private_key.pem -out rsaCert.crt\n\nopenssl x509 -outform der -in rsaCert.crt -out public_key.der // Create public_key.der For iOS\n\nopenssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt //Create private_key.p12 For iOS\n\nopenssl rsa -in private_key.pem -out rsa_public_key.pem -pubout // Create rsa_public_key.pem For Java\n\nopenssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt //Create pkcs8_private_key.pem For Java\n\n```\n<!-- more -->\n\n上面七个步骤，总共生成7个文件。其中　public_key.der 和 private_key.p12 这对公钥私钥是给iOS用的，rsa_public_key.pem 和 pkcs8_private_key.pem是给JAVA用的。\n它们的源都来自一个私钥：private_key.pem ， 所以iOS端加密的数据，是可以被JAVA端解密的，反过来也一样。\n\n\n### iOS RSA\n\n* head File\n\n```\nimport UIKit\nimport CoreFoundation\nimport CommonCrypto\n\n```\n\n* Attributes\n\n```\n// padding types\nlet kTypeOfWrapPadding = SecPadding.PKCS1\n\n// 公钥引用\nstatic var publicKeyRef: SecKey?\n    \n// 私钥引用\nstatic var privateKeyRef: SecKey?\n```\n* LoadPublicKey\n\n```\nclass func loadPublicKey(_ filePath: String) -> SecKey? {\n        if publicKeyRef != nil {\n            publicKeyRef = nil\n        }\n        \n        var certificateRef: SecCertificate?\n        \n        do {\n            // 用一个.der格式证书创建一个证书对象\n            let certificateData = try Data(contentsOf: URL(fileURLWithPath: filePath))\n            certificateRef = SecCertificateCreateWithData(kCFAllocatorDefault, certificateData as CFData)\n        } catch {\n            print(\"file of public key is error.\")\n            return nil\n        }\n        \n        // 返回一个默认 X509 策略的公钥对象\n        let policyRef = SecPolicyCreateBasicX509()\n        // 包含信任管理信息的结构体\n        var trustRef: SecTrust?\n        \n        // 基于证书和策略创建一个信任管理对象\n        var status = SecTrustCreateWithCertificates(certificateRef!, policyRef, &trustRef)\n        if status != errSecSuccess {\n            print(\"trust create With Certificates unsuccessfully\")\n            return nil\n        }\n        \n        // 信任结果\n        var trustResult = SecTrustResultType.invalid\n        // 评估指定证书和策略的信任管理是否有效\n        status = SecTrustEvaluate(trustRef!, &trustResult)\n        \n        if status != errSecSuccess {\n            print(\"trust evaluate unsuccessfully\")\n            return nil\n        }\n        \n        // 评估之后返回公钥子证书\n        publicKeyRef = SecTrustCopyPublicKey(trustRef!)\n        if publicKeyRef == nil {\n            print(\"public Key create unsuccessfully\")\n            return nil\n        }\n        \n        return publicKeyRef\n    }\n```\n\n* LoadPrivateKey\n\n```\n  class func loadPrivateKey(_ filePath: String, _ password: String) -> SecKey? {\n        if filePath.count <= 0  {\n            print(\"path of public key is nil.\")\n            return nil\n        }\n        \n        if privateKeyRef != nil {\n            privateKeyRef = nil\n        }\n        \n        var pkcs12Data: Data?\n        do {\n            pkcs12Data = try Data(contentsOf: URL(fileURLWithPath: filePath))\n        } catch {\n            print(error)\n            return nil\n        }\n        \n        let kSecImportExportPassphraseString = kSecImportExportPassphrase as String\n        let options = [kSecImportExportPassphraseString: password]\n        var items : CFArray?\n        let status = SecPKCS12Import(pkcs12Data! as CFData, options as CFDictionary, &items)\n        if status != errSecSuccess {\n            print(\"Imports the contents of a PKCS12 formatted blob unsuccessfully\")\n            return nil\n        }\n        \n        if CFArrayGetCount(items) <= 0 {\n            print(\"the number of values currently in the array <= 0\")\n            return nil\n        }\n        \n        let kSecImportItemIdentityString = kSecImportItemIdentity\n        \n        let dict = unsafeBitCast(CFArrayGetValueAtIndex(items, 0),to: CFDictionary.self)\n        let key = Unmanaged.passUnretained(kSecImportItemIdentityString).toOpaque()\n        let value = CFDictionaryGetValue(dict, key)\n        let secIdentity = unsafeBitCast(value, to: SecIdentity.self)\n        \n        let secIdentityCopyPrivateKey = SecIdentityCopyPrivateKey(secIdentity, &privateKeyRef)\n        if secIdentityCopyPrivateKey != errSecSuccess {\n            print(\"return the private key associated with an identity unsuccessfully\")\n            return nil\n        }\n        return privateKeyRef\n    }\n```\n\n* RSAEncrypt\n\n```\npublic class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let encryptData = string.data(using: String.Encoding.utf8) else {\n            print(\"String to be encrypted is nil\")\n            completion?(nil)\n            return\n        }\n        \n        rsaEncrypt(publicKeyPath, encryptData) { (data) in\n            guard let encryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(encryptedData.base64String)\n        }\n    }\n```\n\n```\npublic class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = publicKeyPath,\n            let pkRef = loadPublicKey(pkPath),\n            let dt = data else {\n                print(\"path of public key is nil.\")\n                completion?(nil)\n                return\n        }\n        \n        guard dt.count > 0 && dt.count < SecKeyGetBlockSize(pkRef) - 11\n            else {\n                print(\"The content encrypted is too large\")\n                completion?(nil)\n                return\n        }\n        \n        let cipherBufferSize = SecKeyGetBlockSize(pkRef)\n        var encryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)\n        var outputSize: Int = cipherBufferSize\n        let secKeyEncrypt = SecKeyEncrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &encryptBytes, &outputSize)\n        if errSecSuccess != secKeyEncrypt {\n            print(\"decrypt unsuccessfully\")\n            completion?(nil)\n            return\n        }\n        \n        completion?(Data(bytes: UnsafePointer<UInt8>(encryptBytes), count: outputSize))\n    }\n```\n\n* RSADecrypt\n\n```\npublic class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let str = string,\n            let decryptData = Data(base64Encoded: str) else {\n                print(\"String to be decrypted is nil\")\n                completion?(nil)\n                return\n        }\n        \n        rsaDecrypt(privateKeyPath, password, decryptData) { (data) in\n            guard let decryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(String(data: decryptedData, encoding: String.Encoding.utf8))\n        }\n    }\n```\n```\n public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = privateKeyPath,\n            let pkRef = loadPrivateKey(pkPath, password),\n            let dt = data else {\n                print(\"path of private key is nil.\")\n                completion?(nil)\n                return\n        }\n        \n        let cipherBufferSize = SecKeyGetBlockSize(pkRef)\n        let keyBufferSize = dt.count\n        if keyBufferSize > cipherBufferSize {\n            print(\"The content decrypted is too large\")\n            completion?(nil)\n            return\n        }\n        \n        var decryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)\n        var outputSize = cipherBufferSize\n        let status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &decryptBytes, &outputSize)\n        if errSecSuccess != status {\n            print(\"decrypt unsuccessfully\")\n            completion?(nil)\n            return\n        }\n        \n        completion?(Data(bytes: UnsafePointer<UInt8>(decryptBytes), count: outputSize))\n    }\n```\n### Base64\n\n```\nextension Data {\n    \n    /// Data to base64 String\n    public var base64String: String {\n        return base64EncodedString(options: NSData.Base64EncodingOptions())\n    }\n    \n    /// Array of UInt8\n    public func arrayOfBytes() -> [UInt8] {\n        let count = self.count / MemoryLayout<UInt8>.size\n        var bytesArray = [UInt8](repeating: 0, count: count)\n        (self as NSData).getBytes(&bytesArray, length:count * MemoryLayout<UInt8>.size)\n        return bytesArray\n    }\n}\n```\n### MD5\n* String\n\n\n```\n public func md5() -> String {\n        let str = self.cString(using: String.Encoding.utf8)\n        let strLen = CUnsignedInt(self.lengthOfBytes(using: String.Encoding.utf8))\n        let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n        let result = UnsafeMutablePointer<UInt8>.allocate(capacity: 16)\n        CC_MD5(str!, strLen, result)\n        let hash = NSMutableString()\n        for i in 0 ..< digestLen {\n            hash.appendFormat(\"%02x\", result[i])\n        }\n        free(result)\n        return String(format: hash as String)\n    }\n```\n\n* File\n\n```\npublic func md5_File() -> String? {\n        guard let fileHandle = FileHandle(forReadingAtPath: self) else {\n            return nil\n        }\n        \n        let ctx = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: MemoryLayout<CC_MD5_CTX>.size)\n        \n        CC_MD5_Init(ctx)\n        \n        var done = false\n        \n        while !done {\n            let fileData = fileHandle.readData(ofLength: 256)\n            fileData.withUnsafeBytes {(bytes: UnsafePointer<CChar>) -> () in\n                /// Use `bytes` inside this closure\n                CC_MD5_Update(ctx, bytes, CC_LONG(fileData.count))\n            }\n            \n            if fileData.count == 0 {\n                done = true\n            }\n        }\n        \n        let digest = Int(CC_MD5_DIGEST_LENGTH)\n        let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digest)\n        CC_MD5_Final(result, ctx);\n        \n        var hash = \"\"\n        for i in 0..<digest {\n            hash +=  String(format: \"%02x\", (result[i]))\n        }\n        \n        free(result)\n        free(ctx)\n        \n        return hash;\n    }\n```\n\n### RSA分段加密\n* RSAEncrypt\n\n```\n public class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let encryptData = string.data(using: String.Encoding.utf8) else {\n            print(\"String to be encrypted is nil\")\n            completion?(nil)\n            return\n        }\n        \n        rsaEncrypt(publicKeyPath, encryptData) { (data) in\n            guard let encryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(encryptedData.base64String)\n        }\n    }\n```\n```\n public class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = publicKeyPath,\n            let pkRef = loadPublicKey(pkPath),\n            let dt = data else {\n                print(\"path of public key is nil.\")\n                completion?(nil)\n                return\n        }\n        let blockLen =  SecKeyGetBlockSize(pkRef)\n        var outBuf = [UInt8](repeating: 0, count: blockLen)\n        var outBufLen:Int = blockLen\n        var index = 0\n        let totalLen = dt.count\n        let resData = NSMutableData()\n        \n        while index < totalLen {\n            var curDataLen = totalLen - index\n            if curDataLen > blockLen - 11 {\n                curDataLen = blockLen - 11\n            }\n            let curData: NSData = dt.subdata(in: Range(NSRange(location: index, length: curDataLen))!) as NSData\n            let status: OSStatus = SecKeyEncrypt(pkRef, SecPadding.PKCS1, curData.bytes.assumingMemoryBound(to: UInt8.self), curData.length, &outBuf, &outBufLen)\n            \n            if status == noErr {\n                resData.append(outBuf, length: outBufLen)\n            }else{\n                print(\"encrypt status = \\(status)\")\n            }\n            \n            index += curDataLen\n        }\n        completion?(resData as Data)\n```\n\n* RSADecrypt\n\n```\n  public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let str = string,\n            let decryptData = Data(base64Encoded: str) else {\n                print(\"String to be decrypted is nil\")\n                completion?(nil)\n                return\n        }\n        \n        rsaDecrypt(privateKeyPath, password, decryptData) { (data) in\n            guard let decryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(String(data: decryptedData, encoding: String.Encoding.utf8))\n        }\n    }\n```\n```\n public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = privateKeyPath,\n            let pkRef = loadPrivateKey(pkPath, password),\n            let dt = data else {\n                print(\"path of private key is nil.\")\n                completion?(nil)\n                return\n        }\n        let blockLen = SecKeyGetBlockSize(pkRef)\n        let outBuf = UnsafeMutablePointer<UInt8>.allocate(capacity: blockLen)\n        defer {\n            outBuf.deallocate()\n        }\n        var outBufLen: Int = blockLen\n        var index = 0\n        let totalLen = dt.count\n        let resData = NSMutableData()\n        \n        while index < totalLen {\n            var curDataLen = totalLen - index\n            if curDataLen  > blockLen {\n                curDataLen = blockLen\n            }\n            let curData: Data = dt.subdata(in: index ..< index + curDataLen)\n            var status:OSStatus = noErr\n            curData.withUnsafeBytes { (bytes:UnsafePointer<UInt8>) in\n                //print(bytes)\n                status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, bytes, curData.count, outBuf, &outBufLen)\n            }\n            \n            if status == noErr {\n                resData.append(outBuf, length: outBufLen)\n            }else{\n                print(\"decrypt status = \\(status)\")\n            }\n            index += curDataLen\n        }\n        completion?(resData as Data)\n```","slug":"非对称RSA加密","published":1,"_id":"ck05d9ekb0013js4as2ogseas","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Publickey、Privatekey、Certificate\"><a href=\"#Publickey、Privatekey、Certificate\" class=\"headerlink\" title=\"Publickey、Privatekey、Certificate\"></a>Publickey、Privatekey、Certificate</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out private_key.pem 1024 //original key</span><br><span class=\"line\"></span><br><span class=\"line\">openssl req -new -key private_key.pem -out rsaCertReq.csr </span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -req -days 3650 -in rsaCertReq.csr -signkey private_key.pem -out rsaCert.crt</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -outform der -in rsaCert.crt -out public_key.der // Create public_key.der For iOS</span><br><span class=\"line\"></span><br><span class=\"line\">openssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt //Create private_key.p12 For iOS</span><br><span class=\"line\"></span><br><span class=\"line\">openssl rsa -in private_key.pem -out rsa_public_key.pem -pubout // Create rsa_public_key.pem For Java</span><br><span class=\"line\"></span><br><span class=\"line\">openssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt //Create pkcs8_private_key.pem For Java</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>上面七个步骤，总共生成7个文件。其中　public_key.der 和 private_key.p12 这对公钥私钥是给iOS用的，rsa_public_key.pem 和 pkcs8_private_key.pem是给JAVA用的。<br>它们的源都来自一个私钥：private_key.pem ， 所以iOS端加密的数据，是可以被JAVA端解密的，反过来也一样。</p>\n<h3 id=\"iOS-RSA\"><a href=\"#iOS-RSA\" class=\"headerlink\" title=\"iOS RSA\"></a>iOS RSA</h3><ul>\n<li>head File</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import UIKit</span><br><span class=\"line\">import CoreFoundation</span><br><span class=\"line\">import CommonCrypto</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Attributes</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// padding types</span><br><span class=\"line\">let kTypeOfWrapPadding = SecPadding.PKCS1</span><br><span class=\"line\"></span><br><span class=\"line\">// 公钥引用</span><br><span class=\"line\">static var publicKeyRef: SecKey?</span><br><span class=\"line\">    </span><br><span class=\"line\">// 私钥引用</span><br><span class=\"line\">static var privateKeyRef: SecKey?</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>LoadPublicKey</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class func loadPublicKey(_ filePath: String) -&gt; SecKey? &#123;</span><br><span class=\"line\">        if publicKeyRef != nil &#123;</span><br><span class=\"line\">            publicKeyRef = nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var certificateRef: SecCertificate?</span><br><span class=\"line\">        </span><br><span class=\"line\">        do &#123;</span><br><span class=\"line\">            // 用一个.der格式证书创建一个证书对象</span><br><span class=\"line\">            let certificateData = try Data(contentsOf: URL(fileURLWithPath: filePath))</span><br><span class=\"line\">            certificateRef = SecCertificateCreateWithData(kCFAllocatorDefault, certificateData as CFData)</span><br><span class=\"line\">        &#125; catch &#123;</span><br><span class=\"line\">            print(&quot;file of public key is error.&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 返回一个默认 X509 策略的公钥对象</span><br><span class=\"line\">        let policyRef = SecPolicyCreateBasicX509()</span><br><span class=\"line\">        // 包含信任管理信息的结构体</span><br><span class=\"line\">        var trustRef: SecTrust?</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 基于证书和策略创建一个信任管理对象</span><br><span class=\"line\">        var status = SecTrustCreateWithCertificates(certificateRef!, policyRef, &amp;trustRef)</span><br><span class=\"line\">        if status != errSecSuccess &#123;</span><br><span class=\"line\">            print(&quot;trust create With Certificates unsuccessfully&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 信任结果</span><br><span class=\"line\">        var trustResult = SecTrustResultType.invalid</span><br><span class=\"line\">        // 评估指定证书和策略的信任管理是否有效</span><br><span class=\"line\">        status = SecTrustEvaluate(trustRef!, &amp;trustResult)</span><br><span class=\"line\">        </span><br><span class=\"line\">        if status != errSecSuccess &#123;</span><br><span class=\"line\">            print(&quot;trust evaluate unsuccessfully&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 评估之后返回公钥子证书</span><br><span class=\"line\">        publicKeyRef = SecTrustCopyPublicKey(trustRef!)</span><br><span class=\"line\">        if publicKeyRef == nil &#123;</span><br><span class=\"line\">            print(&quot;public Key create unsuccessfully&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return publicKeyRef</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>LoadPrivateKey</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class func loadPrivateKey(_ filePath: String, _ password: String) -&gt; SecKey? &#123;</span><br><span class=\"line\">      if filePath.count &lt;= 0  &#123;</span><br><span class=\"line\">          print(&quot;path of public key is nil.&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      if privateKeyRef != nil &#123;</span><br><span class=\"line\">          privateKeyRef = nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      var pkcs12Data: Data?</span><br><span class=\"line\">      do &#123;</span><br><span class=\"line\">          pkcs12Data = try Data(contentsOf: URL(fileURLWithPath: filePath))</span><br><span class=\"line\">      &#125; catch &#123;</span><br><span class=\"line\">          print(error)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      let kSecImportExportPassphraseString = kSecImportExportPassphrase as String</span><br><span class=\"line\">      let options = [kSecImportExportPassphraseString: password]</span><br><span class=\"line\">      var items : CFArray?</span><br><span class=\"line\">      let status = SecPKCS12Import(pkcs12Data! as CFData, options as CFDictionary, &amp;items)</span><br><span class=\"line\">      if status != errSecSuccess &#123;</span><br><span class=\"line\">          print(&quot;Imports the contents of a PKCS12 formatted blob unsuccessfully&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      if CFArrayGetCount(items) &lt;= 0 &#123;</span><br><span class=\"line\">          print(&quot;the number of values currently in the array &lt;= 0&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      let kSecImportItemIdentityString = kSecImportItemIdentity</span><br><span class=\"line\">      </span><br><span class=\"line\">      let dict = unsafeBitCast(CFArrayGetValueAtIndex(items, 0),to: CFDictionary.self)</span><br><span class=\"line\">      let key = Unmanaged.passUnretained(kSecImportItemIdentityString).toOpaque()</span><br><span class=\"line\">      let value = CFDictionaryGetValue(dict, key)</span><br><span class=\"line\">      let secIdentity = unsafeBitCast(value, to: SecIdentity.self)</span><br><span class=\"line\">      </span><br><span class=\"line\">      let secIdentityCopyPrivateKey = SecIdentityCopyPrivateKey(secIdentity, &amp;privateKeyRef)</span><br><span class=\"line\">      if secIdentityCopyPrivateKey != errSecSuccess &#123;</span><br><span class=\"line\">          print(&quot;return the private key associated with an identity unsuccessfully&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return privateKeyRef</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RSAEncrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">        guard let encryptData = string.data(using: String.Encoding.utf8) else &#123;</span><br><span class=\"line\">            print(&quot;String to be encrypted is nil&quot;)</span><br><span class=\"line\">            completion?(nil)</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        rsaEncrypt(publicKeyPath, encryptData) &#123; (data) in</span><br><span class=\"line\">            guard let encryptedData = data else &#123;</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            completion?(encryptedData.base64String)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">        guard let pkPath = publicKeyPath,</span><br><span class=\"line\">            let pkRef = loadPublicKey(pkPath),</span><br><span class=\"line\">            let dt = data else &#123;</span><br><span class=\"line\">                print(&quot;path of public key is nil.&quot;)</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        guard dt.count &gt; 0 &amp;&amp; dt.count &lt; SecKeyGetBlockSize(pkRef) - 11</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                print(&quot;The content encrypted is too large&quot;)</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let cipherBufferSize = SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">        var encryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)</span><br><span class=\"line\">        var outputSize: Int = cipherBufferSize</span><br><span class=\"line\">        let secKeyEncrypt = SecKeyEncrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &amp;encryptBytes, &amp;outputSize)</span><br><span class=\"line\">        if errSecSuccess != secKeyEncrypt &#123;</span><br><span class=\"line\">            print(&quot;decrypt unsuccessfully&quot;)</span><br><span class=\"line\">            completion?(nil)</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        completion?(Data(bytes: UnsafePointer&lt;UInt8&gt;(encryptBytes), count: outputSize))</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RSADecrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">        guard let str = string,</span><br><span class=\"line\">            let decryptData = Data(base64Encoded: str) else &#123;</span><br><span class=\"line\">                print(&quot;String to be decrypted is nil&quot;)</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        rsaDecrypt(privateKeyPath, password, decryptData) &#123; (data) in</span><br><span class=\"line\">            guard let decryptedData = data else &#123;</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            completion?(String(data: decryptedData, encoding: String.Encoding.utf8))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let pkPath = privateKeyPath,</span><br><span class=\"line\">           let pkRef = loadPrivateKey(pkPath, password),</span><br><span class=\"line\">           let dt = data else &#123;</span><br><span class=\"line\">               print(&quot;path of private key is nil.&quot;)</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       let cipherBufferSize = SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">       let keyBufferSize = dt.count</span><br><span class=\"line\">       if keyBufferSize &gt; cipherBufferSize &#123;</span><br><span class=\"line\">           print(&quot;The content decrypted is too large&quot;)</span><br><span class=\"line\">           completion?(nil)</span><br><span class=\"line\">           return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       var decryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)</span><br><span class=\"line\">       var outputSize = cipherBufferSize</span><br><span class=\"line\">       let status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &amp;decryptBytes, &amp;outputSize)</span><br><span class=\"line\">       if errSecSuccess != status &#123;</span><br><span class=\"line\">           print(&quot;decrypt unsuccessfully&quot;)</span><br><span class=\"line\">           completion?(nil)</span><br><span class=\"line\">           return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       completion?(Data(bytes: UnsafePointer&lt;UInt8&gt;(decryptBytes), count: outputSize))</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension Data &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// Data to base64 String</span><br><span class=\"line\">    public var base64String: String &#123;</span><br><span class=\"line\">        return base64EncodedString(options: NSData.Base64EncodingOptions())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// Array of UInt8</span><br><span class=\"line\">    public func arrayOfBytes() -&gt; [UInt8] &#123;</span><br><span class=\"line\">        let count = self.count / MemoryLayout&lt;UInt8&gt;.size</span><br><span class=\"line\">        var bytesArray = [UInt8](repeating: 0, count: count)</span><br><span class=\"line\">        (self as NSData).getBytes(&amp;bytesArray, length:count * MemoryLayout&lt;UInt8&gt;.size)</span><br><span class=\"line\">        return bytesArray</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MD5\"><a href=\"#MD5\" class=\"headerlink\" title=\"MD5\"></a>MD5</h3><ul>\n<li>String</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public func md5() -&gt; String &#123;</span><br><span class=\"line\">       let str = self.cString(using: String.Encoding.utf8)</span><br><span class=\"line\">       let strLen = CUnsignedInt(self.lengthOfBytes(using: String.Encoding.utf8))</span><br><span class=\"line\">       let digestLen = Int(CC_MD5_DIGEST_LENGTH)</span><br><span class=\"line\">       let result = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: 16)</span><br><span class=\"line\">       CC_MD5(str!, strLen, result)</span><br><span class=\"line\">       let hash = NSMutableString()</span><br><span class=\"line\">       for i in 0 ..&lt; digestLen &#123;</span><br><span class=\"line\">           hash.appendFormat(&quot;%02x&quot;, result[i])</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       free(result)</span><br><span class=\"line\">       return String(format: hash as String)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>File</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public func md5_File() -&gt; String? &#123;</span><br><span class=\"line\">        guard let fileHandle = FileHandle(forReadingAtPath: self) else &#123;</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let ctx = UnsafeMutablePointer&lt;CC_MD5_CTX&gt;.allocate(capacity: MemoryLayout&lt;CC_MD5_CTX&gt;.size)</span><br><span class=\"line\">        </span><br><span class=\"line\">        CC_MD5_Init(ctx)</span><br><span class=\"line\">        </span><br><span class=\"line\">        var done = false</span><br><span class=\"line\">        </span><br><span class=\"line\">        while !done &#123;</span><br><span class=\"line\">            let fileData = fileHandle.readData(ofLength: 256)</span><br><span class=\"line\">            fileData.withUnsafeBytes &#123;(bytes: UnsafePointer&lt;CChar&gt;) -&gt; () in</span><br><span class=\"line\">                /// Use `bytes` inside this closure</span><br><span class=\"line\">                CC_MD5_Update(ctx, bytes, CC_LONG(fileData.count))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if fileData.count == 0 &#123;</span><br><span class=\"line\">                done = true</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let digest = Int(CC_MD5_DIGEST_LENGTH)</span><br><span class=\"line\">        let result = UnsafeMutablePointer&lt;CUnsignedChar&gt;.allocate(capacity: digest)</span><br><span class=\"line\">        CC_MD5_Final(result, ctx);</span><br><span class=\"line\">        </span><br><span class=\"line\">        var hash = &quot;&quot;</span><br><span class=\"line\">        for i in 0..&lt;digest &#123;</span><br><span class=\"line\">            hash +=  String(format: &quot;%02x&quot;, (result[i]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        free(result)</span><br><span class=\"line\">        free(ctx)</span><br><span class=\"line\">        </span><br><span class=\"line\">        return hash;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RSA分段加密\"><a href=\"#RSA分段加密\" class=\"headerlink\" title=\"RSA分段加密\"></a>RSA分段加密</h3><ul>\n<li>RSAEncrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let encryptData = string.data(using: String.Encoding.utf8) else &#123;</span><br><span class=\"line\">           print(&quot;String to be encrypted is nil&quot;)</span><br><span class=\"line\">           completion?(nil)</span><br><span class=\"line\">           return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       rsaEncrypt(publicKeyPath, encryptData) &#123; (data) in</span><br><span class=\"line\">           guard let encryptedData = data else &#123;</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           completion?(encryptedData.base64String)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let pkPath = publicKeyPath,</span><br><span class=\"line\">           let pkRef = loadPublicKey(pkPath),</span><br><span class=\"line\">           let dt = data else &#123;</span><br><span class=\"line\">               print(&quot;path of public key is nil.&quot;)</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       let blockLen =  SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">       var outBuf = [UInt8](repeating: 0, count: blockLen)</span><br><span class=\"line\">       var outBufLen:Int = blockLen</span><br><span class=\"line\">       var index = 0</span><br><span class=\"line\">       let totalLen = dt.count</span><br><span class=\"line\">       let resData = NSMutableData()</span><br><span class=\"line\">       </span><br><span class=\"line\">       while index &lt; totalLen &#123;</span><br><span class=\"line\">           var curDataLen = totalLen - index</span><br><span class=\"line\">           if curDataLen &gt; blockLen - 11 &#123;</span><br><span class=\"line\">               curDataLen = blockLen - 11</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           let curData: NSData = dt.subdata(in: Range(NSRange(location: index, length: curDataLen))!) as NSData</span><br><span class=\"line\">           let status: OSStatus = SecKeyEncrypt(pkRef, SecPadding.PKCS1, curData.bytes.assumingMemoryBound(to: UInt8.self), curData.length, &amp;outBuf, &amp;outBufLen)</span><br><span class=\"line\">           </span><br><span class=\"line\">           if status == noErr &#123;</span><br><span class=\"line\">               resData.append(outBuf, length: outBufLen)</span><br><span class=\"line\">           &#125;else&#123;</span><br><span class=\"line\">               print(&quot;encrypt status = \\(status)&quot;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           index += curDataLen</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       completion?(resData as Data)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RSADecrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">      guard let str = string,</span><br><span class=\"line\">          let decryptData = Data(base64Encoded: str) else &#123;</span><br><span class=\"line\">              print(&quot;String to be decrypted is nil&quot;)</span><br><span class=\"line\">              completion?(nil)</span><br><span class=\"line\">              return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      rsaDecrypt(privateKeyPath, password, decryptData) &#123; (data) in</span><br><span class=\"line\">          guard let decryptedData = data else &#123;</span><br><span class=\"line\">              completion?(nil)</span><br><span class=\"line\">              return</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">          completion?(String(data: decryptedData, encoding: String.Encoding.utf8))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let pkPath = privateKeyPath,</span><br><span class=\"line\">           let pkRef = loadPrivateKey(pkPath, password),</span><br><span class=\"line\">           let dt = data else &#123;</span><br><span class=\"line\">               print(&quot;path of private key is nil.&quot;)</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       let blockLen = SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">       let outBuf = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: blockLen)</span><br><span class=\"line\">       defer &#123;</span><br><span class=\"line\">           outBuf.deallocate()</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       var outBufLen: Int = blockLen</span><br><span class=\"line\">       var index = 0</span><br><span class=\"line\">       let totalLen = dt.count</span><br><span class=\"line\">       let resData = NSMutableData()</span><br><span class=\"line\">       </span><br><span class=\"line\">       while index &lt; totalLen &#123;</span><br><span class=\"line\">           var curDataLen = totalLen - index</span><br><span class=\"line\">           if curDataLen  &gt; blockLen &#123;</span><br><span class=\"line\">               curDataLen = blockLen</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           let curData: Data = dt.subdata(in: index ..&lt; index + curDataLen)</span><br><span class=\"line\">           var status:OSStatus = noErr</span><br><span class=\"line\">           curData.withUnsafeBytes &#123; (bytes:UnsafePointer&lt;UInt8&gt;) in</span><br><span class=\"line\">               //print(bytes)</span><br><span class=\"line\">               status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, bytes, curData.count, outBuf, &amp;outBufLen)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           if status == noErr &#123;</span><br><span class=\"line\">               resData.append(outBuf, length: outBufLen)</span><br><span class=\"line\">           &#125;else&#123;</span><br><span class=\"line\">               print(&quot;decrypt status = \\(status)&quot;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           index += curDataLen</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       completion?(resData as Data)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":14757,"excerpt":"<h3 id=\"Publickey、Privatekey、Certificate\"><a href=\"#Publickey、Privatekey、Certificate\" class=\"headerlink\" title=\"Publickey、Privatekey、Certificate\"></a>Publickey、Privatekey、Certificate</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out private_key.pem 1024 //original key</span><br><span class=\"line\"></span><br><span class=\"line\">openssl req -new -key private_key.pem -out rsaCertReq.csr </span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -req -days 3650 -in rsaCertReq.csr -signkey private_key.pem -out rsaCert.crt</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -outform der -in rsaCert.crt -out public_key.der // Create public_key.der For iOS</span><br><span class=\"line\"></span><br><span class=\"line\">openssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt //Create private_key.p12 For iOS</span><br><span class=\"line\"></span><br><span class=\"line\">openssl rsa -in private_key.pem -out rsa_public_key.pem -pubout // Create rsa_public_key.pem For Java</span><br><span class=\"line\"></span><br><span class=\"line\">openssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt //Create pkcs8_private_key.pem For Java</span><br></pre></td></tr></table></figure>","more":"<p>上面七个步骤，总共生成7个文件。其中　public_key.der 和 private_key.p12 这对公钥私钥是给iOS用的，rsa_public_key.pem 和 pkcs8_private_key.pem是给JAVA用的。<br>它们的源都来自一个私钥：private_key.pem ， 所以iOS端加密的数据，是可以被JAVA端解密的，反过来也一样。</p>\n<h3 id=\"iOS-RSA\"><a href=\"#iOS-RSA\" class=\"headerlink\" title=\"iOS RSA\"></a>iOS RSA</h3><ul>\n<li>head File</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import UIKit</span><br><span class=\"line\">import CoreFoundation</span><br><span class=\"line\">import CommonCrypto</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Attributes</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// padding types</span><br><span class=\"line\">let kTypeOfWrapPadding = SecPadding.PKCS1</span><br><span class=\"line\"></span><br><span class=\"line\">// 公钥引用</span><br><span class=\"line\">static var publicKeyRef: SecKey?</span><br><span class=\"line\">    </span><br><span class=\"line\">// 私钥引用</span><br><span class=\"line\">static var privateKeyRef: SecKey?</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>LoadPublicKey</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class func loadPublicKey(_ filePath: String) -&gt; SecKey? &#123;</span><br><span class=\"line\">        if publicKeyRef != nil &#123;</span><br><span class=\"line\">            publicKeyRef = nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var certificateRef: SecCertificate?</span><br><span class=\"line\">        </span><br><span class=\"line\">        do &#123;</span><br><span class=\"line\">            // 用一个.der格式证书创建一个证书对象</span><br><span class=\"line\">            let certificateData = try Data(contentsOf: URL(fileURLWithPath: filePath))</span><br><span class=\"line\">            certificateRef = SecCertificateCreateWithData(kCFAllocatorDefault, certificateData as CFData)</span><br><span class=\"line\">        &#125; catch &#123;</span><br><span class=\"line\">            print(&quot;file of public key is error.&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 返回一个默认 X509 策略的公钥对象</span><br><span class=\"line\">        let policyRef = SecPolicyCreateBasicX509()</span><br><span class=\"line\">        // 包含信任管理信息的结构体</span><br><span class=\"line\">        var trustRef: SecTrust?</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 基于证书和策略创建一个信任管理对象</span><br><span class=\"line\">        var status = SecTrustCreateWithCertificates(certificateRef!, policyRef, &amp;trustRef)</span><br><span class=\"line\">        if status != errSecSuccess &#123;</span><br><span class=\"line\">            print(&quot;trust create With Certificates unsuccessfully&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 信任结果</span><br><span class=\"line\">        var trustResult = SecTrustResultType.invalid</span><br><span class=\"line\">        // 评估指定证书和策略的信任管理是否有效</span><br><span class=\"line\">        status = SecTrustEvaluate(trustRef!, &amp;trustResult)</span><br><span class=\"line\">        </span><br><span class=\"line\">        if status != errSecSuccess &#123;</span><br><span class=\"line\">            print(&quot;trust evaluate unsuccessfully&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 评估之后返回公钥子证书</span><br><span class=\"line\">        publicKeyRef = SecTrustCopyPublicKey(trustRef!)</span><br><span class=\"line\">        if publicKeyRef == nil &#123;</span><br><span class=\"line\">            print(&quot;public Key create unsuccessfully&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return publicKeyRef</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>LoadPrivateKey</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class func loadPrivateKey(_ filePath: String, _ password: String) -&gt; SecKey? &#123;</span><br><span class=\"line\">      if filePath.count &lt;= 0  &#123;</span><br><span class=\"line\">          print(&quot;path of public key is nil.&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      if privateKeyRef != nil &#123;</span><br><span class=\"line\">          privateKeyRef = nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      var pkcs12Data: Data?</span><br><span class=\"line\">      do &#123;</span><br><span class=\"line\">          pkcs12Data = try Data(contentsOf: URL(fileURLWithPath: filePath))</span><br><span class=\"line\">      &#125; catch &#123;</span><br><span class=\"line\">          print(error)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      let kSecImportExportPassphraseString = kSecImportExportPassphrase as String</span><br><span class=\"line\">      let options = [kSecImportExportPassphraseString: password]</span><br><span class=\"line\">      var items : CFArray?</span><br><span class=\"line\">      let status = SecPKCS12Import(pkcs12Data! as CFData, options as CFDictionary, &amp;items)</span><br><span class=\"line\">      if status != errSecSuccess &#123;</span><br><span class=\"line\">          print(&quot;Imports the contents of a PKCS12 formatted blob unsuccessfully&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      if CFArrayGetCount(items) &lt;= 0 &#123;</span><br><span class=\"line\">          print(&quot;the number of values currently in the array &lt;= 0&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      let kSecImportItemIdentityString = kSecImportItemIdentity</span><br><span class=\"line\">      </span><br><span class=\"line\">      let dict = unsafeBitCast(CFArrayGetValueAtIndex(items, 0),to: CFDictionary.self)</span><br><span class=\"line\">      let key = Unmanaged.passUnretained(kSecImportItemIdentityString).toOpaque()</span><br><span class=\"line\">      let value = CFDictionaryGetValue(dict, key)</span><br><span class=\"line\">      let secIdentity = unsafeBitCast(value, to: SecIdentity.self)</span><br><span class=\"line\">      </span><br><span class=\"line\">      let secIdentityCopyPrivateKey = SecIdentityCopyPrivateKey(secIdentity, &amp;privateKeyRef)</span><br><span class=\"line\">      if secIdentityCopyPrivateKey != errSecSuccess &#123;</span><br><span class=\"line\">          print(&quot;return the private key associated with an identity unsuccessfully&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return privateKeyRef</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RSAEncrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">        guard let encryptData = string.data(using: String.Encoding.utf8) else &#123;</span><br><span class=\"line\">            print(&quot;String to be encrypted is nil&quot;)</span><br><span class=\"line\">            completion?(nil)</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        rsaEncrypt(publicKeyPath, encryptData) &#123; (data) in</span><br><span class=\"line\">            guard let encryptedData = data else &#123;</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            completion?(encryptedData.base64String)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">        guard let pkPath = publicKeyPath,</span><br><span class=\"line\">            let pkRef = loadPublicKey(pkPath),</span><br><span class=\"line\">            let dt = data else &#123;</span><br><span class=\"line\">                print(&quot;path of public key is nil.&quot;)</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        guard dt.count &gt; 0 &amp;&amp; dt.count &lt; SecKeyGetBlockSize(pkRef) - 11</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                print(&quot;The content encrypted is too large&quot;)</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let cipherBufferSize = SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">        var encryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)</span><br><span class=\"line\">        var outputSize: Int = cipherBufferSize</span><br><span class=\"line\">        let secKeyEncrypt = SecKeyEncrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &amp;encryptBytes, &amp;outputSize)</span><br><span class=\"line\">        if errSecSuccess != secKeyEncrypt &#123;</span><br><span class=\"line\">            print(&quot;decrypt unsuccessfully&quot;)</span><br><span class=\"line\">            completion?(nil)</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        completion?(Data(bytes: UnsafePointer&lt;UInt8&gt;(encryptBytes), count: outputSize))</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RSADecrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">        guard let str = string,</span><br><span class=\"line\">            let decryptData = Data(base64Encoded: str) else &#123;</span><br><span class=\"line\">                print(&quot;String to be decrypted is nil&quot;)</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        rsaDecrypt(privateKeyPath, password, decryptData) &#123; (data) in</span><br><span class=\"line\">            guard let decryptedData = data else &#123;</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            completion?(String(data: decryptedData, encoding: String.Encoding.utf8))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let pkPath = privateKeyPath,</span><br><span class=\"line\">           let pkRef = loadPrivateKey(pkPath, password),</span><br><span class=\"line\">           let dt = data else &#123;</span><br><span class=\"line\">               print(&quot;path of private key is nil.&quot;)</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       let cipherBufferSize = SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">       let keyBufferSize = dt.count</span><br><span class=\"line\">       if keyBufferSize &gt; cipherBufferSize &#123;</span><br><span class=\"line\">           print(&quot;The content decrypted is too large&quot;)</span><br><span class=\"line\">           completion?(nil)</span><br><span class=\"line\">           return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       var decryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)</span><br><span class=\"line\">       var outputSize = cipherBufferSize</span><br><span class=\"line\">       let status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &amp;decryptBytes, &amp;outputSize)</span><br><span class=\"line\">       if errSecSuccess != status &#123;</span><br><span class=\"line\">           print(&quot;decrypt unsuccessfully&quot;)</span><br><span class=\"line\">           completion?(nil)</span><br><span class=\"line\">           return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       completion?(Data(bytes: UnsafePointer&lt;UInt8&gt;(decryptBytes), count: outputSize))</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension Data &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// Data to base64 String</span><br><span class=\"line\">    public var base64String: String &#123;</span><br><span class=\"line\">        return base64EncodedString(options: NSData.Base64EncodingOptions())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// Array of UInt8</span><br><span class=\"line\">    public func arrayOfBytes() -&gt; [UInt8] &#123;</span><br><span class=\"line\">        let count = self.count / MemoryLayout&lt;UInt8&gt;.size</span><br><span class=\"line\">        var bytesArray = [UInt8](repeating: 0, count: count)</span><br><span class=\"line\">        (self as NSData).getBytes(&amp;bytesArray, length:count * MemoryLayout&lt;UInt8&gt;.size)</span><br><span class=\"line\">        return bytesArray</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MD5\"><a href=\"#MD5\" class=\"headerlink\" title=\"MD5\"></a>MD5</h3><ul>\n<li>String</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public func md5() -&gt; String &#123;</span><br><span class=\"line\">       let str = self.cString(using: String.Encoding.utf8)</span><br><span class=\"line\">       let strLen = CUnsignedInt(self.lengthOfBytes(using: String.Encoding.utf8))</span><br><span class=\"line\">       let digestLen = Int(CC_MD5_DIGEST_LENGTH)</span><br><span class=\"line\">       let result = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: 16)</span><br><span class=\"line\">       CC_MD5(str!, strLen, result)</span><br><span class=\"line\">       let hash = NSMutableString()</span><br><span class=\"line\">       for i in 0 ..&lt; digestLen &#123;</span><br><span class=\"line\">           hash.appendFormat(&quot;%02x&quot;, result[i])</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       free(result)</span><br><span class=\"line\">       return String(format: hash as String)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>File</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public func md5_File() -&gt; String? &#123;</span><br><span class=\"line\">        guard let fileHandle = FileHandle(forReadingAtPath: self) else &#123;</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let ctx = UnsafeMutablePointer&lt;CC_MD5_CTX&gt;.allocate(capacity: MemoryLayout&lt;CC_MD5_CTX&gt;.size)</span><br><span class=\"line\">        </span><br><span class=\"line\">        CC_MD5_Init(ctx)</span><br><span class=\"line\">        </span><br><span class=\"line\">        var done = false</span><br><span class=\"line\">        </span><br><span class=\"line\">        while !done &#123;</span><br><span class=\"line\">            let fileData = fileHandle.readData(ofLength: 256)</span><br><span class=\"line\">            fileData.withUnsafeBytes &#123;(bytes: UnsafePointer&lt;CChar&gt;) -&gt; () in</span><br><span class=\"line\">                /// Use `bytes` inside this closure</span><br><span class=\"line\">                CC_MD5_Update(ctx, bytes, CC_LONG(fileData.count))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if fileData.count == 0 &#123;</span><br><span class=\"line\">                done = true</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let digest = Int(CC_MD5_DIGEST_LENGTH)</span><br><span class=\"line\">        let result = UnsafeMutablePointer&lt;CUnsignedChar&gt;.allocate(capacity: digest)</span><br><span class=\"line\">        CC_MD5_Final(result, ctx);</span><br><span class=\"line\">        </span><br><span class=\"line\">        var hash = &quot;&quot;</span><br><span class=\"line\">        for i in 0..&lt;digest &#123;</span><br><span class=\"line\">            hash +=  String(format: &quot;%02x&quot;, (result[i]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        free(result)</span><br><span class=\"line\">        free(ctx)</span><br><span class=\"line\">        </span><br><span class=\"line\">        return hash;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RSA分段加密\"><a href=\"#RSA分段加密\" class=\"headerlink\" title=\"RSA分段加密\"></a>RSA分段加密</h3><ul>\n<li>RSAEncrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let encryptData = string.data(using: String.Encoding.utf8) else &#123;</span><br><span class=\"line\">           print(&quot;String to be encrypted is nil&quot;)</span><br><span class=\"line\">           completion?(nil)</span><br><span class=\"line\">           return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       rsaEncrypt(publicKeyPath, encryptData) &#123; (data) in</span><br><span class=\"line\">           guard let encryptedData = data else &#123;</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           completion?(encryptedData.base64String)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let pkPath = publicKeyPath,</span><br><span class=\"line\">           let pkRef = loadPublicKey(pkPath),</span><br><span class=\"line\">           let dt = data else &#123;</span><br><span class=\"line\">               print(&quot;path of public key is nil.&quot;)</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       let blockLen =  SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">       var outBuf = [UInt8](repeating: 0, count: blockLen)</span><br><span class=\"line\">       var outBufLen:Int = blockLen</span><br><span class=\"line\">       var index = 0</span><br><span class=\"line\">       let totalLen = dt.count</span><br><span class=\"line\">       let resData = NSMutableData()</span><br><span class=\"line\">       </span><br><span class=\"line\">       while index &lt; totalLen &#123;</span><br><span class=\"line\">           var curDataLen = totalLen - index</span><br><span class=\"line\">           if curDataLen &gt; blockLen - 11 &#123;</span><br><span class=\"line\">               curDataLen = blockLen - 11</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           let curData: NSData = dt.subdata(in: Range(NSRange(location: index, length: curDataLen))!) as NSData</span><br><span class=\"line\">           let status: OSStatus = SecKeyEncrypt(pkRef, SecPadding.PKCS1, curData.bytes.assumingMemoryBound(to: UInt8.self), curData.length, &amp;outBuf, &amp;outBufLen)</span><br><span class=\"line\">           </span><br><span class=\"line\">           if status == noErr &#123;</span><br><span class=\"line\">               resData.append(outBuf, length: outBufLen)</span><br><span class=\"line\">           &#125;else&#123;</span><br><span class=\"line\">               print(&quot;encrypt status = \\(status)&quot;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           index += curDataLen</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       completion?(resData as Data)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RSADecrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">      guard let str = string,</span><br><span class=\"line\">          let decryptData = Data(base64Encoded: str) else &#123;</span><br><span class=\"line\">              print(&quot;String to be decrypted is nil&quot;)</span><br><span class=\"line\">              completion?(nil)</span><br><span class=\"line\">              return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      rsaDecrypt(privateKeyPath, password, decryptData) &#123; (data) in</span><br><span class=\"line\">          guard let decryptedData = data else &#123;</span><br><span class=\"line\">              completion?(nil)</span><br><span class=\"line\">              return</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">          completion?(String(data: decryptedData, encoding: String.Encoding.utf8))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let pkPath = privateKeyPath,</span><br><span class=\"line\">           let pkRef = loadPrivateKey(pkPath, password),</span><br><span class=\"line\">           let dt = data else &#123;</span><br><span class=\"line\">               print(&quot;path of private key is nil.&quot;)</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       let blockLen = SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">       let outBuf = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: blockLen)</span><br><span class=\"line\">       defer &#123;</span><br><span class=\"line\">           outBuf.deallocate()</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       var outBufLen: Int = blockLen</span><br><span class=\"line\">       var index = 0</span><br><span class=\"line\">       let totalLen = dt.count</span><br><span class=\"line\">       let resData = NSMutableData()</span><br><span class=\"line\">       </span><br><span class=\"line\">       while index &lt; totalLen &#123;</span><br><span class=\"line\">           var curDataLen = totalLen - index</span><br><span class=\"line\">           if curDataLen  &gt; blockLen &#123;</span><br><span class=\"line\">               curDataLen = blockLen</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           let curData: Data = dt.subdata(in: index ..&lt; index + curDataLen)</span><br><span class=\"line\">           var status:OSStatus = noErr</span><br><span class=\"line\">           curData.withUnsafeBytes &#123; (bytes:UnsafePointer&lt;UInt8&gt;) in</span><br><span class=\"line\">               //print(bytes)</span><br><span class=\"line\">               status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, bytes, curData.count, outBuf, &amp;outBufLen)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           if status == noErr &#123;</span><br><span class=\"line\">               resData.append(outBuf, length: outBufLen)</span><br><span class=\"line\">           &#125;else&#123;</span><br><span class=\"line\">               print(&quot;decrypt status = \\(status)&quot;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           index += curDataLen</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       completion?(resData as Data)</span><br></pre></td></tr></table></figure>"},{"title":"iOS非对称RSA加密","urlPath":"RSA","date":"2019-06-19T16:00:00.000Z","updated":"2019-06-19T16:00:00.000Z","_content":"\n### Publickey、Privatekey、Certificate\n\n```\nopenssl genrsa -out private_key.pem 1024 //original key\n\nopenssl req -new -key private_key.pem -out rsaCertReq.csr \n\nopenssl x509 -req -days 3650 -in rsaCertReq.csr -signkey private_key.pem -out rsaCert.crt\n\nopenssl x509 -outform der -in rsaCert.crt -out public_key.der // Create public_key.der For iOS\n\nopenssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt //Create private_key.p12 For iOS\n\nopenssl rsa -in private_key.pem -out rsa_public_key.pem -pubout // Create rsa_public_key.pem For Java\n\nopenssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt //Create pkcs8_private_key.pem For Java\n\n```\n<!-- more -->\n\n上面七个步骤，总共生成7个文件。其中　public_key.der 和 private_key.p12 这对公钥私钥是给iOS用的，rsa_public_key.pem 和 pkcs8_private_key.pem是给JAVA用的。\n它们的源都来自一个私钥：private_key.pem ， 所以iOS端加密的数据，是可以被JAVA端解密的，反过来也一样。\n\n\n### iOS RSA\n\n* head File\n\n```\nimport UIKit\nimport CoreFoundation\nimport CommonCrypto\n\n```\n\n* Attributes\n\n```\n// padding types\nlet kTypeOfWrapPadding = SecPadding.PKCS1\n\n// 公钥引用\nstatic var publicKeyRef: SecKey?\n    \n// 私钥引用\nstatic var privateKeyRef: SecKey?\n```\n* LoadPublicKey\n\n```\nclass func loadPublicKey(_ filePath: String) -> SecKey? {\n        if publicKeyRef != nil {\n            publicKeyRef = nil\n        }\n        \n        var certificateRef: SecCertificate?\n        \n        do {\n            // 用一个.der格式证书创建一个证书对象\n            let certificateData = try Data(contentsOf: URL(fileURLWithPath: filePath))\n            certificateRef = SecCertificateCreateWithData(kCFAllocatorDefault, certificateData as CFData)\n        } catch {\n            print(\"file of public key is error.\")\n            return nil\n        }\n        \n        // 返回一个默认 X509 策略的公钥对象\n        let policyRef = SecPolicyCreateBasicX509()\n        // 包含信任管理信息的结构体\n        var trustRef: SecTrust?\n        \n        // 基于证书和策略创建一个信任管理对象\n        var status = SecTrustCreateWithCertificates(certificateRef!, policyRef, &trustRef)\n        if status != errSecSuccess {\n            print(\"trust create With Certificates unsuccessfully\")\n            return nil\n        }\n        \n        // 信任结果\n        var trustResult = SecTrustResultType.invalid\n        // 评估指定证书和策略的信任管理是否有效\n        status = SecTrustEvaluate(trustRef!, &trustResult)\n        \n        if status != errSecSuccess {\n            print(\"trust evaluate unsuccessfully\")\n            return nil\n        }\n        \n        // 评估之后返回公钥子证书\n        publicKeyRef = SecTrustCopyPublicKey(trustRef!)\n        if publicKeyRef == nil {\n            print(\"public Key create unsuccessfully\")\n            return nil\n        }\n        \n        return publicKeyRef\n    }\n```\n\n* LoadPrivateKey\n\n```\n  class func loadPrivateKey(_ filePath: String, _ password: String) -> SecKey? {\n        if filePath.count <= 0  {\n            print(\"path of public key is nil.\")\n            return nil\n        }\n        \n        if privateKeyRef != nil {\n            privateKeyRef = nil\n        }\n        \n        var pkcs12Data: Data?\n        do {\n            pkcs12Data = try Data(contentsOf: URL(fileURLWithPath: filePath))\n        } catch {\n            print(error)\n            return nil\n        }\n        \n        let kSecImportExportPassphraseString = kSecImportExportPassphrase as String\n        let options = [kSecImportExportPassphraseString: password]\n        var items : CFArray?\n        let status = SecPKCS12Import(pkcs12Data! as CFData, options as CFDictionary, &items)\n        if status != errSecSuccess {\n            print(\"Imports the contents of a PKCS12 formatted blob unsuccessfully\")\n            return nil\n        }\n        \n        if CFArrayGetCount(items) <= 0 {\n            print(\"the number of values currently in the array <= 0\")\n            return nil\n        }\n        \n        let kSecImportItemIdentityString = kSecImportItemIdentity\n        \n        let dict = unsafeBitCast(CFArrayGetValueAtIndex(items, 0),to: CFDictionary.self)\n        let key = Unmanaged.passUnretained(kSecImportItemIdentityString).toOpaque()\n        let value = CFDictionaryGetValue(dict, key)\n        let secIdentity = unsafeBitCast(value, to: SecIdentity.self)\n        \n        let secIdentityCopyPrivateKey = SecIdentityCopyPrivateKey(secIdentity, &privateKeyRef)\n        if secIdentityCopyPrivateKey != errSecSuccess {\n            print(\"return the private key associated with an identity unsuccessfully\")\n            return nil\n        }\n        return privateKeyRef\n    }\n```\n\n* RSAEncrypt\n\n```\npublic class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let encryptData = string.data(using: String.Encoding.utf8) else {\n            print(\"String to be encrypted is nil\")\n            completion?(nil)\n            return\n        }\n        \n        rsaEncrypt(publicKeyPath, encryptData) { (data) in\n            guard let encryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(encryptedData.base64String)\n        }\n    }\n```\n\n```\npublic class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = publicKeyPath,\n            let pkRef = loadPublicKey(pkPath),\n            let dt = data else {\n                print(\"path of public key is nil.\")\n                completion?(nil)\n                return\n        }\n        \n        guard dt.count > 0 && dt.count < SecKeyGetBlockSize(pkRef) - 11\n            else {\n                print(\"The content encrypted is too large\")\n                completion?(nil)\n                return\n        }\n        \n        let cipherBufferSize = SecKeyGetBlockSize(pkRef)\n        var encryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)\n        var outputSize: Int = cipherBufferSize\n        let secKeyEncrypt = SecKeyEncrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &encryptBytes, &outputSize)\n        if errSecSuccess != secKeyEncrypt {\n            print(\"decrypt unsuccessfully\")\n            completion?(nil)\n            return\n        }\n        \n        completion?(Data(bytes: UnsafePointer<UInt8>(encryptBytes), count: outputSize))\n    }\n```\n\n* RSADecrypt\n\n```\npublic class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let str = string,\n            let decryptData = Data(base64Encoded: str) else {\n                print(\"String to be decrypted is nil\")\n                completion?(nil)\n                return\n        }\n        \n        rsaDecrypt(privateKeyPath, password, decryptData) { (data) in\n            guard let decryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(String(data: decryptedData, encoding: String.Encoding.utf8))\n        }\n    }\n```\n```\n public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = privateKeyPath,\n            let pkRef = loadPrivateKey(pkPath, password),\n            let dt = data else {\n                print(\"path of private key is nil.\")\n                completion?(nil)\n                return\n        }\n        \n        let cipherBufferSize = SecKeyGetBlockSize(pkRef)\n        let keyBufferSize = dt.count\n        if keyBufferSize > cipherBufferSize {\n            print(\"The content decrypted is too large\")\n            completion?(nil)\n            return\n        }\n        \n        var decryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)\n        var outputSize = cipherBufferSize\n        let status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &decryptBytes, &outputSize)\n        if errSecSuccess != status {\n            print(\"decrypt unsuccessfully\")\n            completion?(nil)\n            return\n        }\n        \n        completion?(Data(bytes: UnsafePointer<UInt8>(decryptBytes), count: outputSize))\n    }\n```\n### Base64\n\n```\nextension Data {\n    \n    /// Data to base64 String\n    public var base64String: String {\n        return base64EncodedString(options: NSData.Base64EncodingOptions())\n    }\n    \n    /// Array of UInt8\n    public func arrayOfBytes() -> [UInt8] {\n        let count = self.count / MemoryLayout<UInt8>.size\n        var bytesArray = [UInt8](repeating: 0, count: count)\n        (self as NSData).getBytes(&bytesArray, length:count * MemoryLayout<UInt8>.size)\n        return bytesArray\n    }\n}\n```\n### MD5\n* String\n\n\n```\n public func md5() -> String {\n        let str = self.cString(using: String.Encoding.utf8)\n        let strLen = CUnsignedInt(self.lengthOfBytes(using: String.Encoding.utf8))\n        let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n        let result = UnsafeMutablePointer<UInt8>.allocate(capacity: 16)\n        CC_MD5(str!, strLen, result)\n        let hash = NSMutableString()\n        for i in 0 ..< digestLen {\n            hash.appendFormat(\"%02x\", result[i])\n        }\n        free(result)\n        return String(format: hash as String)\n    }\n```\n\n* File\n\n```\npublic func md5_File() -> String? {\n        guard let fileHandle = FileHandle(forReadingAtPath: self) else {\n            return nil\n        }\n        \n        let ctx = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: MemoryLayout<CC_MD5_CTX>.size)\n        \n        CC_MD5_Init(ctx)\n        \n        var done = false\n        \n        while !done {\n            let fileData = fileHandle.readData(ofLength: 256)\n            fileData.withUnsafeBytes {(bytes: UnsafePointer<CChar>) -> () in\n                /// Use `bytes` inside this closure\n                CC_MD5_Update(ctx, bytes, CC_LONG(fileData.count))\n            }\n            \n            if fileData.count == 0 {\n                done = true\n            }\n        }\n        \n        let digest = Int(CC_MD5_DIGEST_LENGTH)\n        let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digest)\n        CC_MD5_Final(result, ctx);\n        \n        var hash = \"\"\n        for i in 0..<digest {\n            hash +=  String(format: \"%02x\", (result[i]))\n        }\n        \n        free(result)\n        free(ctx)\n        \n        return hash;\n    }\n```\n\n### RSA分段加密\n* RSAEncrypt\n\n```\n public class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let encryptData = string.data(using: String.Encoding.utf8) else {\n            print(\"String to be encrypted is nil\")\n            completion?(nil)\n            return\n        }\n        \n        rsaEncrypt(publicKeyPath, encryptData) { (data) in\n            guard let encryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(encryptedData.base64String)\n        }\n    }\n```\n```\n public class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = publicKeyPath,\n            let pkRef = loadPublicKey(pkPath),\n            let dt = data else {\n                print(\"path of public key is nil.\")\n                completion?(nil)\n                return\n        }\n        let blockLen =  SecKeyGetBlockSize(pkRef)\n        var outBuf = [UInt8](repeating: 0, count: blockLen)\n        var outBufLen:Int = blockLen\n        var index = 0\n        let totalLen = dt.count\n        let resData = NSMutableData()\n        \n        while index < totalLen {\n            var curDataLen = totalLen - index\n            if curDataLen > blockLen - 11 {\n                curDataLen = blockLen - 11\n            }\n            let curData: NSData = dt.subdata(in: Range(NSRange(location: index, length: curDataLen))!) as NSData\n            let status: OSStatus = SecKeyEncrypt(pkRef, SecPadding.PKCS1, curData.bytes.assumingMemoryBound(to: UInt8.self), curData.length, &outBuf, &outBufLen)\n            \n            if status == noErr {\n                resData.append(outBuf, length: outBufLen)\n            }else{\n                print(\"encrypt status = \\(status)\")\n            }\n            \n            index += curDataLen\n        }\n        completion?(resData as Data)\n```\n\n* RSADecrypt\n\n```\n  public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let str = string,\n            let decryptData = Data(base64Encoded: str) else {\n                print(\"String to be decrypted is nil\")\n                completion?(nil)\n                return\n        }\n        \n        rsaDecrypt(privateKeyPath, password, decryptData) { (data) in\n            guard let decryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(String(data: decryptedData, encoding: String.Encoding.utf8))\n        }\n    }\n```\n```\n public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = privateKeyPath,\n            let pkRef = loadPrivateKey(pkPath, password),\n            let dt = data else {\n                print(\"path of private key is nil.\")\n                completion?(nil)\n                return\n        }\n        let blockLen = SecKeyGetBlockSize(pkRef)\n        let outBuf = UnsafeMutablePointer<UInt8>.allocate(capacity: blockLen)\n        defer {\n            outBuf.deallocate()\n        }\n        var outBufLen: Int = blockLen\n        var index = 0\n        let totalLen = dt.count\n        let resData = NSMutableData()\n        \n        while index < totalLen {\n            var curDataLen = totalLen - index\n            if curDataLen  > blockLen {\n                curDataLen = blockLen\n            }\n            let curData: Data = dt.subdata(in: index ..< index + curDataLen)\n            var status:OSStatus = noErr\n            curData.withUnsafeBytes { (bytes:UnsafePointer<UInt8>) in\n                //print(bytes)\n                status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, bytes, curData.count, outBuf, &outBufLen)\n            }\n            \n            if status == noErr {\n                resData.append(outBuf, length: outBufLen)\n            }else{\n                print(\"decrypt status = \\(status)\")\n            }\n            index += curDataLen\n        }\n        completion?(resData as Data)\n```","source":"_posts/非对称RSA加密的副本.md","raw":"---\n\ntitle: iOS非对称RSA加密\nurlPath: RSA\ndate: 2019-06-20\nupdated: 2019-06-20\ntag: [iOS, RSA, base64, MD5, 非对称加密]\n\n---\n\n### Publickey、Privatekey、Certificate\n\n```\nopenssl genrsa -out private_key.pem 1024 //original key\n\nopenssl req -new -key private_key.pem -out rsaCertReq.csr \n\nopenssl x509 -req -days 3650 -in rsaCertReq.csr -signkey private_key.pem -out rsaCert.crt\n\nopenssl x509 -outform der -in rsaCert.crt -out public_key.der // Create public_key.der For iOS\n\nopenssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt //Create private_key.p12 For iOS\n\nopenssl rsa -in private_key.pem -out rsa_public_key.pem -pubout // Create rsa_public_key.pem For Java\n\nopenssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt //Create pkcs8_private_key.pem For Java\n\n```\n<!-- more -->\n\n上面七个步骤，总共生成7个文件。其中　public_key.der 和 private_key.p12 这对公钥私钥是给iOS用的，rsa_public_key.pem 和 pkcs8_private_key.pem是给JAVA用的。\n它们的源都来自一个私钥：private_key.pem ， 所以iOS端加密的数据，是可以被JAVA端解密的，反过来也一样。\n\n\n### iOS RSA\n\n* head File\n\n```\nimport UIKit\nimport CoreFoundation\nimport CommonCrypto\n\n```\n\n* Attributes\n\n```\n// padding types\nlet kTypeOfWrapPadding = SecPadding.PKCS1\n\n// 公钥引用\nstatic var publicKeyRef: SecKey?\n    \n// 私钥引用\nstatic var privateKeyRef: SecKey?\n```\n* LoadPublicKey\n\n```\nclass func loadPublicKey(_ filePath: String) -> SecKey? {\n        if publicKeyRef != nil {\n            publicKeyRef = nil\n        }\n        \n        var certificateRef: SecCertificate?\n        \n        do {\n            // 用一个.der格式证书创建一个证书对象\n            let certificateData = try Data(contentsOf: URL(fileURLWithPath: filePath))\n            certificateRef = SecCertificateCreateWithData(kCFAllocatorDefault, certificateData as CFData)\n        } catch {\n            print(\"file of public key is error.\")\n            return nil\n        }\n        \n        // 返回一个默认 X509 策略的公钥对象\n        let policyRef = SecPolicyCreateBasicX509()\n        // 包含信任管理信息的结构体\n        var trustRef: SecTrust?\n        \n        // 基于证书和策略创建一个信任管理对象\n        var status = SecTrustCreateWithCertificates(certificateRef!, policyRef, &trustRef)\n        if status != errSecSuccess {\n            print(\"trust create With Certificates unsuccessfully\")\n            return nil\n        }\n        \n        // 信任结果\n        var trustResult = SecTrustResultType.invalid\n        // 评估指定证书和策略的信任管理是否有效\n        status = SecTrustEvaluate(trustRef!, &trustResult)\n        \n        if status != errSecSuccess {\n            print(\"trust evaluate unsuccessfully\")\n            return nil\n        }\n        \n        // 评估之后返回公钥子证书\n        publicKeyRef = SecTrustCopyPublicKey(trustRef!)\n        if publicKeyRef == nil {\n            print(\"public Key create unsuccessfully\")\n            return nil\n        }\n        \n        return publicKeyRef\n    }\n```\n\n* LoadPrivateKey\n\n```\n  class func loadPrivateKey(_ filePath: String, _ password: String) -> SecKey? {\n        if filePath.count <= 0  {\n            print(\"path of public key is nil.\")\n            return nil\n        }\n        \n        if privateKeyRef != nil {\n            privateKeyRef = nil\n        }\n        \n        var pkcs12Data: Data?\n        do {\n            pkcs12Data = try Data(contentsOf: URL(fileURLWithPath: filePath))\n        } catch {\n            print(error)\n            return nil\n        }\n        \n        let kSecImportExportPassphraseString = kSecImportExportPassphrase as String\n        let options = [kSecImportExportPassphraseString: password]\n        var items : CFArray?\n        let status = SecPKCS12Import(pkcs12Data! as CFData, options as CFDictionary, &items)\n        if status != errSecSuccess {\n            print(\"Imports the contents of a PKCS12 formatted blob unsuccessfully\")\n            return nil\n        }\n        \n        if CFArrayGetCount(items) <= 0 {\n            print(\"the number of values currently in the array <= 0\")\n            return nil\n        }\n        \n        let kSecImportItemIdentityString = kSecImportItemIdentity\n        \n        let dict = unsafeBitCast(CFArrayGetValueAtIndex(items, 0),to: CFDictionary.self)\n        let key = Unmanaged.passUnretained(kSecImportItemIdentityString).toOpaque()\n        let value = CFDictionaryGetValue(dict, key)\n        let secIdentity = unsafeBitCast(value, to: SecIdentity.self)\n        \n        let secIdentityCopyPrivateKey = SecIdentityCopyPrivateKey(secIdentity, &privateKeyRef)\n        if secIdentityCopyPrivateKey != errSecSuccess {\n            print(\"return the private key associated with an identity unsuccessfully\")\n            return nil\n        }\n        return privateKeyRef\n    }\n```\n\n* RSAEncrypt\n\n```\npublic class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let encryptData = string.data(using: String.Encoding.utf8) else {\n            print(\"String to be encrypted is nil\")\n            completion?(nil)\n            return\n        }\n        \n        rsaEncrypt(publicKeyPath, encryptData) { (data) in\n            guard let encryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(encryptedData.base64String)\n        }\n    }\n```\n\n```\npublic class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = publicKeyPath,\n            let pkRef = loadPublicKey(pkPath),\n            let dt = data else {\n                print(\"path of public key is nil.\")\n                completion?(nil)\n                return\n        }\n        \n        guard dt.count > 0 && dt.count < SecKeyGetBlockSize(pkRef) - 11\n            else {\n                print(\"The content encrypted is too large\")\n                completion?(nil)\n                return\n        }\n        \n        let cipherBufferSize = SecKeyGetBlockSize(pkRef)\n        var encryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)\n        var outputSize: Int = cipherBufferSize\n        let secKeyEncrypt = SecKeyEncrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &encryptBytes, &outputSize)\n        if errSecSuccess != secKeyEncrypt {\n            print(\"decrypt unsuccessfully\")\n            completion?(nil)\n            return\n        }\n        \n        completion?(Data(bytes: UnsafePointer<UInt8>(encryptBytes), count: outputSize))\n    }\n```\n\n* RSADecrypt\n\n```\npublic class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let str = string,\n            let decryptData = Data(base64Encoded: str) else {\n                print(\"String to be decrypted is nil\")\n                completion?(nil)\n                return\n        }\n        \n        rsaDecrypt(privateKeyPath, password, decryptData) { (data) in\n            guard let decryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(String(data: decryptedData, encoding: String.Encoding.utf8))\n        }\n    }\n```\n```\n public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = privateKeyPath,\n            let pkRef = loadPrivateKey(pkPath, password),\n            let dt = data else {\n                print(\"path of private key is nil.\")\n                completion?(nil)\n                return\n        }\n        \n        let cipherBufferSize = SecKeyGetBlockSize(pkRef)\n        let keyBufferSize = dt.count\n        if keyBufferSize > cipherBufferSize {\n            print(\"The content decrypted is too large\")\n            completion?(nil)\n            return\n        }\n        \n        var decryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)\n        var outputSize = cipherBufferSize\n        let status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &decryptBytes, &outputSize)\n        if errSecSuccess != status {\n            print(\"decrypt unsuccessfully\")\n            completion?(nil)\n            return\n        }\n        \n        completion?(Data(bytes: UnsafePointer<UInt8>(decryptBytes), count: outputSize))\n    }\n```\n### Base64\n\n```\nextension Data {\n    \n    /// Data to base64 String\n    public var base64String: String {\n        return base64EncodedString(options: NSData.Base64EncodingOptions())\n    }\n    \n    /// Array of UInt8\n    public func arrayOfBytes() -> [UInt8] {\n        let count = self.count / MemoryLayout<UInt8>.size\n        var bytesArray = [UInt8](repeating: 0, count: count)\n        (self as NSData).getBytes(&bytesArray, length:count * MemoryLayout<UInt8>.size)\n        return bytesArray\n    }\n}\n```\n### MD5\n* String\n\n\n```\n public func md5() -> String {\n        let str = self.cString(using: String.Encoding.utf8)\n        let strLen = CUnsignedInt(self.lengthOfBytes(using: String.Encoding.utf8))\n        let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n        let result = UnsafeMutablePointer<UInt8>.allocate(capacity: 16)\n        CC_MD5(str!, strLen, result)\n        let hash = NSMutableString()\n        for i in 0 ..< digestLen {\n            hash.appendFormat(\"%02x\", result[i])\n        }\n        free(result)\n        return String(format: hash as String)\n    }\n```\n\n* File\n\n```\npublic func md5_File() -> String? {\n        guard let fileHandle = FileHandle(forReadingAtPath: self) else {\n            return nil\n        }\n        \n        let ctx = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: MemoryLayout<CC_MD5_CTX>.size)\n        \n        CC_MD5_Init(ctx)\n        \n        var done = false\n        \n        while !done {\n            let fileData = fileHandle.readData(ofLength: 256)\n            fileData.withUnsafeBytes {(bytes: UnsafePointer<CChar>) -> () in\n                /// Use `bytes` inside this closure\n                CC_MD5_Update(ctx, bytes, CC_LONG(fileData.count))\n            }\n            \n            if fileData.count == 0 {\n                done = true\n            }\n        }\n        \n        let digest = Int(CC_MD5_DIGEST_LENGTH)\n        let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digest)\n        CC_MD5_Final(result, ctx);\n        \n        var hash = \"\"\n        for i in 0..<digest {\n            hash +=  String(format: \"%02x\", (result[i]))\n        }\n        \n        free(result)\n        free(ctx)\n        \n        return hash;\n    }\n```\n\n### RSA分段加密\n* RSAEncrypt\n\n```\n public class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let encryptData = string.data(using: String.Encoding.utf8) else {\n            print(\"String to be encrypted is nil\")\n            completion?(nil)\n            return\n        }\n        \n        rsaEncrypt(publicKeyPath, encryptData) { (data) in\n            guard let encryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(encryptedData.base64String)\n        }\n    }\n```\n```\n public class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = publicKeyPath,\n            let pkRef = loadPublicKey(pkPath),\n            let dt = data else {\n                print(\"path of public key is nil.\")\n                completion?(nil)\n                return\n        }\n        let blockLen =  SecKeyGetBlockSize(pkRef)\n        var outBuf = [UInt8](repeating: 0, count: blockLen)\n        var outBufLen:Int = blockLen\n        var index = 0\n        let totalLen = dt.count\n        let resData = NSMutableData()\n        \n        while index < totalLen {\n            var curDataLen = totalLen - index\n            if curDataLen > blockLen - 11 {\n                curDataLen = blockLen - 11\n            }\n            let curData: NSData = dt.subdata(in: Range(NSRange(location: index, length: curDataLen))!) as NSData\n            let status: OSStatus = SecKeyEncrypt(pkRef, SecPadding.PKCS1, curData.bytes.assumingMemoryBound(to: UInt8.self), curData.length, &outBuf, &outBufLen)\n            \n            if status == noErr {\n                resData.append(outBuf, length: outBufLen)\n            }else{\n                print(\"encrypt status = \\(status)\")\n            }\n            \n            index += curDataLen\n        }\n        completion?(resData as Data)\n```\n\n* RSADecrypt\n\n```\n  public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -> ())?) {\n        guard let str = string,\n            let decryptData = Data(base64Encoded: str) else {\n                print(\"String to be decrypted is nil\")\n                completion?(nil)\n                return\n        }\n        \n        rsaDecrypt(privateKeyPath, password, decryptData) { (data) in\n            guard let decryptedData = data else {\n                completion?(nil)\n                return\n            }\n            \n            completion?(String(data: decryptedData, encoding: String.Encoding.utf8))\n        }\n    }\n```\n```\n public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -> ())?) {\n        guard let pkPath = privateKeyPath,\n            let pkRef = loadPrivateKey(pkPath, password),\n            let dt = data else {\n                print(\"path of private key is nil.\")\n                completion?(nil)\n                return\n        }\n        let blockLen = SecKeyGetBlockSize(pkRef)\n        let outBuf = UnsafeMutablePointer<UInt8>.allocate(capacity: blockLen)\n        defer {\n            outBuf.deallocate()\n        }\n        var outBufLen: Int = blockLen\n        var index = 0\n        let totalLen = dt.count\n        let resData = NSMutableData()\n        \n        while index < totalLen {\n            var curDataLen = totalLen - index\n            if curDataLen  > blockLen {\n                curDataLen = blockLen\n            }\n            let curData: Data = dt.subdata(in: index ..< index + curDataLen)\n            var status:OSStatus = noErr\n            curData.withUnsafeBytes { (bytes:UnsafePointer<UInt8>) in\n                //print(bytes)\n                status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, bytes, curData.count, outBuf, &outBufLen)\n            }\n            \n            if status == noErr {\n                resData.append(outBuf, length: outBufLen)\n            }else{\n                print(\"decrypt status = \\(status)\")\n            }\n            index += curDataLen\n        }\n        completion?(resData as Data)\n```","slug":"非对称RSA加密的副本","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0e0qn430000t6o3nft11rcy","content":"<h3 id=\"Publickey、Privatekey、Certificate\"><a href=\"#Publickey、Privatekey、Certificate\" class=\"headerlink\" title=\"Publickey、Privatekey、Certificate\"></a>Publickey、Privatekey、Certificate</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out private_key.pem 1024 //original key</span><br><span class=\"line\"></span><br><span class=\"line\">openssl req -new -key private_key.pem -out rsaCertReq.csr </span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -req -days 3650 -in rsaCertReq.csr -signkey private_key.pem -out rsaCert.crt</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -outform der -in rsaCert.crt -out public_key.der // Create public_key.der For iOS</span><br><span class=\"line\"></span><br><span class=\"line\">openssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt //Create private_key.p12 For iOS</span><br><span class=\"line\"></span><br><span class=\"line\">openssl rsa -in private_key.pem -out rsa_public_key.pem -pubout // Create rsa_public_key.pem For Java</span><br><span class=\"line\"></span><br><span class=\"line\">openssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt //Create pkcs8_private_key.pem For Java</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>上面七个步骤，总共生成7个文件。其中　public_key.der 和 private_key.p12 这对公钥私钥是给iOS用的，rsa_public_key.pem 和 pkcs8_private_key.pem是给JAVA用的。<br>它们的源都来自一个私钥：private_key.pem ， 所以iOS端加密的数据，是可以被JAVA端解密的，反过来也一样。</p>\n<h3 id=\"iOS-RSA\"><a href=\"#iOS-RSA\" class=\"headerlink\" title=\"iOS RSA\"></a>iOS RSA</h3><ul>\n<li>head File</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import UIKit</span><br><span class=\"line\">import CoreFoundation</span><br><span class=\"line\">import CommonCrypto</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Attributes</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// padding types</span><br><span class=\"line\">let kTypeOfWrapPadding = SecPadding.PKCS1</span><br><span class=\"line\"></span><br><span class=\"line\">// 公钥引用</span><br><span class=\"line\">static var publicKeyRef: SecKey?</span><br><span class=\"line\">    </span><br><span class=\"line\">// 私钥引用</span><br><span class=\"line\">static var privateKeyRef: SecKey?</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>LoadPublicKey</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class func loadPublicKey(_ filePath: String) -&gt; SecKey? &#123;</span><br><span class=\"line\">        if publicKeyRef != nil &#123;</span><br><span class=\"line\">            publicKeyRef = nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var certificateRef: SecCertificate?</span><br><span class=\"line\">        </span><br><span class=\"line\">        do &#123;</span><br><span class=\"line\">            // 用一个.der格式证书创建一个证书对象</span><br><span class=\"line\">            let certificateData = try Data(contentsOf: URL(fileURLWithPath: filePath))</span><br><span class=\"line\">            certificateRef = SecCertificateCreateWithData(kCFAllocatorDefault, certificateData as CFData)</span><br><span class=\"line\">        &#125; catch &#123;</span><br><span class=\"line\">            print(&quot;file of public key is error.&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 返回一个默认 X509 策略的公钥对象</span><br><span class=\"line\">        let policyRef = SecPolicyCreateBasicX509()</span><br><span class=\"line\">        // 包含信任管理信息的结构体</span><br><span class=\"line\">        var trustRef: SecTrust?</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 基于证书和策略创建一个信任管理对象</span><br><span class=\"line\">        var status = SecTrustCreateWithCertificates(certificateRef!, policyRef, &amp;trustRef)</span><br><span class=\"line\">        if status != errSecSuccess &#123;</span><br><span class=\"line\">            print(&quot;trust create With Certificates unsuccessfully&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 信任结果</span><br><span class=\"line\">        var trustResult = SecTrustResultType.invalid</span><br><span class=\"line\">        // 评估指定证书和策略的信任管理是否有效</span><br><span class=\"line\">        status = SecTrustEvaluate(trustRef!, &amp;trustResult)</span><br><span class=\"line\">        </span><br><span class=\"line\">        if status != errSecSuccess &#123;</span><br><span class=\"line\">            print(&quot;trust evaluate unsuccessfully&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 评估之后返回公钥子证书</span><br><span class=\"line\">        publicKeyRef = SecTrustCopyPublicKey(trustRef!)</span><br><span class=\"line\">        if publicKeyRef == nil &#123;</span><br><span class=\"line\">            print(&quot;public Key create unsuccessfully&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return publicKeyRef</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>LoadPrivateKey</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class func loadPrivateKey(_ filePath: String, _ password: String) -&gt; SecKey? &#123;</span><br><span class=\"line\">      if filePath.count &lt;= 0  &#123;</span><br><span class=\"line\">          print(&quot;path of public key is nil.&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      if privateKeyRef != nil &#123;</span><br><span class=\"line\">          privateKeyRef = nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      var pkcs12Data: Data?</span><br><span class=\"line\">      do &#123;</span><br><span class=\"line\">          pkcs12Data = try Data(contentsOf: URL(fileURLWithPath: filePath))</span><br><span class=\"line\">      &#125; catch &#123;</span><br><span class=\"line\">          print(error)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      let kSecImportExportPassphraseString = kSecImportExportPassphrase as String</span><br><span class=\"line\">      let options = [kSecImportExportPassphraseString: password]</span><br><span class=\"line\">      var items : CFArray?</span><br><span class=\"line\">      let status = SecPKCS12Import(pkcs12Data! as CFData, options as CFDictionary, &amp;items)</span><br><span class=\"line\">      if status != errSecSuccess &#123;</span><br><span class=\"line\">          print(&quot;Imports the contents of a PKCS12 formatted blob unsuccessfully&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      if CFArrayGetCount(items) &lt;= 0 &#123;</span><br><span class=\"line\">          print(&quot;the number of values currently in the array &lt;= 0&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      let kSecImportItemIdentityString = kSecImportItemIdentity</span><br><span class=\"line\">      </span><br><span class=\"line\">      let dict = unsafeBitCast(CFArrayGetValueAtIndex(items, 0),to: CFDictionary.self)</span><br><span class=\"line\">      let key = Unmanaged.passUnretained(kSecImportItemIdentityString).toOpaque()</span><br><span class=\"line\">      let value = CFDictionaryGetValue(dict, key)</span><br><span class=\"line\">      let secIdentity = unsafeBitCast(value, to: SecIdentity.self)</span><br><span class=\"line\">      </span><br><span class=\"line\">      let secIdentityCopyPrivateKey = SecIdentityCopyPrivateKey(secIdentity, &amp;privateKeyRef)</span><br><span class=\"line\">      if secIdentityCopyPrivateKey != errSecSuccess &#123;</span><br><span class=\"line\">          print(&quot;return the private key associated with an identity unsuccessfully&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return privateKeyRef</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RSAEncrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">        guard let encryptData = string.data(using: String.Encoding.utf8) else &#123;</span><br><span class=\"line\">            print(&quot;String to be encrypted is nil&quot;)</span><br><span class=\"line\">            completion?(nil)</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        rsaEncrypt(publicKeyPath, encryptData) &#123; (data) in</span><br><span class=\"line\">            guard let encryptedData = data else &#123;</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            completion?(encryptedData.base64String)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">        guard let pkPath = publicKeyPath,</span><br><span class=\"line\">            let pkRef = loadPublicKey(pkPath),</span><br><span class=\"line\">            let dt = data else &#123;</span><br><span class=\"line\">                print(&quot;path of public key is nil.&quot;)</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        guard dt.count &gt; 0 &amp;&amp; dt.count &lt; SecKeyGetBlockSize(pkRef) - 11</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                print(&quot;The content encrypted is too large&quot;)</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let cipherBufferSize = SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">        var encryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)</span><br><span class=\"line\">        var outputSize: Int = cipherBufferSize</span><br><span class=\"line\">        let secKeyEncrypt = SecKeyEncrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &amp;encryptBytes, &amp;outputSize)</span><br><span class=\"line\">        if errSecSuccess != secKeyEncrypt &#123;</span><br><span class=\"line\">            print(&quot;decrypt unsuccessfully&quot;)</span><br><span class=\"line\">            completion?(nil)</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        completion?(Data(bytes: UnsafePointer&lt;UInt8&gt;(encryptBytes), count: outputSize))</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RSADecrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">        guard let str = string,</span><br><span class=\"line\">            let decryptData = Data(base64Encoded: str) else &#123;</span><br><span class=\"line\">                print(&quot;String to be decrypted is nil&quot;)</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        rsaDecrypt(privateKeyPath, password, decryptData) &#123; (data) in</span><br><span class=\"line\">            guard let decryptedData = data else &#123;</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            completion?(String(data: decryptedData, encoding: String.Encoding.utf8))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let pkPath = privateKeyPath,</span><br><span class=\"line\">           let pkRef = loadPrivateKey(pkPath, password),</span><br><span class=\"line\">           let dt = data else &#123;</span><br><span class=\"line\">               print(&quot;path of private key is nil.&quot;)</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       let cipherBufferSize = SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">       let keyBufferSize = dt.count</span><br><span class=\"line\">       if keyBufferSize &gt; cipherBufferSize &#123;</span><br><span class=\"line\">           print(&quot;The content decrypted is too large&quot;)</span><br><span class=\"line\">           completion?(nil)</span><br><span class=\"line\">           return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       var decryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)</span><br><span class=\"line\">       var outputSize = cipherBufferSize</span><br><span class=\"line\">       let status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &amp;decryptBytes, &amp;outputSize)</span><br><span class=\"line\">       if errSecSuccess != status &#123;</span><br><span class=\"line\">           print(&quot;decrypt unsuccessfully&quot;)</span><br><span class=\"line\">           completion?(nil)</span><br><span class=\"line\">           return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       completion?(Data(bytes: UnsafePointer&lt;UInt8&gt;(decryptBytes), count: outputSize))</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension Data &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// Data to base64 String</span><br><span class=\"line\">    public var base64String: String &#123;</span><br><span class=\"line\">        return base64EncodedString(options: NSData.Base64EncodingOptions())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// Array of UInt8</span><br><span class=\"line\">    public func arrayOfBytes() -&gt; [UInt8] &#123;</span><br><span class=\"line\">        let count = self.count / MemoryLayout&lt;UInt8&gt;.size</span><br><span class=\"line\">        var bytesArray = [UInt8](repeating: 0, count: count)</span><br><span class=\"line\">        (self as NSData).getBytes(&amp;bytesArray, length:count * MemoryLayout&lt;UInt8&gt;.size)</span><br><span class=\"line\">        return bytesArray</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MD5\"><a href=\"#MD5\" class=\"headerlink\" title=\"MD5\"></a>MD5</h3><ul>\n<li>String</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public func md5() -&gt; String &#123;</span><br><span class=\"line\">       let str = self.cString(using: String.Encoding.utf8)</span><br><span class=\"line\">       let strLen = CUnsignedInt(self.lengthOfBytes(using: String.Encoding.utf8))</span><br><span class=\"line\">       let digestLen = Int(CC_MD5_DIGEST_LENGTH)</span><br><span class=\"line\">       let result = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: 16)</span><br><span class=\"line\">       CC_MD5(str!, strLen, result)</span><br><span class=\"line\">       let hash = NSMutableString()</span><br><span class=\"line\">       for i in 0 ..&lt; digestLen &#123;</span><br><span class=\"line\">           hash.appendFormat(&quot;%02x&quot;, result[i])</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       free(result)</span><br><span class=\"line\">       return String(format: hash as String)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>File</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public func md5_File() -&gt; String? &#123;</span><br><span class=\"line\">        guard let fileHandle = FileHandle(forReadingAtPath: self) else &#123;</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let ctx = UnsafeMutablePointer&lt;CC_MD5_CTX&gt;.allocate(capacity: MemoryLayout&lt;CC_MD5_CTX&gt;.size)</span><br><span class=\"line\">        </span><br><span class=\"line\">        CC_MD5_Init(ctx)</span><br><span class=\"line\">        </span><br><span class=\"line\">        var done = false</span><br><span class=\"line\">        </span><br><span class=\"line\">        while !done &#123;</span><br><span class=\"line\">            let fileData = fileHandle.readData(ofLength: 256)</span><br><span class=\"line\">            fileData.withUnsafeBytes &#123;(bytes: UnsafePointer&lt;CChar&gt;) -&gt; () in</span><br><span class=\"line\">                /// Use `bytes` inside this closure</span><br><span class=\"line\">                CC_MD5_Update(ctx, bytes, CC_LONG(fileData.count))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if fileData.count == 0 &#123;</span><br><span class=\"line\">                done = true</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let digest = Int(CC_MD5_DIGEST_LENGTH)</span><br><span class=\"line\">        let result = UnsafeMutablePointer&lt;CUnsignedChar&gt;.allocate(capacity: digest)</span><br><span class=\"line\">        CC_MD5_Final(result, ctx);</span><br><span class=\"line\">        </span><br><span class=\"line\">        var hash = &quot;&quot;</span><br><span class=\"line\">        for i in 0..&lt;digest &#123;</span><br><span class=\"line\">            hash +=  String(format: &quot;%02x&quot;, (result[i]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        free(result)</span><br><span class=\"line\">        free(ctx)</span><br><span class=\"line\">        </span><br><span class=\"line\">        return hash;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RSA分段加密\"><a href=\"#RSA分段加密\" class=\"headerlink\" title=\"RSA分段加密\"></a>RSA分段加密</h3><ul>\n<li>RSAEncrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let encryptData = string.data(using: String.Encoding.utf8) else &#123;</span><br><span class=\"line\">           print(&quot;String to be encrypted is nil&quot;)</span><br><span class=\"line\">           completion?(nil)</span><br><span class=\"line\">           return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       rsaEncrypt(publicKeyPath, encryptData) &#123; (data) in</span><br><span class=\"line\">           guard let encryptedData = data else &#123;</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           completion?(encryptedData.base64String)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let pkPath = publicKeyPath,</span><br><span class=\"line\">           let pkRef = loadPublicKey(pkPath),</span><br><span class=\"line\">           let dt = data else &#123;</span><br><span class=\"line\">               print(&quot;path of public key is nil.&quot;)</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       let blockLen =  SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">       var outBuf = [UInt8](repeating: 0, count: blockLen)</span><br><span class=\"line\">       var outBufLen:Int = blockLen</span><br><span class=\"line\">       var index = 0</span><br><span class=\"line\">       let totalLen = dt.count</span><br><span class=\"line\">       let resData = NSMutableData()</span><br><span class=\"line\">       </span><br><span class=\"line\">       while index &lt; totalLen &#123;</span><br><span class=\"line\">           var curDataLen = totalLen - index</span><br><span class=\"line\">           if curDataLen &gt; blockLen - 11 &#123;</span><br><span class=\"line\">               curDataLen = blockLen - 11</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           let curData: NSData = dt.subdata(in: Range(NSRange(location: index, length: curDataLen))!) as NSData</span><br><span class=\"line\">           let status: OSStatus = SecKeyEncrypt(pkRef, SecPadding.PKCS1, curData.bytes.assumingMemoryBound(to: UInt8.self), curData.length, &amp;outBuf, &amp;outBufLen)</span><br><span class=\"line\">           </span><br><span class=\"line\">           if status == noErr &#123;</span><br><span class=\"line\">               resData.append(outBuf, length: outBufLen)</span><br><span class=\"line\">           &#125;else&#123;</span><br><span class=\"line\">               print(&quot;encrypt status = \\(status)&quot;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           index += curDataLen</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       completion?(resData as Data)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RSADecrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">      guard let str = string,</span><br><span class=\"line\">          let decryptData = Data(base64Encoded: str) else &#123;</span><br><span class=\"line\">              print(&quot;String to be decrypted is nil&quot;)</span><br><span class=\"line\">              completion?(nil)</span><br><span class=\"line\">              return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      rsaDecrypt(privateKeyPath, password, decryptData) &#123; (data) in</span><br><span class=\"line\">          guard let decryptedData = data else &#123;</span><br><span class=\"line\">              completion?(nil)</span><br><span class=\"line\">              return</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">          completion?(String(data: decryptedData, encoding: String.Encoding.utf8))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let pkPath = privateKeyPath,</span><br><span class=\"line\">           let pkRef = loadPrivateKey(pkPath, password),</span><br><span class=\"line\">           let dt = data else &#123;</span><br><span class=\"line\">               print(&quot;path of private key is nil.&quot;)</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       let blockLen = SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">       let outBuf = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: blockLen)</span><br><span class=\"line\">       defer &#123;</span><br><span class=\"line\">           outBuf.deallocate()</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       var outBufLen: Int = blockLen</span><br><span class=\"line\">       var index = 0</span><br><span class=\"line\">       let totalLen = dt.count</span><br><span class=\"line\">       let resData = NSMutableData()</span><br><span class=\"line\">       </span><br><span class=\"line\">       while index &lt; totalLen &#123;</span><br><span class=\"line\">           var curDataLen = totalLen - index</span><br><span class=\"line\">           if curDataLen  &gt; blockLen &#123;</span><br><span class=\"line\">               curDataLen = blockLen</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           let curData: Data = dt.subdata(in: index ..&lt; index + curDataLen)</span><br><span class=\"line\">           var status:OSStatus = noErr</span><br><span class=\"line\">           curData.withUnsafeBytes &#123; (bytes:UnsafePointer&lt;UInt8&gt;) in</span><br><span class=\"line\">               //print(bytes)</span><br><span class=\"line\">               status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, bytes, curData.count, outBuf, &amp;outBufLen)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           if status == noErr &#123;</span><br><span class=\"line\">               resData.append(outBuf, length: outBufLen)</span><br><span class=\"line\">           &#125;else&#123;</span><br><span class=\"line\">               print(&quot;decrypt status = \\(status)&quot;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           index += curDataLen</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       completion?(resData as Data)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":14757,"excerpt":"<h3 id=\"Publickey、Privatekey、Certificate\"><a href=\"#Publickey、Privatekey、Certificate\" class=\"headerlink\" title=\"Publickey、Privatekey、Certificate\"></a>Publickey、Privatekey、Certificate</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out private_key.pem 1024 //original key</span><br><span class=\"line\"></span><br><span class=\"line\">openssl req -new -key private_key.pem -out rsaCertReq.csr </span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -req -days 3650 -in rsaCertReq.csr -signkey private_key.pem -out rsaCert.crt</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -outform der -in rsaCert.crt -out public_key.der // Create public_key.der For iOS</span><br><span class=\"line\"></span><br><span class=\"line\">openssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt //Create private_key.p12 For iOS</span><br><span class=\"line\"></span><br><span class=\"line\">openssl rsa -in private_key.pem -out rsa_public_key.pem -pubout // Create rsa_public_key.pem For Java</span><br><span class=\"line\"></span><br><span class=\"line\">openssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt //Create pkcs8_private_key.pem For Java</span><br></pre></td></tr></table></figure>","more":"<p>上面七个步骤，总共生成7个文件。其中　public_key.der 和 private_key.p12 这对公钥私钥是给iOS用的，rsa_public_key.pem 和 pkcs8_private_key.pem是给JAVA用的。<br>它们的源都来自一个私钥：private_key.pem ， 所以iOS端加密的数据，是可以被JAVA端解密的，反过来也一样。</p>\n<h3 id=\"iOS-RSA\"><a href=\"#iOS-RSA\" class=\"headerlink\" title=\"iOS RSA\"></a>iOS RSA</h3><ul>\n<li>head File</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import UIKit</span><br><span class=\"line\">import CoreFoundation</span><br><span class=\"line\">import CommonCrypto</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Attributes</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// padding types</span><br><span class=\"line\">let kTypeOfWrapPadding = SecPadding.PKCS1</span><br><span class=\"line\"></span><br><span class=\"line\">// 公钥引用</span><br><span class=\"line\">static var publicKeyRef: SecKey?</span><br><span class=\"line\">    </span><br><span class=\"line\">// 私钥引用</span><br><span class=\"line\">static var privateKeyRef: SecKey?</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>LoadPublicKey</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class func loadPublicKey(_ filePath: String) -&gt; SecKey? &#123;</span><br><span class=\"line\">        if publicKeyRef != nil &#123;</span><br><span class=\"line\">            publicKeyRef = nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var certificateRef: SecCertificate?</span><br><span class=\"line\">        </span><br><span class=\"line\">        do &#123;</span><br><span class=\"line\">            // 用一个.der格式证书创建一个证书对象</span><br><span class=\"line\">            let certificateData = try Data(contentsOf: URL(fileURLWithPath: filePath))</span><br><span class=\"line\">            certificateRef = SecCertificateCreateWithData(kCFAllocatorDefault, certificateData as CFData)</span><br><span class=\"line\">        &#125; catch &#123;</span><br><span class=\"line\">            print(&quot;file of public key is error.&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 返回一个默认 X509 策略的公钥对象</span><br><span class=\"line\">        let policyRef = SecPolicyCreateBasicX509()</span><br><span class=\"line\">        // 包含信任管理信息的结构体</span><br><span class=\"line\">        var trustRef: SecTrust?</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 基于证书和策略创建一个信任管理对象</span><br><span class=\"line\">        var status = SecTrustCreateWithCertificates(certificateRef!, policyRef, &amp;trustRef)</span><br><span class=\"line\">        if status != errSecSuccess &#123;</span><br><span class=\"line\">            print(&quot;trust create With Certificates unsuccessfully&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 信任结果</span><br><span class=\"line\">        var trustResult = SecTrustResultType.invalid</span><br><span class=\"line\">        // 评估指定证书和策略的信任管理是否有效</span><br><span class=\"line\">        status = SecTrustEvaluate(trustRef!, &amp;trustResult)</span><br><span class=\"line\">        </span><br><span class=\"line\">        if status != errSecSuccess &#123;</span><br><span class=\"line\">            print(&quot;trust evaluate unsuccessfully&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 评估之后返回公钥子证书</span><br><span class=\"line\">        publicKeyRef = SecTrustCopyPublicKey(trustRef!)</span><br><span class=\"line\">        if publicKeyRef == nil &#123;</span><br><span class=\"line\">            print(&quot;public Key create unsuccessfully&quot;)</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return publicKeyRef</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>LoadPrivateKey</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class func loadPrivateKey(_ filePath: String, _ password: String) -&gt; SecKey? &#123;</span><br><span class=\"line\">      if filePath.count &lt;= 0  &#123;</span><br><span class=\"line\">          print(&quot;path of public key is nil.&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      if privateKeyRef != nil &#123;</span><br><span class=\"line\">          privateKeyRef = nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      var pkcs12Data: Data?</span><br><span class=\"line\">      do &#123;</span><br><span class=\"line\">          pkcs12Data = try Data(contentsOf: URL(fileURLWithPath: filePath))</span><br><span class=\"line\">      &#125; catch &#123;</span><br><span class=\"line\">          print(error)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      let kSecImportExportPassphraseString = kSecImportExportPassphrase as String</span><br><span class=\"line\">      let options = [kSecImportExportPassphraseString: password]</span><br><span class=\"line\">      var items : CFArray?</span><br><span class=\"line\">      let status = SecPKCS12Import(pkcs12Data! as CFData, options as CFDictionary, &amp;items)</span><br><span class=\"line\">      if status != errSecSuccess &#123;</span><br><span class=\"line\">          print(&quot;Imports the contents of a PKCS12 formatted blob unsuccessfully&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      if CFArrayGetCount(items) &lt;= 0 &#123;</span><br><span class=\"line\">          print(&quot;the number of values currently in the array &lt;= 0&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      let kSecImportItemIdentityString = kSecImportItemIdentity</span><br><span class=\"line\">      </span><br><span class=\"line\">      let dict = unsafeBitCast(CFArrayGetValueAtIndex(items, 0),to: CFDictionary.self)</span><br><span class=\"line\">      let key = Unmanaged.passUnretained(kSecImportItemIdentityString).toOpaque()</span><br><span class=\"line\">      let value = CFDictionaryGetValue(dict, key)</span><br><span class=\"line\">      let secIdentity = unsafeBitCast(value, to: SecIdentity.self)</span><br><span class=\"line\">      </span><br><span class=\"line\">      let secIdentityCopyPrivateKey = SecIdentityCopyPrivateKey(secIdentity, &amp;privateKeyRef)</span><br><span class=\"line\">      if secIdentityCopyPrivateKey != errSecSuccess &#123;</span><br><span class=\"line\">          print(&quot;return the private key associated with an identity unsuccessfully&quot;)</span><br><span class=\"line\">          return nil</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return privateKeyRef</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RSAEncrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">        guard let encryptData = string.data(using: String.Encoding.utf8) else &#123;</span><br><span class=\"line\">            print(&quot;String to be encrypted is nil&quot;)</span><br><span class=\"line\">            completion?(nil)</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        rsaEncrypt(publicKeyPath, encryptData) &#123; (data) in</span><br><span class=\"line\">            guard let encryptedData = data else &#123;</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            completion?(encryptedData.base64String)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">        guard let pkPath = publicKeyPath,</span><br><span class=\"line\">            let pkRef = loadPublicKey(pkPath),</span><br><span class=\"line\">            let dt = data else &#123;</span><br><span class=\"line\">                print(&quot;path of public key is nil.&quot;)</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        guard dt.count &gt; 0 &amp;&amp; dt.count &lt; SecKeyGetBlockSize(pkRef) - 11</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                print(&quot;The content encrypted is too large&quot;)</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let cipherBufferSize = SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">        var encryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)</span><br><span class=\"line\">        var outputSize: Int = cipherBufferSize</span><br><span class=\"line\">        let secKeyEncrypt = SecKeyEncrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &amp;encryptBytes, &amp;outputSize)</span><br><span class=\"line\">        if errSecSuccess != secKeyEncrypt &#123;</span><br><span class=\"line\">            print(&quot;decrypt unsuccessfully&quot;)</span><br><span class=\"line\">            completion?(nil)</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        completion?(Data(bytes: UnsafePointer&lt;UInt8&gt;(encryptBytes), count: outputSize))</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RSADecrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">        guard let str = string,</span><br><span class=\"line\">            let decryptData = Data(base64Encoded: str) else &#123;</span><br><span class=\"line\">                print(&quot;String to be decrypted is nil&quot;)</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        rsaDecrypt(privateKeyPath, password, decryptData) &#123; (data) in</span><br><span class=\"line\">            guard let decryptedData = data else &#123;</span><br><span class=\"line\">                completion?(nil)</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            completion?(String(data: decryptedData, encoding: String.Encoding.utf8))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let pkPath = privateKeyPath,</span><br><span class=\"line\">           let pkRef = loadPrivateKey(pkPath, password),</span><br><span class=\"line\">           let dt = data else &#123;</span><br><span class=\"line\">               print(&quot;path of private key is nil.&quot;)</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       let cipherBufferSize = SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">       let keyBufferSize = dt.count</span><br><span class=\"line\">       if keyBufferSize &gt; cipherBufferSize &#123;</span><br><span class=\"line\">           print(&quot;The content decrypted is too large&quot;)</span><br><span class=\"line\">           completion?(nil)</span><br><span class=\"line\">           return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       var decryptBytes = [UInt8](repeating: 0, count: cipherBufferSize)</span><br><span class=\"line\">       var outputSize = cipherBufferSize</span><br><span class=\"line\">       let status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, dt.arrayOfBytes(), dt.count, &amp;decryptBytes, &amp;outputSize)</span><br><span class=\"line\">       if errSecSuccess != status &#123;</span><br><span class=\"line\">           print(&quot;decrypt unsuccessfully&quot;)</span><br><span class=\"line\">           completion?(nil)</span><br><span class=\"line\">           return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       completion?(Data(bytes: UnsafePointer&lt;UInt8&gt;(decryptBytes), count: outputSize))</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension Data &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// Data to base64 String</span><br><span class=\"line\">    public var base64String: String &#123;</span><br><span class=\"line\">        return base64EncodedString(options: NSData.Base64EncodingOptions())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// Array of UInt8</span><br><span class=\"line\">    public func arrayOfBytes() -&gt; [UInt8] &#123;</span><br><span class=\"line\">        let count = self.count / MemoryLayout&lt;UInt8&gt;.size</span><br><span class=\"line\">        var bytesArray = [UInt8](repeating: 0, count: count)</span><br><span class=\"line\">        (self as NSData).getBytes(&amp;bytesArray, length:count * MemoryLayout&lt;UInt8&gt;.size)</span><br><span class=\"line\">        return bytesArray</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MD5\"><a href=\"#MD5\" class=\"headerlink\" title=\"MD5\"></a>MD5</h3><ul>\n<li>String</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public func md5() -&gt; String &#123;</span><br><span class=\"line\">       let str = self.cString(using: String.Encoding.utf8)</span><br><span class=\"line\">       let strLen = CUnsignedInt(self.lengthOfBytes(using: String.Encoding.utf8))</span><br><span class=\"line\">       let digestLen = Int(CC_MD5_DIGEST_LENGTH)</span><br><span class=\"line\">       let result = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: 16)</span><br><span class=\"line\">       CC_MD5(str!, strLen, result)</span><br><span class=\"line\">       let hash = NSMutableString()</span><br><span class=\"line\">       for i in 0 ..&lt; digestLen &#123;</span><br><span class=\"line\">           hash.appendFormat(&quot;%02x&quot;, result[i])</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       free(result)</span><br><span class=\"line\">       return String(format: hash as String)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>File</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public func md5_File() -&gt; String? &#123;</span><br><span class=\"line\">        guard let fileHandle = FileHandle(forReadingAtPath: self) else &#123;</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let ctx = UnsafeMutablePointer&lt;CC_MD5_CTX&gt;.allocate(capacity: MemoryLayout&lt;CC_MD5_CTX&gt;.size)</span><br><span class=\"line\">        </span><br><span class=\"line\">        CC_MD5_Init(ctx)</span><br><span class=\"line\">        </span><br><span class=\"line\">        var done = false</span><br><span class=\"line\">        </span><br><span class=\"line\">        while !done &#123;</span><br><span class=\"line\">            let fileData = fileHandle.readData(ofLength: 256)</span><br><span class=\"line\">            fileData.withUnsafeBytes &#123;(bytes: UnsafePointer&lt;CChar&gt;) -&gt; () in</span><br><span class=\"line\">                /// Use `bytes` inside this closure</span><br><span class=\"line\">                CC_MD5_Update(ctx, bytes, CC_LONG(fileData.count))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if fileData.count == 0 &#123;</span><br><span class=\"line\">                done = true</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let digest = Int(CC_MD5_DIGEST_LENGTH)</span><br><span class=\"line\">        let result = UnsafeMutablePointer&lt;CUnsignedChar&gt;.allocate(capacity: digest)</span><br><span class=\"line\">        CC_MD5_Final(result, ctx);</span><br><span class=\"line\">        </span><br><span class=\"line\">        var hash = &quot;&quot;</span><br><span class=\"line\">        for i in 0..&lt;digest &#123;</span><br><span class=\"line\">            hash +=  String(format: &quot;%02x&quot;, (result[i]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        free(result)</span><br><span class=\"line\">        free(ctx)</span><br><span class=\"line\">        </span><br><span class=\"line\">        return hash;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RSA分段加密\"><a href=\"#RSA分段加密\" class=\"headerlink\" title=\"RSA分段加密\"></a>RSA分段加密</h3><ul>\n<li>RSAEncrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ string: String, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let encryptData = string.data(using: String.Encoding.utf8) else &#123;</span><br><span class=\"line\">           print(&quot;String to be encrypted is nil&quot;)</span><br><span class=\"line\">           completion?(nil)</span><br><span class=\"line\">           return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       rsaEncrypt(publicKeyPath, encryptData) &#123; (data) in</span><br><span class=\"line\">           guard let encryptedData = data else &#123;</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           completion?(encryptedData.base64String)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaEncrypt(_ publicKeyPath: String?, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let pkPath = publicKeyPath,</span><br><span class=\"line\">           let pkRef = loadPublicKey(pkPath),</span><br><span class=\"line\">           let dt = data else &#123;</span><br><span class=\"line\">               print(&quot;path of public key is nil.&quot;)</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       let blockLen =  SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">       var outBuf = [UInt8](repeating: 0, count: blockLen)</span><br><span class=\"line\">       var outBufLen:Int = blockLen</span><br><span class=\"line\">       var index = 0</span><br><span class=\"line\">       let totalLen = dt.count</span><br><span class=\"line\">       let resData = NSMutableData()</span><br><span class=\"line\">       </span><br><span class=\"line\">       while index &lt; totalLen &#123;</span><br><span class=\"line\">           var curDataLen = totalLen - index</span><br><span class=\"line\">           if curDataLen &gt; blockLen - 11 &#123;</span><br><span class=\"line\">               curDataLen = blockLen - 11</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           let curData: NSData = dt.subdata(in: Range(NSRange(location: index, length: curDataLen))!) as NSData</span><br><span class=\"line\">           let status: OSStatus = SecKeyEncrypt(pkRef, SecPadding.PKCS1, curData.bytes.assumingMemoryBound(to: UInt8.self), curData.length, &amp;outBuf, &amp;outBufLen)</span><br><span class=\"line\">           </span><br><span class=\"line\">           if status == noErr &#123;</span><br><span class=\"line\">               resData.append(outBuf, length: outBufLen)</span><br><span class=\"line\">           &#125;else&#123;</span><br><span class=\"line\">               print(&quot;encrypt status = \\(status)&quot;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           index += curDataLen</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       completion?(resData as Data)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RSADecrypt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ string: String?, _ completion: ((_ encryptedString: String?) -&gt; ())?) &#123;</span><br><span class=\"line\">      guard let str = string,</span><br><span class=\"line\">          let decryptData = Data(base64Encoded: str) else &#123;</span><br><span class=\"line\">              print(&quot;String to be decrypted is nil&quot;)</span><br><span class=\"line\">              completion?(nil)</span><br><span class=\"line\">              return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      rsaDecrypt(privateKeyPath, password, decryptData) &#123; (data) in</span><br><span class=\"line\">          guard let decryptedData = data else &#123;</span><br><span class=\"line\">              completion?(nil)</span><br><span class=\"line\">              return</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">          completion?(String(data: decryptedData, encoding: String.Encoding.utf8))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class func rsaDecrypt(_ privateKeyPath: String?, _ password: String, _ data: Data?, _ completion: ((_ encryptedData: Data?) -&gt; ())?) &#123;</span><br><span class=\"line\">       guard let pkPath = privateKeyPath,</span><br><span class=\"line\">           let pkRef = loadPrivateKey(pkPath, password),</span><br><span class=\"line\">           let dt = data else &#123;</span><br><span class=\"line\">               print(&quot;path of private key is nil.&quot;)</span><br><span class=\"line\">               completion?(nil)</span><br><span class=\"line\">               return</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       let blockLen = SecKeyGetBlockSize(pkRef)</span><br><span class=\"line\">       let outBuf = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: blockLen)</span><br><span class=\"line\">       defer &#123;</span><br><span class=\"line\">           outBuf.deallocate()</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       var outBufLen: Int = blockLen</span><br><span class=\"line\">       var index = 0</span><br><span class=\"line\">       let totalLen = dt.count</span><br><span class=\"line\">       let resData = NSMutableData()</span><br><span class=\"line\">       </span><br><span class=\"line\">       while index &lt; totalLen &#123;</span><br><span class=\"line\">           var curDataLen = totalLen - index</span><br><span class=\"line\">           if curDataLen  &gt; blockLen &#123;</span><br><span class=\"line\">               curDataLen = blockLen</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           let curData: Data = dt.subdata(in: index ..&lt; index + curDataLen)</span><br><span class=\"line\">           var status:OSStatus = noErr</span><br><span class=\"line\">           curData.withUnsafeBytes &#123; (bytes:UnsafePointer&lt;UInt8&gt;) in</span><br><span class=\"line\">               //print(bytes)</span><br><span class=\"line\">               status = SecKeyDecrypt(pkRef, SecPadding.PKCS1, bytes, curData.count, outBuf, &amp;outBufLen)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           if status == noErr &#123;</span><br><span class=\"line\">               resData.append(outBuf, length: outBufLen)</span><br><span class=\"line\">           &#125;else&#123;</span><br><span class=\"line\">               print(&quot;decrypt status = \\(status)&quot;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           index += curDataLen</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       completion?(resData as Data)</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck05d9e4h0001js4a7k2y1v9r","tag_id":"ck05d9e4s0004js4a8o5xr3n3","_id":"ck05d9e5r000gjs4aoe5pze6z"},{"post_id":"ck05d9e4h0001js4a7k2y1v9r","tag_id":"ck05d9e550008js4ajbjxijpi","_id":"ck05d9e5u000ijs4ao3diswzd"},{"post_id":"ck05d9e4h0001js4a7k2y1v9r","tag_id":"ck05d9e5b000bjs4av0bv7ywi","_id":"ck05d9e5y000ljs4aobjpl2e4"},{"post_id":"ck05d9e5e000djs4aentrpf0s","tag_id":"ck05d9e4s0004js4a8o5xr3n3","_id":"ck05d9e5z000mjs4a7lb2dxdd"},{"post_id":"ck05d9e4o0003js4ac4gxg0kg","tag_id":"ck05d9e4s0004js4a8o5xr3n3","_id":"ck05d9e5z000ojs4a6w2gx56z"},{"post_id":"ck05d9e4o0003js4ac4gxg0kg","tag_id":"ck05d9e5u000jjs4a6cos691r","_id":"ck05d9e60000pjs4a9jc7x2y2"},{"post_id":"ck05d9e510006js4ap0it1wfh","tag_id":"ck05d9e5z000njs4acu3a8nj4","_id":"ck05d9e62000rjs4adbfk61lm"},{"post_id":"ck05d9e530007js4aysp1w1kx","tag_id":"ck05d9e5z000njs4acu3a8nj4","_id":"ck05d9e63000tjs4aoujg184k"},{"post_id":"ck05d9e560009js4ap5brsawr","tag_id":"ck05d9e62000sjs4ass6rvcy1","_id":"ck05d9e65000xjs4aw6shzsja"},{"post_id":"ck05d9e560009js4ap5brsawr","tag_id":"ck05d9e63000ujs4a09bxnqww","_id":"ck05d9e65000yjs4al45wt2bo"},{"post_id":"ck05d9e560009js4ap5brsawr","tag_id":"ck05d9e64000vjs4avzd560gs","_id":"ck05d9e65000zjs4a9bf3pzpm"},{"post_id":"ck05d9e560009js4ap5brsawr","tag_id":"ck05d9e64000wjs4a6diit9u6","_id":"ck05d9e660010js4auiuvg00c"},{"post_id":"ck05d9ekb0013js4as2ogseas","tag_id":"ck05d9e4s0004js4a8o5xr3n3","_id":"ck05d9ekj0018js4avfhrbvzp"},{"post_id":"ck05d9ekb0013js4as2ogseas","tag_id":"ck05d9eke0014js4ay8nwbwfp","_id":"ck05d9ekj0019js4ad35xa86n"},{"post_id":"ck05d9ekb0013js4as2ogseas","tag_id":"ck05d9ekf0015js4a3vi1a7f9","_id":"ck05d9ekk001ajs4a670tzok8"},{"post_id":"ck05d9ekb0013js4as2ogseas","tag_id":"ck05d9ekg0016js4asxxa6z90","_id":"ck05d9ekl001bjs4aarvttfia"},{"post_id":"ck05d9ekb0013js4as2ogseas","tag_id":"ck05d9ekh0017js4ad7odtd84","_id":"ck05d9ekl001cjs4aotktz8tl"},{"post_id":"ck0e0qn430000t6o3nft11rcy","tag_id":"ck05d9e4s0004js4a8o5xr3n3","_id":"ck0e0qn450001t6o3iaebatly"},{"post_id":"ck0e0qn430000t6o3nft11rcy","tag_id":"ck05d9eke0014js4ay8nwbwfp","_id":"ck0e0qn450002t6o3jy0ydvou"},{"post_id":"ck0e0qn430000t6o3nft11rcy","tag_id":"ck05d9ekf0015js4a3vi1a7f9","_id":"ck0e0qn450003t6o3v2yur4z8"},{"post_id":"ck0e0qn430000t6o3nft11rcy","tag_id":"ck05d9ekg0016js4asxxa6z90","_id":"ck0e0qn450004t6o324yu03ze"},{"post_id":"ck0e0qn430000t6o3nft11rcy","tag_id":"ck05d9ekh0017js4ad7odtd84","_id":"ck0e0qn450005t6o3khs5z5it"}],"Tag":[{"name":"iOS","_id":"ck05d9e4s0004js4a8o5xr3n3"},{"name":"TabBar","_id":"ck05d9e550008js4ajbjxijpi"},{"name":"iPhone X","_id":"ck05d9e5b000bjs4av0bv7ywi"},{"name":"PSOF","_id":"ck05d9e5u000jjs4a6cos691r"},{"name":"Shadowsocks","_id":"ck05d9e5z000njs4acu3a8nj4"},{"name":"Ubuntu","_id":"ck05d9e62000sjs4ass6rvcy1"},{"name":"linux","_id":"ck05d9e63000ujs4a09bxnqww"},{"name":"Gnome","_id":"ck05d9e64000vjs4avzd560gs"},{"name":"VNC","_id":"ck05d9e64000wjs4a6diit9u6"},{"name":"RSA","_id":"ck05d9eke0014js4ay8nwbwfp"},{"name":"base64","_id":"ck05d9ekf0015js4a3vi1a7f9"},{"name":"MD5","_id":"ck05d9ekg0016js4asxxa6z90"},{"name":"非对称加密","_id":"ck05d9ekh0017js4ad7odtd84"}]}}