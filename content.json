{"meta":{"title":"henvy'Blog","subtitle":null,"description":null,"author":"henvy","url":"http://www.henvyluk.com"},"pages":[],"posts":[{"title":"","slug":"为你的库添加cocoapods支持","date":"2016-11-27T09:06:06.000Z","updated":"2016-12-14T10:28:25.000Z","comments":true,"path":"2016/11/27/为你的库添加cocoapods支持/","link":"","permalink":"http://www.henvyluk.com/2016/11/27/为你的库添加cocoapods支持/","excerpt":"为你的库添加cocoapods支持前言本文意在教大家一步一步将自己的pods发布到CocoaPods中，将自己写的组件或库开源出去，让别人轻轻pod install一下即可安装。自己在上传pods过程中也遇到过一些小坑，也在此做了说明。测试文件为一个很简单的DynamicLabel类，旨在上传pods的过程，写的不好的地方望砖下留情。 1、环境cocoapods的安装这里就不再说了，另外要说明的是你首先要把项目push到github，并release一个版本打上tag标签（目的在于让cocoapods能够根据你提供的tag来锁定版本），如果没有push可cd到你的项目根目录如下：","text":"为你的库添加cocoapods支持前言本文意在教大家一步一步将自己的pods发布到CocoaPods中，将自己写的组件或库开源出去，让别人轻轻pod install一下即可安装。自己在上传pods过程中也遇到过一些小坑，也在此做了说明。测试文件为一个很简单的DynamicLabel类，旨在上传pods的过程，写的不好的地方望砖下留情。 1、环境cocoapods的安装这里就不再说了，另外要说明的是你首先要把项目push到github，并release一个版本打上tag标签（目的在于让cocoapods能够根据你提供的tag来锁定版本），如果没有push可cd到你的项目根目录如下： //添加 git add -A //commit git commit -m&quot;version description&quot; //push git push origin master //打上标签 git tag&apos;0.0.3&apos; //推送 git push --tags 2、创建podspec文件cd到你的项目根目录如下： //创建podspec文件 pod spec create DynamicLabel 之后会生成一个.podspec文件，我这里用sublime打开，可以看到里面有很多待编辑项，顾名思义，我这里编辑项如下： s.name = &quot;DynamicLabel&quot; s.version = &quot;0.0.3&quot; s.summary = &quot;limited label Scroll display&quot; s.description = &lt;&lt;-DESC limited label Scroll display. DESC s.homepage = &quot;https://github.com/henvyluk/DynamicLabel&quot; s.license = &quot;MIT&quot; s.author = { &quot;henvyluk&quot; =&gt; &quot;henvyluk@163.com&quot; } s.platform = :ios, &quot;7.0&quot; s.source = { :git =&gt; &quot;https://github.com/henvyluk/DynamicLabel.git&quot;, :tag =&gt; &quot;0.0.3&quot; } s.source_files = &quot;Classes&quot;, &quot;DynamicLabel/Classes/**/*.{h,m}&quot; s.exclude_files = &quot;Classes/Exclude&quot; s.framework = &quot;UIKit&quot; s.requires_arc = true 值得注意的是s.source_files需要根据podspec文件的相对位置来写，表示DynamicLabel 下的Classes文件夹下的所有文件下的所有.h/.m文件，s.framework是你的项目所用到的库，我这里只用到了UIKit，如果你的项目中依赖多个库，可以使用： s.frameworks = &quot;SomeFramework&quot;, &quot;AnotherFramework&quot; 当我们开发的库中也可能还依赖第三方库，例如JSONKit，那么可以使用: s.dependency &quot;JSONKit&quot;, &quot;~&gt; 1.4&quot; 另外如果要添加xib文件，在pod中,xib不能当成源文件(即s.source_files),虽然可能会通过检测，但是pod install之后会报错，所以必须要将xib放入资源文件中(即s.resources)，我就遇到过这种情况，只好更新了一个版本， &quot;Unable to run command &apos;StripNIB xxx.nib&apos; - this target might include its own product&quot;. 再一个添加图片资源的话，类似于xib,不需其它操作，我是将xib和图片都放在s.Resource中形如： s.resources = &quot;xxxx/xxx/*.{png,xib}&quot; 这里看一下我的文件目录： 确认完毕后可通过如下做文件校验： pod lib lint 此时如果有红色错误The spec did not pass validation, due to 1 error可通过在上述指令后加–verbose来看出错误出在哪里，根据提示的信息在做修改，这里提醒s.source_files处容易出错，注意文件的位置，以及s.framework不要出错，否则会项目内的代码不识别。 当出现如下的提示时就代表验证通过了，可以进行下一步了： 3、注册Trunk//分别是你的邮箱和描述 pod trunk register henvyluk@163.com --description=&apos;henvy&apos; 之后你的邮箱会收到确认邮件，点击邮件中的链接后验证后： pod trunk me 如图则表示注册成功，可以进行接下来的push了 4、Trunk push执行： pod trunk push 如果push过程中出错，再检查一下podspec文件，我之前因为版本匹配问题出了错。如果看到如下图即代表上传成功，我的pod版本比较新，好像旧的版本跟这有点区别，会给dataURL和日至打印，这个新版本的比较人性化一点，但为啥我觉得很幼稚有木有。 5、验证说是push成功了怎么说也要验证一下吧，来search一下： pod search DynamicLabel 一看握草！！ push出错了？其实不然，cocoapods官网已经有了我们的代码，不信可以搜搜看，See Podspec还可以看到我们的项目在Specs仓库中的具体位置。问题是我们的电脑~/.cocoapods/repos/master/Specs目录并未更新，执行： //更新pod库 pod setup 这一步具体做了什么东西呢？将官方的Specs仓库文件目录下载下来，然后和我们本地的Specs目录进行比对，增加的增加，删除的删除。 第一次会有点慢，之后再setup的话基本上是秒更，最后setup completed,好了现在是最新的了，再来search一下， 要命了，仍然搜不到，我当初就是卡在了这一步，卡的莫名其妙的，因为实在想不通还有什么会影响search，后来在stackoverflow上有提到search_index.json，这是搜索的缓存目录， //清除索引缓存 rm ~/Library/Caches/CocoaPods/search_index.json 之后pod search DynamicLabel，等待重建索引后： 6、写在最后好了至此制作自己的整个开源库的过程就完成了，如果以后要更新版本，同样修改podspec文件重新push就好了，要注意的是如果你之前提交过pod，那么你需要去Claim your Pod认领: 至此结束，也望大神不吝指教，邮件henvyluk@163.com,同时欢迎跳转我的GitHub主页讨论，再会！","categories":[],"tags":[],"keywords":[]},{"title":"","slug":"iOS IJKPlayer RTMP播放器的集成","date":"2016-11-27T09:06:06.000Z","updated":"2016-12-13T14:28:17.000Z","comments":true,"path":"2016/11/27/iOS IJKPlayer RTMP播放器的集成/","link":"","permalink":"http://www.henvyluk.com/2016/11/27/iOS IJKPlayer RTMP播放器的集成/","excerpt":"iOS IJKPlayer RTMP播放器的集成前言前些日子公司要做视频直播，一直也是项目的原因没来得及整理内容。周末闲暇时间特来写篇文章，对IJKPlayer播放器的集成做一下归纳，希望对要做iOS视频直播方向的童鞋们有所帮助。 1、环境搭建总结来说就是HomeBrew or MacPorts、git、yasm的安装(Homebrew是Mac OSX上的软件包管理工具，当时macOS Sierra刚刚出来我就手贱更新了，导致HomeBrew安装出现了问题，所以采用了MacPorts，官方推荐HomeBrew)。","text":"iOS IJKPlayer RTMP播放器的集成前言前些日子公司要做视频直播，一直也是项目的原因没来得及整理内容。周末闲暇时间特来写篇文章，对IJKPlayer播放器的集成做一下归纳，希望对要做iOS视频直播方向的童鞋们有所帮助。 1、环境搭建总结来说就是HomeBrew or MacPorts、git、yasm的安装(Homebrew是Mac OSX上的软件包管理工具，当时macOS Sierra刚刚出来我就手贱更新了，导致HomeBrew安装出现了问题，所以采用了MacPorts，官方推荐HomeBrew)。 这里我只做一下版本检查：首先HomeBrew： ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 待HomeBrew安装完毕即git、yasm： brew install git brew install yasm 2.下载ijkplayer编译1、 首先新建要下载的文件夹ijkplayer并cd到该目录下。 2、 紧接着将ijkplayer文件克隆到新建的文件夹内，在终端输入： //git克隆 git clone https://github.com/Bilibili/ijkplayer.git ijkplayer-ios //进入ijkplayer-ios cd ijkplayer-ios //切换分支 git checkout -B latest k0.7.5 如图所示：3、下载ffmpeg并编译 这一步比较纠结国外网络访问的问题，如果失败就多试几次。 //依然在ijkplayer-ios下载ffmpeg ./init-ios.sh //进入ios目录 cd ios 这一步如果前面没有问题，此时的terminal就像打了鸡血一样狂奔…… (注意中途会有n多个警告，但不要出错就没问题) //clean ./compile-ffmpeg.sh clean //编译 ./compile-ffmpeg.sh all 成功走到这一步就离成功不远了，按步骤走是不会出现问题的，即便有大部分也是网络的原因毕竟大天朝对国外的网络都懂的。 3、demo的处理1、打开官方demo并运行 2、只要前面的流程没报错，这里编译运行都不会出现问题：可以在Online Samples中选择一个m3u8测试ijkplayer是否运行正常如图： 4、制作framework1、打开ijkplayer如图：2、选择edit scheme，下图： 3、将build configuration改为Release后点Close，如图： 4、分别在模拟器和真机(Generic iOS Device也可以)上编译： 5、打开framework所在的目录: 6、看名字就知道一个是模拟器一个是真机，此时cd到Products目录： //合并 lipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework //将合并后的framework拷贝到iphoneos/IJKMediaFramework.framework中 cp IJKMediaFramework Release-iphoneos/IJKMediaFramework.framework/ 7、此时framework就制作好了，将制作好的iphoneos/IJKMediaFramework.framework复制到要集成的项目中Add Files… 8、在所在的项目中添加动态库 9、测试集成，将本段代码复制到ViewController.m中，可直接使用： #import &quot;ViewController.h&quot; #import &lt;IJKMediaFramework/IJKFFMoviePlayerController.h&gt; @interface ViewController () @property(nonatomic,strong)IJKFFMoviePlayerController * player; @end @implementation ViewController - (void)viewDidLoad { [super viewDidLoad]; IJKFFOptions *options = [IJKFFOptions optionsByDefault]; //使用默认配置 NSURL * url = [NSURL URLWithString:@&quot;rtmp://live.hkstv.hk.lxdns.com/live/hks&quot;]; self.player = [[IJKFFMoviePlayerController alloc] initWithContentURL:url withOptions:options]; //初始化播放器，播放在线视频或直播(RTMP) self.player.view.autoresizingMask = UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight; self.player.view.frame = self.view.bounds; self.player.scalingMode = IJKMPMovieScalingModeAspectFit; //缩放模式 self.player.shouldAutoplay = YES; //开启自动播放 self.view.autoresizesSubviews = YES; [self.view addSubview:self.player.view]; } - (void)viewWillAppear:(BOOL)animated { [super viewWillAppear:animated]; [self.player prepareToPlay]; } -(void)viewDidDisappear:(BOOL)animated { [super viewDidDisappear:animated]; [self.player shutdown]; } - (void)didReceiveMemoryWarning { [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated. } @end OK完美收工： 3、github地址在这https://github.com/henvyluk/IJKMediaPlayer,另附demo一份，望大神不吝赐教再会！","categories":[],"tags":[],"keywords":[]}]}